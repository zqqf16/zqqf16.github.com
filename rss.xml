<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
    <title>一个木匠</title>
    <link>https://blog.zorro.im</link>
	<description>zqqf16 的个人博客</description>
    <language>zh-cn</language>
    <generator>Peanut</generator>
    <item>
		<title>中年人从0开始健身-跑步篇</title>
		<link>https://blog.zorro.im/posts/2022-01-06-running.html</link>
		<description>&lt;p&gt;随着年龄的增长以及工作时间延长，身体的各项指标越来越差，于是在2019年底的时候鼓足勇气决定开始健身，到现在已经两年多了，还算有点小成就。&lt;/p&gt;
&lt;p&gt;目前各项数据如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;5公里最快速度：&lt;strong&gt;22分03秒&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;最长距离：&lt;strong&gt;15公里，用时1小时24分&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;连续跑步最长天数：&lt;strong&gt;6天，共计42公里&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些数据跟一些跑步大神没法比，但是作为一个32岁才跑了人生中第一个5公里的人来说，自我感觉已经非常优秀了，至少在公司健身房内算头部吧😂。&lt;/p&gt;
&lt;h3 id=&#34;_1&#34;&gt;我是如何开始跑步的&lt;/h3&gt;
&lt;p&gt;我的耐力（或者说心肺能力）一直较差，小时候3公里都不能一口气跑下来。在30岁之前一共跑过两次4公里，一次是在初一，另一次是在2016年（用时24分）。而且左膝一直有问题，长时间走路会有酸胀感觉，所以一直不敢尝试跑步。&lt;/p&gt;
&lt;h4 id=&#34;_2&#34;&gt;一、椭圆机阶段&lt;/h4&gt;
&lt;p&gt;在刚开始锻炼的那段时间，我每天会在椭圆机上走3公里左右，一开始用低档、慢速，后面速度逐步加快。  &lt;/p&gt;
&lt;p&gt;这一项主要是慢慢提高心肺能力，让身体能够承受持续的运动负荷。  &lt;/p&gt;
&lt;p&gt;另外，刚开始用椭圆机的时候，总会有人告诉你要注意这个，要注意那个，比如后脚跟不能抬起来这样的鬼话。以我亲身的经验来说，这些都是屁，在椭圆机上怎么练都不会伤到膝盖。  &lt;/p&gt;
&lt;h4 id=&#34;_3&#34;&gt;二、慢跑阶段&lt;/h4&gt;
&lt;p&gt;在椭圆机上练习了几个月，在2020年初的时候，我开始尝试跑步机慢跑。一开始不敢跑太多，一次5分钟的样子，怕对膝盖有损伤。  &lt;/p&gt;
&lt;p&gt;刚开始跑步的感觉跟椭圆机还是有很大差距的，能明显感觉到跑步消耗更多。  &lt;/p&gt;
&lt;p&gt;在坚持几周之后，我就可以跑2公里了，当时感觉还挺好的。  &lt;/p&gt;
&lt;h4 id=&#34;_4&#34;&gt;三、快速跑阶段&lt;/h4&gt;
&lt;p&gt;在能跑到3公里的时候，我开始了提速，从一开始的 9km/h 的速度，慢慢提到 10km/h，10.5km/h, 11km/h……&lt;/p&gt;
&lt;p&gt;在 12km/h（也就是5分配速）的时候，我觉得是时候尝试一下5公里了。&lt;/p&gt;
&lt;h4 id=&#34;5&#34;&gt;四、第一个5公里&lt;/h4&gt;
&lt;p&gt;第一次决定尝试5公里的时候，速度不敢太快，大概是 10km/h 的样子，跑到3、4公里的时候惊奇地发现竟然能坚持下来，于是在后面逐渐提速，人生第一个5公里用时28分多一点。  &lt;/p&gt;
&lt;p&gt;从这以后，跑步的信心大增，逐渐尝试了6公里、7公里、10公里这样的距离，速度也越来越快。比较喜欢在最后 400m 左右的时候开最大速度（15km/h 以上）冲刺，整个健身房都是我脚踏跑步机的声音。&lt;/p&gt;
&lt;h3 id=&#34;_5&#34;&gt;一些跑步建议&lt;/h3&gt;
&lt;p&gt;坚持了两年多，跑了近千公里，总结了一些至少对我个人来说非常有用的建议。&lt;/p&gt;
&lt;h4 id=&#34;_6&#34;&gt;一、正确的跑步姿势&lt;/h4&gt;
&lt;p&gt;&lt;img alt=&#34;正确的跑步姿势&#34; src=&#34;https://z_blog.oss-cn-hangzhou.aliyuncs.com/blog/2kTw-hcikcev9486923.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;跑步是否伤膝盖，其实主要取决于你的脚落地时的姿势。如果你的脚落地时，膝盖处于弯曲状态（如上图右侧所示），那么你的膝关节会缓冲掉大部分冲击，不会让你的软骨、半月板等“一次性”组织受力，从而减小磨损。  &lt;/p&gt;
&lt;p&gt;相反，如果你脚落地时，膝盖处与伸直的状态（上图左侧），那么你的半月板就要几乎承受所有的冲击力了，磨损在所难免。  &lt;/p&gt;
&lt;p&gt;那么如何保持正确的跑步姿势呢？  &lt;/p&gt;
&lt;p&gt;以我的经验，最简单的方式是&lt;strong&gt;不要用后脚跟着地&lt;/strong&gt;，尝试用前脚掌先着地，因为一个人很难在前脚掌着地的时候伸直膝盖。  &lt;/p&gt;
&lt;p&gt;但是，这样做也有坏处，前脚掌着地需要有非常好的脚踝、小腿控制力量，如果这两部分比较薄弱的人，可能跑起来比较困难，需要多加练习。  &lt;/p&gt;
&lt;p&gt;另一个非常有用的控制跑步姿势的方式是&lt;strong&gt;小步快跑&lt;/strong&gt;，就是跑步的时候不要把步子迈得太大，腿不要深得太前。前脚落地时，脚要位于&lt;strong&gt;身体正下方&lt;/strong&gt;，这样能最大限度减少对膝盖的冲击。  &lt;/p&gt;
&lt;h4 id=&#34;_7&#34;&gt;二、一双合适的跑步鞋&lt;/h4&gt;
&lt;p&gt;合脚的跑步鞋非常重要，刚开始慢跑的时候，我穿的是Adidas Boost系列跑步鞋，短距离还行，时间一长，脚弓会非常累。因为它的鞋底还是相对太薄了，不能给脚以足够的支撑。  &lt;/p&gt;
&lt;p&gt;后来“斥巨资”买了双Nike Fly 3，这个被大神们唾弃的“入门级”跑鞋，我穿起来非常合适，5公里、10公里很轻松。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z_blog.oss-cn-hangzhou.aliyuncs.com/blog/AT8240-007_Nike_Zoom_Fly_3_Black_b-L_de746995-ee87-48bd-a0e6-192fb927e1b6_720x.jpg&#34; alt=&#34;Nike Fly 3&#34; style=&#34;zoom:50%;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这是一双&lt;strong&gt;厚底&lt;/strong&gt;、&lt;strong&gt;碳板&lt;/strong&gt;跑鞋，厚底不用多说，从图上就能看出来。它比一般的鞋底要厚很多，里面还有个气垫。这样就能在跑步时给脚足够多的缓冲，不会让足弓受力太多。  &lt;/p&gt;
&lt;p&gt;碳板，是一个近几年兴起的跑鞋技术，就是在鞋底中间加上一层碳纤维板。它足够韧，能够提供非常好的回弹，让你在跑步时有一个“助推感”。  &lt;/p&gt;
&lt;p&gt;厚底碳板跑鞋一般都是号称给“专业跑者”准备的，根据我自己这个“小白跑者”的使用经验来看，它非常适合&lt;strong&gt;大体重&lt;/strong&gt;的人。因为它厚、它弹，可以给大体重跑者足够的支撑。因为普通跑鞋还没跑就已经憋了。  &lt;/p&gt;
&lt;p&gt;当然，这双鞋也有缺点，它过于追求跑步时的姿态，导致后脚跟太窄了，如果你是一个后脚跟先落地型的跑者，大概率会崴脚。  &lt;/p&gt;
&lt;p&gt;再者，它不适合平时走路穿，厚底+窄脚根，走路感觉类似于高跟鞋，不容易控制。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;鞋合不合适只有脚知道&lt;/strong&gt;，建议大家卖鞋的时候不要迷信网上的测评，多去实体店试一试，别人合适的鞋你穿起来不一定合适。也不要迷信各种数字指标，对于新手来说，舒适度、保护性是最应该看中的。至于那双鞋多少多少克、用了几代几代的技术，对一个初学者更本就是毫无意义的营销噱头罢了。&lt;/p&gt;
&lt;h4 id=&#34;_8&#34;&gt;三、其它&lt;/h4&gt;
&lt;p&gt;主要的两部分说完了，再说一些小细节吧。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跑步非常枯燥，半小时下来很难熬，建议准备一些音乐或者播客，或者是思考一些问题（体力不好的时候比较难，容易走神）。&lt;/li&gt;
&lt;li&gt;建议买一副防水耳机，Air Pods系列不防水，我的被汗浸湿后声音变小了。。。&lt;/li&gt;
&lt;li&gt;累了就歇会儿，状态好了就多跑会儿，不高给自己压力，坚持下去马拉松能破2吗？[狗头]&lt;/li&gt;
&lt;li&gt;不要迷信一些跑步大神，包括我这篇文章的建议，跑步圈没有百分百正确的理论，以自己实际体验为主。&lt;/li&gt;
&lt;/ul&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 06 Jan 2022 00:00:00 +0800</pubDate>
    </item>
    <item>
		<title>在 Swift 中使用 QuickJS</title>
		<link>https://blog.zorro.im/posts/2021-12-21-quickjs-swift-bindings.html</link>
		<description>&lt;h2 id=&#34;_1&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;去年用 Swift 写了一个处理日志的 macOS app，其中有个比较核心的功能，可以导入自定义脚本来过滤或者分析日志。
一开始选择的脚本语言是 Python，并且用 &lt;a href=&#34;https://github.com/pvieito/PythonKit&#34;&gt;PythonKit&lt;/a&gt; 实现了 Swift 与 Python 的集成。&lt;/p&gt;
&lt;p&gt;但是，PythonKit &lt;a href=&#34;https://github.com/pvieito/PythonKit/blob/839ef68d9fe5c85ab212272fffbe54e229374d5c/PythonKit/PythonLibrary.swift#L98&#34;&gt;加载 Python 库&lt;/a&gt;的版本会跟当前系统相关。
比如，如果我的默认Pyhton版本是2.7，那么在我电脑上被加载的是2.7，而其他人电脑上可能就是3.x，这样就会导致处理日志的脚本做不到100%兼容各种环境。&lt;/p&gt;
&lt;p&gt;因此决定引入 Javascript 作为替代的脚本语言，JS 引擎选择了一直想尝试的 &lt;a href=&#34;https://bellard.org/quickjs/&#34;&gt;QuickJS&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;集成&lt;/h2&gt;
&lt;p&gt;QuickJS 的代码非常精悍，如果作为库来使用，核心的 C 文件只有5个(&lt;code&gt;quickjs.c&lt;/code&gt;、&lt;code&gt;quickjs-libc.c&lt;/code&gt;、&lt;code&gt;libregexp.c&lt;/code&gt;、&lt;code&gt;libunicode.c&lt;/code&gt;、&lt;code&gt;cutils.c&lt;/code&gt;)，而且绝大多数代码都集中在&lt;code&gt;quickjs.c&lt;/code&gt;、&lt;code&gt;quickjs-libc.c&lt;/code&gt;这两个文件里。&lt;/p&gt;
&lt;p&gt;编译条件也极其简单，不像传统的 C 语言工程，需要 &lt;code&gt;./configure&lt;/code&gt; 或者安装一大堆依赖。把这几个文件拖到 Xcode 工程里，直接 Run 就能编过。&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;简单使用&lt;/h2&gt;
&lt;p&gt;启动一个 QuickJS 引擎步骤非常简单，大致分成以下几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个 &lt;strong&gt;Runtime&lt;/strong&gt;：&lt;code&gt;JS_NewRuntime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建一个 &lt;strong&gt;Context&lt;/strong&gt;：&lt;code&gt;JS_NewContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行 JS 代码：&lt;code&gt;JS_Eval&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详细的例子可以参考 &lt;a href=&#34;https://github.com/bellard/quickjs/blob/master/qjsc.c&#34;&gt;qjsc.c&lt;/a&gt; 或者其它 demo。&lt;/p&gt;
&lt;h2 id=&#34;_4&#34;&gt;封装&lt;/h2&gt;
&lt;p&gt;为了使上层使用起来更方便，我做了一个 Swift Package，把 C 语言接口包装成了更 Swift 的方式，代码在：https://github.com/zqqf16/QuickJS-Swift。&lt;/p&gt;
&lt;p&gt;调用者只需要在你的 &lt;code&gt;Package.swift&lt;/code&gt; 文件里加上&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;https://github.com/zqqf16/QuickJS-Swift.git&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;就可以了。&lt;/p&gt;
&lt;h3 id=&#34;swift-js&#34;&gt;Swift 调用 JS 代码&lt;/h3&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;QuickJS&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;runtime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSRuntime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;jsCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;var i = 10; i;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Result is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;swift-module&#34;&gt;用 Swift 实现一个 Module&lt;/h3&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kd&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;QuickJS&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;runtime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSRuntime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Create a module named &amp;quot;Magic&amp;quot; with two functions &amp;quot;getMagic&amp;quot; and &amp;quot;getMagic2&amp;quot;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Magic&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;JSModuleFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;getMagic&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;JSModuleFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;getMagic2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;getMagic&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;import { getMagic, getMagic2 } from &amp;#39;swift&amp;#39;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;globalThis.magic = getMagic();&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;globalThis.magic2 = getMagic2();&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getMagic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;magic&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;magic;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Magic is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;magic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//10&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;magic2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;magic2;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Magic2 is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;magic2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;runloop&#34;&gt;Runloop&lt;/h2&gt;
&lt;p&gt;在 Nodejs 或者其它实现（比如 &lt;a href=&#34;https://github.com/saghul/txiki.js&#34;&gt;txiki&lt;/a&gt;）里，异步 IO 都是通过 &lt;code&gt;libuv&lt;/code&gt; 来处理的，既然用了 Swift，就打算用 NSRunloop 了。&lt;/p&gt;
&lt;p&gt;参考了一下 txiki 代码，把 runloop 实现成了一个 &lt;a href=&#34;https://github.com/zqqf16/QuickJS-Swift/blob/master/Sources/QuickJS/JSRunloop.swift&#34;&gt;module&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;核心的原理很简单，就是 JS 在调用 &lt;code&gt;setTimeout&lt;/code&gt; 等方法时，Swift 创建一个 NSTimer 插到 runloop 中，timer 触发的时候再去调用 JS 的 callback 代码。&lt;/p&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;runtime&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JSRuntime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;createContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enableRunloop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;jsCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;import * as rl from &amp;quot;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runloop&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;rl.setTimeout(function(){ console.log(&amp;quot;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Runloop&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;); }, 3000);&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// waiting for 3 seconds&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Hello Runloop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;目前还是在demo阶段，只支持 &lt;code&gt;setTimeout&lt;/code&gt; 一个方法😂&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;待续 -&lt;/li&gt;
&lt;/ul&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 21 Dec 2021 00:00:00 +0800</pubDate>
    </item>
    <item>
		<title>在 macOS 上编译 libimobiledevice</title>
		<link>https://blog.zorro.im/posts/2018-8-22-how-to-build-libimobiledevice.html</link>
		<description>&lt;h2 id=&#34;_1&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近给 &lt;a href=&#34;http://github.com/zqqf16/SYM&#34;&gt;SYM&lt;/a&gt; 添加了一个新功能：可以直接导入 iOS 设备上的崩溃日志，这个功能是通过 libimobiledevice 实现的。编译静态库的过程中踩了一些坑，在这里记录一下。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;编译步骤&lt;/h2&gt;
&lt;h3 id=&#34;_3&#34;&gt;准备工作&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;安装编译工具&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install automake autoconf libtool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;安装依赖库&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install --HEAD libplist usbmuxd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;openssl&#34;&gt;准备 OpenSSL&lt;/h3&gt;
&lt;p&gt;如果不想用 libimobiledevice 的库，而是直接用编译好的可执行文件，OpenSSL 可以省略，用  GnuTLS 代替。详见&lt;a href=&#34;https://github.com/libimobiledevice/libimobiledevice&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;用 OpenSSL 的好处是集成到其它 App 时，可以直接用 OpenSSL 的库，GnuTLS 的库怎么用还没研究……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下载 OpenSSL 代码&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget https://www.openssl.org/source/openssl-1.0.2t.tar.gz -O openssl.tar.gz
tar vzxf openssl.tar.gz
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; openssl-1.0.2t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;编译 &lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./Configure darwin64-x86_64-cc
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果需要指定支持的 macOS 最小版本，可以这样：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./Configure darwin64-x86_64-cc -mmacosx-version-min&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;.11
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样可以避免集成到 App 时 Xcode 的 warning。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修改 libssl.pc 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;改成以下内容：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;prefix=/path/to/your/openssl-1.0.2t
exec_prefix=&lt;span class=&#34;cp&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}&lt;/span&gt;
libdir=&lt;span class=&#34;cp&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exec_prefix&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}&lt;/span&gt;
includedir=&lt;span class=&#34;cp&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}&lt;/span&gt;/include

Name: OpenSSL-libssl
Description: Secure Sockets Layer and cryptography libraries
Version: 1.0.2t
Requires.private: libcrypto
Libs: -L&lt;span class=&#34;cp&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libdir&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}&lt;/span&gt; -lssl
Libs.private: 
Cflags: -I&lt;span class=&#34;cp&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;includedir&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;添加 pkg-config 路径&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PKG_CONFIG_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/path/to/your/openssl-1.0.2t
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这一步是为了 pkg-config 能够索引到刚才编译的 OpenSSL。&lt;/p&gt;
&lt;h3 id=&#34;libimobiledevice&#34;&gt;编译 libimobiledevice&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;下载 libimobiledevice 代码&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget https://github.com/libimobiledevice/libimobiledevice/archive/master.zip -O libimobiledevice.zip
unzip libimobiledevice.zip
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; libimobiledevice-master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;配置 &amp;amp; 编译&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./autogen.sh
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果需要指定 macOS 的最小版本，可以这样：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make &lt;span class=&#34;nv&#34;&gt;CFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;-g -O2 -mmacosx-version-min=10.11&amp;#39;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;CXXFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;-g -O2 -mmacosx-version-min=10.11&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;_4&#34;&gt;集成&lt;/h2&gt;
&lt;p&gt;libimobiledevice 的库在 &lt;code&gt;libimobiledevice-master/src/.libs&lt;/code&gt; 目录下，比如静态库是 &lt;strong&gt;libimobiledevice.a&lt;/strong&gt;。头文件在 &lt;code&gt;libimobiledevice-master/include&lt;/code&gt; 目录&lt;/p&gt;
&lt;p&gt;OpenSSL 的库在 &lt;code&gt;openssl-1.0.2p&lt;/code&gt; 目录下，静态库是 &lt;strong&gt;libcrypto.a&lt;/strong&gt; 和 &lt;strong&gt;libssl.a&lt;/strong&gt;。头文件在 &lt;code&gt;openssl-1.0.2p/include&lt;/code&gt; 目录。&lt;/p&gt;
&lt;p&gt;如果集成到 App，还需要 &lt;a href=&#34;https://github.com/libimobiledevice/libplist&#34;&gt;&lt;strong&gt;libplist&lt;/strong&gt;&lt;/a&gt; 以及 &lt;a href=&#34;https://github.com/libimobiledevice/libusbmuxd&#34;&gt;&lt;strong&gt;libusbmuxd&lt;/strong&gt;&lt;/a&gt; 两个库，可以直接用 brew 安装的那个，或者也可以自己编译，步骤与编译 libimobiledevice 类似，但是要简单很多，不依赖 OpenSSL。&lt;/p&gt;
&lt;p&gt;最后，欢迎体验最新版本的 &lt;a href=&#34;https://github.com/zqqf16/SYM/releases/latest&#34;&gt;SYM&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Wed, 22 Aug 2018 00:00:00 +0800</pubDate>
    </item>
    <item>
		<title>安利一套iOS开发工具-libimobiledevice</title>
		<link>https://blog.zorro.im/posts/2018-5-6-libimobiledevice.html</link>
		<description>&lt;h2 id=&#34;_1&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;公司项目大了之后，Xcode 调试控制台输出的内容已经被各种各样的东西冲得七零八落。有时候自己加的 log 还没看见就被冲没了，影响调试效率。&lt;/p&gt;
&lt;p&gt;在 Xcode 还能支持插件的时代，可以用一些插件来过滤 log，但现在的版本已经不能用了。在搜索第三方 log 替代方案时，发现了 libimobiledevice。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;libimobiledevice 是一个跨平台的连接 iOS 设备的软件库，可以用来操作 iOS 设备，比如读取设备信息、读取设备日志、获取设备屏幕截图、浏览 Document 文件夹等功能。Appium、iTools 等工具也是基于这个库。&lt;/p&gt;
&lt;h3 id=&#34;_3&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;brew install --HEAD libimobiledevice&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--HEAD&lt;/code&gt; 是为了基于最新代码安装，libimobiledevice 需要随着 iOS 版本升级来做调整，需要保持最新。&lt;/p&gt;
&lt;h3 id=&#34;_4&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;实时查看系统日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;idevicesyslog&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于 NSLog、DDlog 等默认会写到 iOS 系统日志里，所以这个工具可以用来实时查看调试日志。&lt;/p&gt;
&lt;p&gt;可以跟 grep、awk、sed 等命令组合来添加过滤条件:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;idevicesyslog | grep your_app_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者过滤掉一些乱七八糟的内容:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;idevicesyslog | grep -v xxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取设备截图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;idevicescreenshot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看设备信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ideviceinfo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看设备上已安装应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ideviceinstaller -l&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挂载应用的 Document 目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;需要安装 ifuse&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew cask install osxfuse ; brew install ifuse&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;创建挂载点&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo mkdir /Volumes/you_app_name.app&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;挂载 App 目录&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir /tmp/you_app_id
ifuse --container you.app.id /tmp/you_app_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;you.app.id&lt;/code&gt; 可以通过 &lt;code&gt;ideviceinstaller -l&lt;/code&gt; 得到，&lt;code&gt;-o allow_other&lt;/code&gt; 可以让非 root 用户来访问。&lt;/p&gt;
&lt;p&gt;打开目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open /tmp/you_app_id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其它&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;libimobiledevice 提供了一些列 idevice 开头的工具，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;idevice_id&lt;/li&gt;
&lt;li&gt;idevicedebug&lt;/li&gt;
&lt;li&gt;ideviceinfo&lt;/li&gt;
&lt;li&gt;idevicescreenshot&lt;/li&gt;
&lt;li&gt;idevicebackup&lt;/li&gt;
&lt;li&gt;idevicedebugserverproxy&lt;/li&gt;
&lt;li&gt;idevicename&lt;/li&gt;
&lt;li&gt;idevicesyslog&lt;/li&gt;
&lt;li&gt;idevicebackup2&lt;/li&gt;
&lt;li&gt;idevicediagnostics&lt;/li&gt;
&lt;li&gt;idevicenotificationproxy&lt;/li&gt;
&lt;li&gt;idevicecrashreport       &lt;/li&gt;
&lt;li&gt;ideviceenterrecovery&lt;/li&gt;
&lt;li&gt;idevicepair&lt;/li&gt;
&lt;li&gt;idevicedate&lt;/li&gt;
&lt;li&gt;ideviceimagemounter&lt;/li&gt;
&lt;li&gt;ideviceprovision&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有兴趣的可以自己研究一下使用方法&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Sun, 06 May 2018 00:00:00 +0800</pubDate>
    </item>
    <item>
		<title>修复 macOS 不支持某些屏幕 HiDPI 显示的方法</title>
		<link>https://blog.zorro.im/posts/2018-5-3-macOS-hidpi.html</link>
		<description>&lt;h2 id=&#34;_1&#34;&gt;起因&lt;/h2&gt;
&lt;p&gt;多年前，高价搞到了一块 iPad5 屏幕的驱动版，想用一个二手的 iPad5 显示屏做一个 Macbook 的移动显示器。屏幕的分辨率是 2048x1536，HiDPI 模式下也就是 1024x768。买的时候没想那么多，想当然地认为既然 iOS 都支持这个分辨率，macOS 自然不再话下。&lt;/p&gt;
&lt;p&gt;然而事情并非如此，严重低估了 BugOS 的实力，屏幕插上之后，系统能识别出屏幕型号：Apple，但是死活不能支持 1024x768 HiDPI，甚至更奇葩的是，各种其他分辨率下的 HiDPI 都支持，唯独不支持正常的。当时试尽了各种方法，改 Plist，SwitchResX 等等，最终无功而返。反而 Window 10 支持得特别好，这个显示器后来只能作为我的台式机专用了。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;转机&lt;/h2&gt;
&lt;p&gt;后来在逛淘宝的时候，发现现在市面上的 HDMI 转 edp 驱动版已经很成熟了，一块驱动板加一个 13 寸的 2k 屏也很便宜，于是“贼心”不死打算再试一把。&lt;/p&gt;
&lt;p&gt;新买的屏幕是 2560x1440 分辨率的，转成 HiDPI 也就是 1280x720。然而，bugOS 问题依旧，死活不支持 1280x720 HiDPI ……&lt;/p&gt;
&lt;p&gt;后来偶然间搜到了一个帖子：&lt;a href=&#34;http://blog.thefelt.net/make-1280x720-hidpi-work-on-a-169-wqhd-display/&#34;&gt;Make 1280×720 HiDPI Work on a 16:9 WQHD Display&lt;/a&gt;，里面提到了一个解决方法，把分辨率设置成 2558x1440，也就是 HiDPI 下的 1279x720，问题果然得到了解决……当时心中大概奔腾过了一万只草泥马……&lt;/p&gt;
&lt;p&gt;后来又用这个方法，把 iPad 拿块屏的分辨率改成了 2046x1534（1023x767 HiDPI），果然也好用了……&lt;/p&gt;
&lt;p&gt;不得不感叹 macOS 的神奇逻辑&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;后来&lt;/h2&gt;
&lt;p&gt;发现市面上 3D 打印的价格已经很便宜，当年设计了一个外壳，淘宝询价要 800+，现在同样的外壳大概只要 150 不到。于是就兴高采烈地去淘宝打印了外壳，拿回来给 iPad 屏幕组装上，开机，发现屏幕碎了……&lt;/p&gt;
&lt;p&gt;所以，DIY 这个显示器的整个过程中，唯一的收获就是 macOS 如果不支持某些分辨率下的 HiDPI，不妨把分辨率改小2像素试试～&lt;/p&gt;
&lt;p&gt;-EOF-&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 03 May 2018 00:00:00 +0800</pubDate>
    </item>
</channel>
</rss>