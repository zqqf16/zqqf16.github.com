<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
<channel>
    <title>穷折腾</title>
    <link>http://blog.zorro.im</link>
	<description>zqqf16 的个人博客</description>
    <language>zh-cn</language>
    <generator>Peanut</generator>
	
    <item>
		<title>用 strongSwan 搭建免证书的 IKEv2 VPN</title>
		<link>http://blog.zorro.im/posts/strongswan-ikev2-for-ios-without-certificate.html</link>
		<description>&lt;h2 id=&#34;_1&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;目前能搜到的 strongSwan IKEv2 配置基本上都是基于证书的，不知道别人怎么样，反正我觉得证书方式挺繁琐的，虽然跟证书打了三年多的交道。&lt;/p&gt;
&lt;p&gt;如果只是在 iOS 或者 OS X 上用 IKEv2，用 PSK（预共享密钥）的方式就简单很多。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文仅限于科学研究使用，请勿用于其他目的。所有配置文件可以在 &lt;a href=&#34;https://gist.github.com/zqqf16/b207a17637de103e05c6&#34;&gt;Gist&lt;/a&gt; 上获取。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;服务端配置&lt;/h2&gt;
&lt;h3 id=&#34;1-strongswan&#34;&gt;1. 安装 strongSwan&lt;/h3&gt;
&lt;p&gt;我是在 Ubuntu 下安装的，如果图省事，可以直接 &lt;code&gt;apt-get install strongSwan&lt;/code&gt; 搞定，源里的版本已经是 5.x 了，不算太旧。&lt;/p&gt;
&lt;p&gt;如果想安装最新的，可以自行下载编译。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;# Download strongSwan&lt;/span&gt;
wget https://download.strongswan.org/strongswan-5.3.3.tar.gz

&lt;span class=&#34;c&#34;&gt;# Extract and uncompress&lt;/span&gt;
tar -vzxf strongswan-5.3.3.tar.gz

&lt;span class=&#34;nb&#34;&gt;cd &lt;/span&gt;strongswan-5.3.3

&lt;span class=&#34;c&#34;&gt;# Configure&lt;/span&gt;
./configure --prefix&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr --sysconfdir&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/etc  --enable-openssl --enable-nat-transport --disable-mysql --disable-ldap  --disable-static --enable-shared --enable-md4 --enable-eap-mschapv2 --enable-eap-aka --enable-eap-aka-3gpp2  --enable-eap-gtc --enable-eap-identity --enable-eap-md5 --enable-eap-peap --enable-eap-radius --enable-eap-sim --enable-eap-sim-file --enable-eap-simaka-pseudonym --enable-eap-simaka-reauth --enable-eap-simaka-sql --enable-eap-tls --enable-eap-tnc --enable-eap-ttls

&lt;span class=&#34;c&#34;&gt;# Make &amp;amp; install&lt;/span&gt;
make &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;2-strongswan&#34;&gt;2. strongSwan 配置&lt;/h3&gt;
&lt;p&gt;编辑 /etc/ipsec.conf&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;# ipsec.conf - strongSwan IPsec configuration file

# basic configuration

config setup
    strictcrlpolicy=no
    uniqueids = no

# IKEv2 for iOS

conn iOS-IKEV2
    auto=add
    dpdaction=clear
    keyexchange=ikev2

    #left
    left=%any
    leftsubnet=0.0.0.0/0
    leftauth=psk
    leftid=im.zorro.ipsec.server

    #right
    right=%any
    rightsourceip=10.99.1.0/24
    rightauth=eap-mschapv2
    rightid=im.zorro.ipsec.client
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要注意的点是 &lt;code&gt;leftauth=psk&lt;/code&gt; 与 &lt;code&gt;rightauth=eap-mschapv2&lt;/code&gt;，分别对应着 iOS／OS X 中的“设备鉴定”与“EAP 鉴定”。
“rightauth” 的方法有很多，比如 “eap-md5” 这样的，iOS 不一定能支持，有时间的可以多尝试几个～&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS：个人觉得 Apple 的命名方式挺容易理解的，不知道 strongSwan 为啥要叫 left 和 right。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;至于 &lt;code&gt;rightsourceip&lt;/code&gt;，根据使用者的网络情况，别跟客户端子网冲突了就行，比如 &lt;code&gt;172.16.x.x&lt;/code&gt;、&lt;code&gt;10.x.x.x&lt;/code&gt;、&lt;code&gt;192.168.x.x&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;leftid&lt;/code&gt; 与 &lt;code&gt;rightid&lt;/code&gt; 分别对应着&lt;strong&gt;远程标识符&lt;/strong&gt;（RemoteIdentifier）和&lt;strong&gt;局部标识符&lt;/strong&gt;（LocalIdentifier），随便选个顺眼的即可。&lt;/p&gt;
&lt;h3 id=&#34;3-psk&#34;&gt;3. PSK 与用户名密码&lt;/h3&gt;
&lt;p&gt;编辑 /etc/ipsec.secrets&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;: PSK yourpresharedkey
u1 : EAP &amp;quot;password&amp;quot;
u2 : EAP &amp;quot;password&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;: PSK yourpresharedkey&lt;/code&gt; 这行要填预共享密钥，下面的 u1、u2 是添加的两个用户。&lt;/p&gt;
&lt;h3 id=&#34;4-ip-table&#34;&gt;4. 配置 IP Table&lt;/h3&gt;
&lt;p&gt;执行以下代码：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# Add ip tables&lt;/span&gt;

iptables -A INPUT -p udp --dport &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt; -j ACCEPT
iptables -A INPUT -p udp --dport &lt;span class=&#34;m&#34;&gt;4500&lt;/span&gt; -j ACCEPT
&lt;span class=&#34;nb&#34;&gt;echo &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &amp;gt; /proc/sys/net/ipv4/ip_forward
iptables -t nat -A POSTROUTING -s 10.99.1.0/24 -o eth0 -j MASQUERADE
iptables -A FORWARD -s 10.99.1.0/24 -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：&lt;strong&gt;网段要跟 ipsec.conf 里配置的一致&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;5-dns&#34;&gt;5. 配置 DNS&lt;/h3&gt;
&lt;p&gt;编辑 /etc/strongswan.conf&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;charon {
        load_modular = yes

        dns1 = 8.8.8.8
        dns2 = 8.8.4.4

        plugins {
                include strongswan.d/charon/*.conf
        }
}

include strongswan.d/*.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;6-strongswan&#34;&gt;6. 启动 strongSwan&lt;/h3&gt;
&lt;p&gt;启动：&lt;code&gt;ipsec start&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重新加载配置文件：&lt;code&gt;ipsec reload&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重新加载用户名密码文件：&lt;code&gt;ipsec rereadsecrets&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;客户端配置&lt;/h2&gt;
&lt;p&gt;虽然从 iOS 9 开始，系统设置中可以手动添加 IKEv2 配置了，但是没法输入 PSK，也不知道 Apple 咋想的。&lt;/p&gt;
&lt;p&gt;最靠谱的方式还是用配置文件方式，推荐用 Apple Configurator。&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;设备鉴定&lt;/strong&gt;选择&lt;strong&gt;共享密钥&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;勾上&lt;strong&gt;启用 EAP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EAP 鉴定&lt;/strong&gt;选择&lt;strong&gt;用户名/密码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;PS：我用 Apple Configurator 2，可能是 Beta 的缘故，编辑的时候总是提示有错误，却死活找不着错误的地方……&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果没有 Apple Configurator，可以手工编辑下面的文件：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadContent&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IKEv2&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;AuthName&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;{username}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;AuthPassword&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;{password}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;AuthenticationMethod&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;SharedSecret&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ChildSecurityAssociationParameters&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;DiffieHellmanGroup&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;2&lt;span class=&#34;nt&#34;&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;EncryptionAlgorithm&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;3DES&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IntegrityAlgorithm&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;SHA1-96&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;LifeTimeInMinutes&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;1440&lt;span class=&#34;nt&#34;&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;DeadPeerDetectionRate&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Medium&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;DisableMOBIKE&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;DisableRedirect&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;EnableCertificateRevocationCheck&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;EnablePFS&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ExtendedAuthEnabled&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IKESecurityAssociationParameters&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;DiffieHellmanGroup&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;2&lt;span class=&#34;nt&#34;&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;EncryptionAlgorithm&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;3DES&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IntegrityAlgorithm&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;SHA1-96&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;LifeTimeInMinutes&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;1440&lt;span class=&#34;nt&#34;&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;LocalIdentifier&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;{rightid}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RemoteAddress&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;{your_server_address}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RemoteIdentifier&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;{leftid}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;SharedSecret&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;{your_psk}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;UseConfigurationAttributeInternalIPSubnet&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;IPv4&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;OverridePrimary&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadDescription&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Configures VPN settings&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadDisplayName&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;VPN&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadIdentifier&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.apple.vpn.managed.10D1B7B7-57C1-4AFD-A51E-DD496017EA14&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadType&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.apple.vpn.managed&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadUUID&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;F8362154-56D1-434D-AA7A-4CEA68A2C543&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadVersion&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;real&amp;gt;&lt;/span&gt;1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/real&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Proxies&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;dict/&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;UserDefinedName&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;IKEV2&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;VPNType&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;IKEv2&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadDisplayName&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;IKEV2&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadIdentifier&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;{your.payload.identifier}}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadRemovalDisallowed&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadType&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Configuration&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadUUID&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;8F74450B-5341-4796-B0AC-9965E64685EB&lt;span class=&#34;nt&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadVersion&lt;span class=&#34;nt&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;1&lt;span class=&#34;nt&#34;&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存成 .mobileconfig 格式，发到手机里安装就可以了。&lt;/p&gt;
&lt;h2 id=&#34;_4&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/losisli/11081793&#34;&gt;linux上用strongswan搭建ikev2协议vpn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.strongswan.org/projects/strongswan/wiki/ConnSection&#34;&gt;strongSwan configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Wed, 14 Oct 2015 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>在 ARC 下使用 object_setIvar 的问题</title>
		<link>http://blog.zorro.im/posts/object_setIvar_under_arc.html</link>
		<description>&lt;h2 id=&#34;_1&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;前几天有同事遇到了一个问题，在 ARC 下，通过 Runtime 动态创建的类（&lt;code&gt;objc_allocateClassPair&lt;/code&gt;），
在调用 &lt;code&gt;object_setIvar&lt;/code&gt; 给 Ivar 赋值时，发现并不能自动增加被赋值对象的引用计数。
当被赋值的对象被干掉之后，调用 &lt;code&gt;object_getIvar&lt;/code&gt; 会返回野指针。&lt;/p&gt;
&lt;p&gt;由于没 Google 到相似的，所以就自己花时间研究了一下。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;首先，看一下 &lt;code&gt;object_setIvar&lt;/code&gt; 函数的定义，在 Runtime 源码里的 &lt;a href=&#34;http://www.opensource.apple.com/source/objc4/objc4-493.9/runtime/objc-class.m&#34;&gt;objc-class.m&lt;/a&gt; 文件，如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;object_setIvar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ivar&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ivar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ivar&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isTaggedPointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ivar_getClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ISA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ivar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;ptrdiff_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ivar_offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ivar_getOffset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ivar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ivar_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// if this ivar is a member of an ARR compiled class, then issue the correct barrier according to the layout.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_class_usesAutomaticRetainRelease&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// for ARR, layout strings are relative to the instance start.&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instanceStart&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_class_getInstanceStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_layout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_getWeakIvarLayout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weak_layout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_scanned_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ivar_offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instanceStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weak_layout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;// use the weak system to write to this variable.&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;objc_storeWeak&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strong_layout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;class_getIvarLayout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strong_layout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is_scanned_offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ivar_offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instanceStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strong_layout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;objc_storeStrong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#if SUPPORT_GC&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Never go here.&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在调试的时候发现 &lt;code&gt;class_getWeakIvarLayout&lt;/code&gt; 以及 &lt;code&gt;class_getIvarLayout&lt;/code&gt; 返回值都是&lt;code&gt;&#34;&#34;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;首先可以排除掉 &lt;code&gt;objc_storeStrong(location, value);&lt;/code&gt;，因为这个函数会增加引用计数。
由 &lt;code&gt;object_getIvar&lt;/code&gt; 函数返回野指针可以知道，Ivar 内部并不是 Weak 引用的，
进而可以排除掉 &lt;code&gt;objc_storeWeak(location, value);&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所以，这个函数最终会执行到 &lt;code&gt;*location = value;&lt;/code&gt;，直接对指针赋值，整个过程并没有涉及到内存管理。&lt;/p&gt;
&lt;p&gt;至于为什么会这样的关键就在 &lt;code&gt;_class_usesAutomaticRetainRelease&lt;/code&gt; 这个函数了，看一下它的定义：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cm&#34;&gt;/***********************************************************************&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * _class_usesAutomaticRetainRelease&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; * Returns YES if class was compiled with -fobjc-arc&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt; **********************************************************************/&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;BOOL&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_class_usesAutomaticRetainRelease&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ro&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RO_IS_ARR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;YES&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 &lt;code&gt;RO_IS_ARR&lt;/code&gt; 宏定义如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// class compiled with -fobjc-arc (automatic retain/release)&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define RO_IS_ARR             (1&amp;lt;&amp;lt;7)   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 0x80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从函数的注释可以看出来此函数是用来判断这个类是否是在开启 ARC 的情况下编译的。&lt;/p&gt;
&lt;p&gt;而且我搜索了 &lt;code&gt;objc_allocateClassPair&lt;/code&gt; 函数定义以及整个 Runtime 代码，发现没有一个地方设置了这个 flag。
也就是说在运行时创建的类肯定没有这个 flag。&lt;/p&gt;
&lt;p&gt;为了进一步验证，得找到设置这个 flag 的地方，因此我又去翻了一下 clang 的源码（还顺便复习了当年 Vim＋Ctags＋Cscope 的各种用法￣▽￣&#34; ），
在 CGObjCMac.cpp 这个文件中发现了这么一段：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;llvm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GlobalVariable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CGObjCNonFragileABIMac&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildClassRoTInitializer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InstanceStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InstanceSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ObjCImplementationDecl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ClassName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getObjCRuntimeNameAsString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;llvm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 11 for 64bit targets!&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CGM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getLangOpts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ObjCAutoRefCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NonFragileABI_Class_CompiledByARC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;注：当开启 &lt;code&gt;-fobjc-arc&lt;/code&gt; 选项时，&lt;code&gt;CGM.getLangOpts().ObjCAutoRefCount&lt;/code&gt; 返回的是 true，而且 &lt;code&gt;NonFragileABI_Class_CompiledByARC&lt;/code&gt; 的值就是 0x80。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;也就是说当 ARC 开启的时候，clang 会给类设上 0x80 这个 flag。&lt;/p&gt;
&lt;p&gt;到这，就可以分析出来为什么 &lt;code&gt;object_getIvar&lt;/code&gt; 不会增加对象的引用计数了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态创建类的时候，Runtime 并不知道当前代码是否是在 ARC 下编译的，所以进行 Ivar 操作时，
它并不会对 Ivar 里的对象进行自动的内存管理，而是让调用者自己进行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进而也可以知道 &lt;strong&gt;ARC 是需要编译器与 Runtime 共同参与的&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;解决方法&lt;/h2&gt;
&lt;p&gt;如果非要解决 &lt;code&gt;object_getIvar&lt;/code&gt; 不能进行内存管理这个问题，可以采取以下几种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用 MRC&lt;/p&gt;
&lt;p&gt;这个简单粗暴有效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 &lt;code&gt;objc_retain&lt;/code&gt;、&lt;code&gt;objc_release&lt;/code&gt; 方法手动管理 Ivar 引用计数&lt;/p&gt;
&lt;p&gt;这两个方法应该是私有的 API，可以用 &lt;code&gt;dlsym&lt;/code&gt; 来搞定。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Fri, 11 Sep 2015 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>iOS 的多线程同步</title>
		<link>http://blog.zorro.im/posts/iOS-muti-threading-synchronization.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;我的上一家公司有个引以为豪的技术：多核无锁，不仅避免了各种由锁带来的问题，还极大的提高了性能，所以产品性能能够在业界数一数二。
在这样的氛围影响下，我在开发的时候也很少用锁，能不用就不用。
后来去面试 iOS 开发的时候，面试官总是喜欢问有关于锁的问题，最近趁有时间就整理了一下，算是补充一下技能树吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-mutex&#34;&gt;1. 互斥锁（Mutex）&lt;/h2&gt;
&lt;p&gt;互斥锁是比较常用的一种锁，当一个线程试图获取被另一个线程占用的锁时，它将会被挂起，让出 CPU，直到该锁被释放。&lt;/p&gt;
&lt;p&gt;在 iOS 中，互斥锁有多种实现方式：&lt;/p&gt;
&lt;h3 id=&#34;11-posix-api&#34;&gt;1.1 POSIX Api&lt;/h3&gt;
&lt;p&gt;POSIX 方式的优点是比较通用，对那些需要跨平台的 library 来说再合适不过了。&lt;/p&gt;
&lt;p&gt;POSIX 中与互斥锁有关的主要有 5 个函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pthread_mutex_init&lt;/code&gt; 初始化锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_mutex_lock&lt;/code&gt; 加锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_mutex_tylock&lt;/code&gt; 加锁，当锁被占用时，返回 busy，不挂起线程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_mutex_unlock&lt;/code&gt; 释放锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_mutex_destroy&lt;/code&gt; 销毁锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;pthread.h&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;pthread_mutex_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pthread_mutex_init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mutiThreadMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Do something&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;destroyLock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_mutex_destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;12-synchronized&#34;&gt;1.2 @synchronized&lt;/h3&gt;
&lt;p&gt;@synchronized 应该是用起来最简单的方式了，例如：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mutiThreadMethod2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;@synchronized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Do something&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 clang 改写一下就可以发现，其实编译器为这个语法糖做了很多工作，大致如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;//...&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;objc_sync_enter&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;objc_exception_try_enter&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;setjmp&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;objc_exception_extract&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Do something&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;objc_exception_try_exit&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;objc_sync_exit&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;objc_exception_throw&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到做了很多与锁有关的操作，其性能不如 POSIX 方式，尽管后者难看些。&lt;/p&gt;
&lt;h3 id=&#34;13-nslock&#34;&gt;1.3 NSLock&lt;/h3&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;bp&#34;&gt;NSLock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSLock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mutiThreadMethod3&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tryLock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Do something&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;2-recursive-lock&#34;&gt;2. 递归锁（Recursive Lock）&lt;/h2&gt;
&lt;p&gt;递归锁是互斥锁的变体，它允许一个线程在释放它之前多次获取它，并且只有在释放相同次数之后其它线程才能获取它。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;bp&#34;&gt;NSRecursiveLock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;theLock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSRecursiveLock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MyRecursiveFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;theLock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;MyRecursiveFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;theLock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;MyRecursiveFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;3-read-write-lock&#34;&gt;3. 读写锁（Read-write Lock）&lt;/h2&gt;
&lt;p&gt;读写锁把访问对象划分为&lt;strong&gt;读者&lt;/strong&gt;和&lt;strong&gt;写者&lt;/strong&gt;，当读写锁在&lt;strong&gt;读加锁&lt;/strong&gt;状态时，所有的试图以读加锁方式对其进行加锁时，都会获得访问权限。
所有的试图以写加锁方式对其加锁的线程都将阻塞，直到所有的读锁释放。
当在&lt;strong&gt;写加锁&lt;/strong&gt;状态时，所有试图对其加锁的线程都将阻塞。&lt;/p&gt;
&lt;p&gt;读写锁适合读操作远大于写操作的情况。&lt;/p&gt;
&lt;p&gt;在 iOS 上，读写锁得用 POSIX 方式实现。POSIX 提供的相关函数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pthread_rwlock_init&lt;/code&gt; 初始化读写锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_rwlock_rdlock&lt;/code&gt; 读加锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_rwlock_wrlock&lt;/code&gt; 写加锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_rwlock_unlock&lt;/code&gt; 释放锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_rwlock_destroy&lt;/code&gt; 销毁锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;pthread.h&amp;gt;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;pthread_rwlock_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rwlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pthread_rwlock_init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rwlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mutiThreadWritting&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_wrlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rwlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// write&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rwlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mutiThreadReadding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_rdlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rwlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// read&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_rwlock_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rwlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;4-spin-lock&#34;&gt;4. 自旋锁（Spin Lock）&lt;/h2&gt;
&lt;p&gt;自旋锁与互斥锁不同的地方在于，自旋锁是非阻塞的，当一个线程无法获取自旋锁时，会自旋，直到该锁被释放，等待的过程中线程并不会挂起。&lt;/p&gt;
&lt;p&gt;它的优点是效率高，不用进行线程切换。缺点是如果一个线程霸占锁的时间过长，自旋会消耗 CPU 资源。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#import &amp;lt;libkern/OSAtomic.h&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OSSpinLock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OS_SPINLOCK_INIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mutiThreadMethod4&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OSSpinLockLock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Do something&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OSSpinLockUnlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;5-distributed-lock&#34;&gt;5. 分布锁（Distributed Lock）&lt;/h2&gt;
&lt;p&gt;严格来说，分布锁是进程间同步的工具，有点像 Unix 下的各种 lock 文件，比如 apt-get 的 “/var/lib/apt/lists/lock”。&lt;/p&gt;
&lt;p&gt;它并不强制进程休眠，只是起到告知的作用。具体如何处理资源被占，完全由进程自己决定。&lt;/p&gt;
&lt;p&gt;iOS 上几本用不上分布锁，在 OS X 中，可以用 &lt;strong&gt;NSDistributedLock&lt;/strong&gt; 实现：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;NSDistributedLock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSDistributedLock&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;lockWithPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tryLock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Do something&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者，可以直接通过写 lock 文件的方式来实现。&lt;/p&gt;
&lt;h2 id=&#34;6-condition-variable&#34;&gt;6. 条件变量（Condition Variable）&lt;/h2&gt;
&lt;p&gt;如果一个线程需要等待某一条件才能继续执行，而这个条件是由别的线程产生的，这时候只用锁就有点捉襟见肘了。要么不停的轮询，消耗资源，要么每隔一段时间查询一次，丧失了及时性。
条件变量就是为了满足这种场景而生的，它可以让一个线程等待某一条件，当条件满足时，会收到通知。
在获取条件变量并等待条件发生的过程中，也会产生多线程的竞争，所以条件变量通常会和互斥锁一起工作。&lt;/p&gt;
&lt;p&gt;iOS 中，条件变量有两种实现方式：&lt;/p&gt;
&lt;h3 id=&#34;61-posix&#34;&gt;6.1 POSIX&lt;/h3&gt;
&lt;p&gt;POSIX 提供的相关函数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_init&lt;/code&gt; 初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_wait&lt;/code&gt; 等待条件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_broadcast&lt;/code&gt; 发送广播，唤醒所有正在等待的线程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_signal&lt;/code&gt; 发送信号，唤醒第一个线程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pthread_cond_destroy&lt;/code&gt; 销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#include &amp;lt;pthread.h&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;pthread_mutex_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;pthread_cond_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;pthread_mutex_init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pthread_cond_init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;waitCondition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pthread_cond_wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;triggerCondition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pthread_cond_broadcast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;pthread_mutex_destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mutex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;pthread_cond_destroy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;62-nscondition&#34;&gt;6.2 NSCondition&lt;/h3&gt;
&lt;p&gt;例子摘自 &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html&#34;&gt;Threading Programming Guide&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cocoaCondition&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeToDoWork&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cocoaCondition&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;timeToDoWork&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Do real work here.&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cocoaCondition&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;发送信号：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cocoaCondition&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;timeToDoWork&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cocoaCondition&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cocoaCondition&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;7-nsconditionlock&#34;&gt;7. NSConditionLock&lt;/h2&gt;
&lt;p&gt;NSConditionLock 跟 NSCondition 类似，但是实现机制是不一样的，所以单独列了出来。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;生产者&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;condLock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSConditionLock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;initWithCondition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NO_DATA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condLock&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Add data to the queue.&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condLock&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;unlockWithCondition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HAS_DATA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;消费者&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condLock&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;lockWhenCondition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HAS_DATA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Remove data from the queue.&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;condLock&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;unlockWithCondition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEmpty&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;NO_DATA&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HAS_DATA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Process the data locally.&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;8-semaphore&#34;&gt;8. 信号量（Semaphore）&lt;/h2&gt;
&lt;p&gt;信号量可以看成是一种特殊的互斥锁，不同的是，它可以不只有两个状态，它可以是资源的计数器。还记得《操作系统》中学过的 PV 操作么？&lt;/p&gt;
&lt;p&gt;iOS 中，信号量有两种实现方式：&lt;/p&gt;
&lt;h3 id=&#34;81-posix&#34;&gt;8.1 POSIX&lt;/h3&gt;
&lt;p&gt;POSIX 提供的相关函数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sem_init&lt;/code&gt; 初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sem_post&lt;/code&gt; 给信号量的值加一（V 操作）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sem_wait&lt;/code&gt; 给信号量的值减一（P 操作）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sem_getvalue&lt;/code&gt; 返回信号量的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sem_destroy&lt;/code&gt; 销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;82-gcd&#34;&gt;8.2 GCD 信号量&lt;/h3&gt;
&lt;p&gt;GCD 提供的函数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dispatch_semaphore_create&lt;/code&gt; 创建信号量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_semaphore_signal&lt;/code&gt; 发送信号（信号量加一，V 操作）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch_semaphore_wait&lt;/code&gt;等待信号（信号量减一，P 操作）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;dispatch_semaphore_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;semaphore&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dispatch_semaphore_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;dispatch_semaphore_wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;semaphore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DISPATCH_TIME_FOREVER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Do something&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dispatch_semaphore_signal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;semaphore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;9-barrier&#34;&gt;9. 栅栏／屏障（Barrier）&lt;/h2&gt;
&lt;p&gt;如果一个线程需要等待另一个线程的某些操作之后才能继续执行，可以用上面所说的条件变量来实现，还有一种优雅的实现方式 —— Barrier。
形象点说，就是把线程挡在同一个 Barrier 之前，所有的线程都达到 Barrier 之后，统一放行。&lt;/p&gt;
&lt;p&gt;同样，iOS 中有两种实现方式：&lt;/p&gt;
&lt;h3 id=&#34;91-posix&#34;&gt;9.1 POSIX&lt;/h3&gt;
&lt;p&gt;相关函数如下：
- &lt;code&gt;pthread_barrier_init&lt;/code&gt; 创建 barrier
- &lt;code&gt;pthread_barrier_wait&lt;/code&gt; 告知当前线程已经到达 barrier，等所有线程都告知后，会继续往下执行
- &lt;code&gt;pthread_barrier_destroy&lt;/code&gt; 销毁&lt;/p&gt;
&lt;h3 id=&#34;92-dispatch-barrier&#34;&gt;9.2 Dispatch Barrier&lt;/h3&gt;
&lt;p&gt;Dispatch Barrier 的概念跟 POSIX 类似，不同的是它是针对于 GCD 异步任务的。它可以让在它之前提交的异步任务都执行完成之后再执行。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;dispatch_async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async_queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dispatch_async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async_queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// block3 会在 block1 和 block2 执行完成之后再执行&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dispatch_barrier_async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async_queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// block4 和 block5 会在 block3 之后执行&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dispatch_async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async_queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dispatch_async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;async_queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;_1&#34;&gt;后记&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;锁&lt;/strong&gt; 这个东西可谓 “小用怡情，滥用伤身”，用的时候一不小心就会有各种各样的问题，比如死锁，我曾经就这样写过：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;LOCK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;//...&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;someCondition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;UNLOCK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 iOS 中，很多时候都可以用 GCD 的串行队列来避免使用锁：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;dispatch_async&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serialQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为串行队列中的任务一次只能执行一个，所以就不存在资源的竞争，还能有效的避免死锁问题。&lt;/p&gt;
&lt;p&gt;😄&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 04 Aug 2015 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>雕琢前先得有原型，跑之前先学会走</title>
		<link>http://blog.zorro.im/posts/prototype_before_polishing.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;本文标题来自《UNIX 编程艺术》，在此借用这句话来表达一下自己对于软件开发的想法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先说几个我自己的经历。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那时候还是在校学生，打算做一个记账的小程序来练手。当时刚刚接触 MVC，心想，就从 M 开始吧。于是就花了很长时间来设计存储格式（是的，当时还不知道用数据库）。&lt;/p&gt;
&lt;p&gt;那时也没多少经验，编程思想还局限在 C 语言初学者这个级别。为了能够节省存储空间以及减少读取的复杂度，绞尽脑汁，恨不得以“位”为单位来设计。天天脑子里想的就是怎么减少尺寸、怎么快速索引、怎么减少计算次数。当时以为自己是在追求完美，一定要把 Model 层设计的完美无缺。因此花了很多时间在这上面，而这，也直接导致整体进度一拖再拖，最终烂尾了。&lt;/p&gt;
&lt;p&gt;然而到最后的时刻这个程序也没完整的跑起来过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个经历发生在我上班后，那时候打算写写博客来提高一下自己，但市面上的博客应用都不太满意，所以就想自己写一个，顺便也可以学学 Web 开发。&lt;/p&gt;
&lt;p&gt;由于这是我第一个 Web 项目，因此格外用心，直接导致“追求完美”的强迫症又犯了。&lt;/p&gt;
&lt;p&gt;做登陆功能时，花了很长时间研究密码的存储策略，充分考虑到了数据库被攻破的情况，甚至还考虑到了有人要暴力破解密码的情况。觉得普通的样式没有个性，索性花了很长时间设计了一个跟终端很像的 UI。&lt;/p&gt;
&lt;p&gt;做后台管理功能时，花了很长时间在 Markdown 编辑器上，抠出了 Markdown 预览、标签选择器、上传图片、进度条等功能。&lt;/p&gt;
&lt;p&gt;做页面生成功能时，想到万一有人 Ddos 我怎么办，每次访问都生成一次页面岂不是要扛不住？于是乎就构思了缓存机制。还考虑到如果访问量太大，图片存在本地把流量耗完该如何处理……（现在想想也挺好笑的，现在的博客每天访问量最多不过十位数，当时真是想多了😢）&lt;/p&gt;
&lt;p&gt;每做一块功能时，都想着要做到最“完美”，以至于后来自己都觉得工作量太大了，做不出来自己想要的结果。终于，在一次重构过程中烂尾了。&lt;/p&gt;
&lt;p&gt;是的，此时的博客连文章都发布不了，因为还没来得及做（代码在此：&lt;a href=&#34;https://github.com/zqqf16/znote&#34;&gt;Znote&lt;/a&gt;，欢迎围观）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这两个经历只是我那几年的一个缩影，后来总结了一下，那个时候基本有以下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对项目没有整体规划，接到任务后不怎么思考就开始动手。&lt;/li&gt;
&lt;li&gt;喜欢扣细节，比如会在做子模块的时候把接口设计的超级丰富。&lt;/li&gt;
&lt;li&gt;会在主功能还没完成的时候就开始优化，有时候甚至会直接重构。&lt;/li&gt;
&lt;li&gt;会在方案 A 和方案 B 之间犹豫不决，其实连二者的优劣都不清楚。&lt;/li&gt;
&lt;li&gt;在小地方追求所谓的“完美”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我想，像这样的应该不止我一个吧，至少第四点我在很多论坛上都见识过了。很多人把这种行为美其名曰“完美主义”，我觉得这并不是，完美主义应该体现在整体，而不是在单个细节上。过分的在细节上追求完美只是缺乏大局观的表现罢了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;雕琢前先得有原型，跑之前先学会走&lt;/strong&gt; 这个观点是后来在看一些优秀的开源项目代码中领悟过来的。
令人惊艳的项目经常在内部用了很多“丑陋的”实现方式，但这丝毫不妨碍他们的优秀。因为他们的首要任务是为了解决某些问题，而不是纯粹地为了展示自己的代码水平。大多数项目都是在几次迭代之后才变得“赏心悦目”的。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://github.com/zqqf16/znote&#34;&gt;Znote&lt;/a&gt; 失败之后，我重新捋了一下需求，想起来我的出发点就是找个地方写博客。于是就干脆用起了 Github Pages，还顺手写了一个 Python &lt;a href=&#34;https://github.com/zqqf16/zqqf16.github.com&#34;&gt;程序&lt;/a&gt;来把 Markdown 转成 HTML。转眼间已经坚持写博客两年多了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS：我把博客程序放在 Github 以及 Git@OSC 上之后，前前后后大约收到了 50 多个 star 与 30 多个 fork。我一一跟踪过 fork 我代码的人，他们中只有几个人搞起了自己的博客，但坚持写下去的寥寥无几。&lt;/em&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 20 Jul 2015 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>ProxyChains 及其原理</title>
		<link>http://blog.zorro.im/posts/proxychians.html</link>
		<description>&lt;h2 id=&#34;_1&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Shadowsocks 是一个非常好用的 SOCKS 代理程序，尤其在 Mac 上，基本上只要支持系统代理的应用都直接可以一键爬墙了。&lt;/p&gt;
&lt;p&gt;但是有些底层的应用，比如那些传统的 Unix 命令行工具，就不会搭理系统的代理了，甚至绝大多数压根就不支持 SOCKS 代理。&lt;/p&gt;
&lt;p&gt;以前，我一般都会用 L2TP 或 IPSec 这样的底层 VPN 来搞定，不仅麻烦，而且越来越不稳定（原因你懂的……）。&lt;/p&gt;
&lt;p&gt;直到后来发现了 ProxyChains。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;安装以及使用&lt;/h2&gt;
&lt;p&gt;ProxyChains 的项目地址在 &lt;a href=&#34;https://github.com/rofl0r/proxychains-ng&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 Mac 下安装十分简单：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;brew install proxychains-ng
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后编辑配置文件 &lt;strong&gt;/usr/local/etc/proxychains.conf&lt;/strong&gt;，在末尾加上：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;# Shadowsocks
socks5 127.0.0.1 1080
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;2015-9-15 更新&lt;/p&gt;
&lt;p&gt;OS X El Capitan v10.11 之后，Apple 推出了一个叫 &lt;strong&gt;System Integrity Protection&lt;/strong&gt; 的新功能：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A new security policy that applies to every running process, including privileged code and code that runs out of the sandbox. The policy extends additional protections to components on disk and at run-time, only allowing system binaries to be modified by the system installer and software updates. &lt;strong&gt;Code injection and runtime attachments to system binaries are no longer permitted&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果开启了 SIP，可能导致 ProxyChains 失效。解决方法是进入 Recovery 模式，在终端执行 &lt;code&gt;csrutil disable&lt;/code&gt;，禁止 SIP。&lt;/p&gt;
&lt;p&gt;其中的风险请自行判断:-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用方法也很简单，比如 ping：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;proxychains4 ping -c &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; www.google.com
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;proxychains&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; config file found: /usr/local/Cellar/proxychains-ng/4.7/etc/proxychains.conf
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;proxychains&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; preloading /usr/local/Cellar/proxychains-ng/4.7/lib/libproxychains4.dylib
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;proxychains&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; DLL init
PING www.google.com &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;216.58.221.132&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;56&lt;/span&gt; data bytes
&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; bytes from 216.58.221.132: &lt;span class=&#34;nv&#34;&gt;icmp_seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ttl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;41&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;65.601 ms
&lt;span class=&#34;m&#34;&gt;64&lt;/span&gt; bytes from 216.58.221.132: &lt;span class=&#34;nv&#34;&gt;icmp_seq&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ttl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;41&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;66.572 ms

--- www.google.com ping statistics ---
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; packets transmitted, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; packets received, 0.0% packet loss
round-trip min/avg/max/stddev &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 65.601/66.087/66.572/0.486 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当然，需要先启动 Shadowsocks。&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;在其主页上，它是这样描述的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;proxychains ng (new generation) - a preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies. continuation of the unmaintained proxychains project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单的说就是这个程序 Hook 了 sockets 相关的操作，让普通程序的 sockets 数据走 SOCKS/HTTP 代理。&lt;/p&gt;
&lt;p&gt;其核心就是利用了 &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; 这个环境变量（Mac 上是 &lt;strong&gt;DYLD_INSERT_LIBRARIES&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;在 Unix 系统中，如果设置了 LD_PRELOAD 环境变量，那么在程序运行时，动态链接器会先加载该环境变量所指定的动态库。也就是说，这个动态库的加载优先于任何其它的库，包括 libc。&lt;/p&gt;
&lt;p&gt;ProxyChains 创建了一个叫 libproxychains4.so（Mac 上是 libproxychains4.dylib）的动态库。里面重写了 &lt;code&gt;connect&lt;/code&gt;、&lt;code&gt;close&lt;/code&gt; 以及 &lt;code&gt;sendto&lt;/code&gt; 等与 socket 相关的函数，通过这些函数发出的数据将会走代理，详细代码可以参考 libproxychains.c。&lt;/p&gt;
&lt;p&gt;在主程序里，它会读取配置文件，查找 libproxychains4 所在位置，把这些信息存入环境变量后执行子程序。这样子程序里对 socket 相关的函数调用就会被 Hook 了，对子程序来说，跟代理相关的东西都是透明的。&lt;/p&gt;
&lt;p&gt;可以用 printenv 程序来查看增加的环境变量，在 Mac 上，输出结果类似于：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;proxychains4 printenv
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;proxychains&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; config file found: /usr/local/Cellar/proxychains-ng/4.7/etc/proxychains.conf
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;proxychains&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; preloading /usr/local/Cellar/proxychains-ng/4.7/lib/libproxychains4.dylib
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;proxychains&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; DLL init
...
&lt;span class=&#34;nv&#34;&gt;PROXYCHAINS_CONF_FILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/Cellar/proxychains-ng/4.7/etc/proxychains.conf
&lt;span class=&#34;nv&#34;&gt;DYLD_INSERT_LIBRARIES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/Cellar/proxychains-ng/4.7/lib/libproxychains4.dylib
&lt;span class=&#34;nv&#34;&gt;DYLD_FORCE_FLAT_NAMESPACE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一共设置了三个环境变量，其中 &lt;strong&gt;PROXYCHAINS_CONF_FILE&lt;/strong&gt; 保存的是配置文件路径，&lt;strong&gt;DYLD_INSERT_LIBRARIES&lt;/strong&gt; 保存的是动态库路径，在 Mac 中，必须使&lt;strong&gt;DYLD_FORCE_FLAT_NAMESPACE&lt;/strong&gt; 为 1 才能保证 &lt;strong&gt;DYLD_INSERT_LIBRARIES&lt;/strong&gt; 起作用。&lt;/p&gt;
&lt;p&gt;其实还有个一劳永逸的方法：&lt;/p&gt;
&lt;p&gt;手动设置这三个环境变量&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PROXYCHAINS_CONF_FILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/Cellar/proxychains-ng/4.7/etc/proxychains.conf
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DYLD_INSERT_LIBRARIES&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/Cellar/proxychains-ng/4.7/lib/libproxychains4.dylib
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DYLD_FORCE_FLAT_NAMESPACE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样在当前 shell 中运行的所有程序的网络请求都会走代理了。&lt;/p&gt;
&lt;h2 id=&#34;_4&#34;&gt;参考链接&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/haoel/article/details/1602108&#34;&gt;警惕 UNIX 下的 LD_PRELOAD 环境变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hbprotoss.github.io/posts/li-yong-ld_preloadjin-xing-hook.html&#34;&gt;利用 LD_PRELOAD 进行 hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dreamxu.com/proxychains-ng/&#34;&gt;Mac 下安装及配置 ProxyChains-NG 实现终端下代理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dyld.1.html&#34;&gt;dyld - the dynamic link editor&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 25 Jun 2015 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>泰安济南两日游</title>
		<link>http://blog.zorro.im/posts/taian_jinan.html</link>
		<description>&lt;p&gt;周末部门 TB，去泰安、济南玩了两天。&lt;/p&gt;
&lt;p&gt;想起了张宗昌的几首诗。。。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;_1&#34;&gt;游泰山&lt;/h2&gt;
&lt;p&gt;远看泰山黑糊糊，上头细来下头粗。&lt;br /&gt;
如把泰山倒过来，下头细来上头粗。  &lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;云海&#34; src=&#34;http://7d9i7i.com1.z0.glb.clouddn.com/yunhai.png&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;大明湖&lt;/h2&gt;
&lt;p&gt;大明湖，明湖大&lt;br /&gt;
大明湖里有荷花&lt;br /&gt;
荷花上面有蛤蟆&lt;br /&gt;
一戳一蹦达  &lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;大明湖&#34; src=&#34;http://7d9i7i.com1.z0.glb.clouddn.com/daminghu.png&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;游趵突泉&lt;/h2&gt;
&lt;p&gt;趵突泉，泉趵突  &lt;br /&gt;
三个眼子一般粗  &lt;br /&gt;
咕嘟咕嘟往外出   &lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;趵突泉&#34; src=&#34;http://7d9i7i.com1.z0.glb.clouddn.com/baotuquan.png&#34; /&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 01 Jun 2015 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>一场演唱会</title>
		<link>http://blog.zorro.im/posts/concert.html</link>
		<description>&lt;p&gt;&lt;img alt=&#34;Jay&#34; src=&#34;http://zorro-blog.qiniudn.com/jay.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上个月末去天津看了一场周杰伦的演唱会，活了这么大，第一次去看在体育场举行的演唱会，感触挺多。&lt;/p&gt;
&lt;h2 id=&#34;_1&#34;&gt;关于演唱会&lt;/h2&gt;
&lt;p&gt;虽然不怎么喜欢听歌，也不会唱，但还算是听着周杰伦的歌长大的吧。记得第一次听他的歌是在我们当地有线电视的“点歌频道”，在那个花两块钱“巨款”点一首歌的时代，竟然有人天天点播周杰伦的《龙拳》。&lt;/p&gt;
&lt;p&gt;现在想想，在那个他每年都发一张专辑的年代，大家盼望他新专辑时的心情就跟现在的盼新一代 iPhone 是一样的吧。&lt;/p&gt;
&lt;p&gt;演唱会现场还是很震撼的，尤其是全场一两万人大合唱的时候，周围90、00后的同学们把嗓子都喊哑了。&lt;/p&gt;
&lt;p&gt;很遗憾的是我一首歌都不会唱，差不多90%的歌都不知道名字。但那些歌确实勾起了我的回忆，想起了我表哥跟我介绍周杰伦时满眼放光的表情，想起了那个天天唱周杰伦的高中同学，想起了我的第一个手机 —— Moto E380i，因为我用它下载过《牛仔很忙》。&lt;/p&gt;
&lt;p&gt;比人是去嗨的，我们是去怀旧的。&lt;/p&gt;
&lt;p&gt;但是震撼之余还是有很多失望的。由于我们做的位置离看台比较远，虽然正对着，但舞台上的人一个也看不清。现场音效也没调好，全是“嗵、嗵、嗵”的低音鼓声，要不是看见大屏幕上的字幕，我根本没听出来周杰伦已经开唱了。&lt;/p&gt;
&lt;p&gt;还有一些有意思的地方。比如跟歌迷的互动，看似是即兴唱一段，但是大屏幕上的字幕却出卖了他们，分明是准备好了的。还有快结束的时候，他们有意的降低了演唱频率，让现场观众尖叫很久才出来唱下一首，感觉就跟观众们要求他返场似的。其实这也是安排好了的，所有曲目跟节目单上的完全一致，一首都没多。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;关于网络&lt;/h2&gt;
&lt;p&gt;天津奥体中心的网络服务很明显没有做足充分的准备（我猜根本就没准备）。演出开始前一个小时左右，体育场周围已经聚集了上万人。这时候的无线基站基本上是受到“DoS”攻击了，虽然显示3G，但其实一点网络都没有。&lt;/p&gt;
&lt;p&gt;我们打算趁演唱会还没开始，在周围的一家日本料理吃饭。由于之前看见网上有团购，所以也就没准备多少现金，打算现场团购。&lt;/p&gt;
&lt;p&gt;结果到了之后傻眼了，3G 根本刷不出来团购页，饭店提供的 Wifi 也基本等于没有。打算放弃团购直接刷卡时，他们的 POS 机竟然也是无线的，得用 GPRS……最后折腾了将近半个小时才勉强付款成功。&lt;/p&gt;
&lt;p&gt;下次去一个人流量这么大的地方，不要对无线网络抱有幻想了。&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;关于打车&lt;/h2&gt;
&lt;p&gt;演唱会结束后的打车太令我印象深刻了。&lt;/p&gt;
&lt;p&gt;由于事先就意识到，这么多人一块出来，附近是肯定打不着车的。所以我们打算步行一段距离，找个人少点的路口打车。结果我们走出去差不多两三公里，一路上看见了几十辆出租车，没有一辆能直接打表就走的。要么漫天要价，要么拼车。原本30块钱的路程生生地被抬到了80块一人，还是拼车。&lt;/p&gt;
&lt;p&gt;想起以前在小城市火车站门口经常遇到这种司机，没想到在堂堂的直辖市，好歹也算个2线城市，竟然也遇到了，失望不已。&lt;/p&gt;
&lt;p&gt;我们一骂一遍感慨，怪不得现在打车软件这么火，都是这帮出租车司机自己作的。于是我掏出了手机，打开了某滴滴，周围有三四十出租车，竟然一个接单的都没有！突然我就明白了，司机还是那些司机，那么多“肥活”等着，他们是不会接单的。&lt;/p&gt;
&lt;p&gt;于是我就转向了专车，打开了某 UBer，软件启动了两分钟，仍然没看见叫车界面！在又累又困的时候遇到了这种体验，真是酸爽……要不是有30块钱的优惠券，我早就把它删了。&lt;/p&gt;
&lt;p&gt;后来还是通过某易到，叫到了一辆马6，坐在马路牙子上等了20分钟后，司机过来把我们送到了酒店。刨去优惠券花了40块，仅比出租贵了一点。&lt;/p&gt;
&lt;p&gt;从此以后我越发地感慨，一个行业被颠覆，很多时候并不是因为敌人太强大，而是他们自己作死了。&lt;/p&gt;
&lt;p&gt;最后，愿各大专车长点志气，为老百姓提供更好的服务～&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Sun, 10 May 2015 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>React Native 中那些有意思的地方（一）</title>
		<link>http://blog.zorro.im/posts/interesting-react-native.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;最近看 React Native 源码，发现了挺多有意思的地方，正好很久没写文章了，就写写这个吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;越来越感觉自己是个井底之蛙，平时开发时总是喜欢反反复复重复一小撮知识点，而且这一小撮随着时间的增长会变得越来越小，到头来发现很多之前掌握的都忘记了。这时候读读别人的代码可能是最好的陶冶情操的方法了。&lt;/p&gt;
&lt;p&gt;一直以来都觉得 Facebook 的开源项目的质量很高，每次看他们的代码都能收获不少，比如之前的 &lt;a href=&#34;http://blog.zorro.im/posts/tornado-template.html&#34;&gt;Tornado&lt;/a&gt;。他们对知识掌握的全面、运用的灵活是很多国内开发者（至少是我）所不及的。&lt;/p&gt;
&lt;p&gt;好了，言归正传，说说 React Native。&lt;/p&gt;
&lt;p&gt;RN 的原理其实挺简单的，基本上就是把 Objective-c 的对象封装一下，然后塞进 JavaScriptCore 的上下文中，这样在 JS 中就可以调用了。&lt;/p&gt;
&lt;p&gt;RN 定义了一个叫做 RCTBridgeModule 的协议，所有要暴露给 JS 的对象都需要实现此协议。在运行时 RCTBridge 会查找所有的实现了该协议的类，并且找出这些类中想要暴露的方法。在找方法这步，他们的方法挺有意思。&lt;/p&gt;
&lt;p&gt;首先，定义了一个宏&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#define RCT_EXPORT(js_name) __attribute__((used, section(&amp;quot;__DATA,RCTExport&amp;quot; \&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;))) static const char *__rct_export_entry__[] = { __func__, #js_name }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果某一个方法想暴露出去，只需要在方法体内加一句 &lt;code&gt;RCT_EXPORT();&lt;/code&gt; 即可，比如：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;multiGet:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;callback:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RCTResponseSenderBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;callback&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;RCT_EXPORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;RCTLogError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;Called getItem without a callback.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个宏的作用是在编译时，把当前方法名和 js_name 参数保存到二进制文件的 “__DATA,RCTExport” 段（具体来说，应该叫 __DATA Segment, RCTExport Section, 详见&lt;a href=&#34;http://blog.zorro.im/posts/objective-c-runtime-3.html&#34;&gt;上一篇文章&lt;/a&gt;）里。等在运行时，再通过读取这个段来找出所需要的方法名等信息，就知道哪些方法是需要暴露的了。具体的函数如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RCTSparseArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RCTExportedMethodsByModuleID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RCTSparseArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;methodsByModuleID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;dispatch_once_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onceToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;dispatch_once&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onceToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;Dl_info&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;dladdr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RCTExportedMethodsByModuleID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;#ifdef __LP64__&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint64_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RCTExportValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section_64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RCTExportSection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define RCTGetSectByNameFromHeader getsectbynamefromheader_64&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#else&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RCTExportValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RCTExportSection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#define RCTGetSectByNameFromHeader getsectbynamefromheader&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RCTExportValue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mach_header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RCTExportValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dli_fbase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RCTExportSection&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RCTGetSectByNameFromHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mach_header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;__DATA&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;RCTExport&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;bp&#34;&gt;NSArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;classes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RCTBridgeModuleClassesByModuleID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;methodsByModuleClassName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;dictionaryWithCapacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;classes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RCTExportValue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

      &lt;span class=&#34;c1&#34;&gt;// Get data entry&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mach_header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

      &lt;span class=&#34;c1&#34;&gt;// Create method&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;RCTModuleMethod&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moduleMethod&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RCTModuleMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;initWithMethodName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;)&lt;/span&gt;
                                       &lt;span class=&#34;nl&#34;&gt;JSMethodName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

      &lt;span class=&#34;c1&#34;&gt;// Cache method&lt;/span&gt;
      &lt;span class=&#34;bp&#34;&gt;NSArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methodsByModuleClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moduleMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moduleClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;methodsByModuleClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moduleMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moduleClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;arrayByAddingObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moduleMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;@[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moduleMethod&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;methodsByModuleID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RCTSparseArray&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;initWithCapacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;classes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;classes&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;enumerateObjectsUsingBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moduleClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSUInteger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moduleID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;BOOL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;methodsByModuleID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moduleID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methodsByModuleClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSStringFromClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moduleClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}];&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methodsByModuleID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个函数不用太多的解释，主要流程就是找到那个数据段，遍历解析里面的数据，然后返回结果。&lt;/p&gt;
&lt;p&gt;代码很容易看懂，但是背后的想法却很有意思。其实这种场景在平时开发中经常遇到，比如有时候子类需要向父类注册自己，父类根据触发条件来创建某一子类的实例。通常都会有几种实现方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在父类的某个地方集中注册，比如维护着一个字典，每当派生出一个子类就在字典里添加一项。&lt;/li&gt;
&lt;li&gt;子类以某些特定方式命名，到时候就可以根据触发事件来构造需要调用的子类名。&lt;/li&gt;
&lt;li&gt;维护一个单独的文件，保存着类似第一种方法里面的字典。&lt;/li&gt;
&lt;li&gt;改写子类的 &lt;code&gt;+ (void)load&lt;/code&gt; 方法，在里面注册子类&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不能说哪种方式最好，因为应用场景不确定，但是就目前来看 RN 的这种方式无疑是最灵活的。&lt;/p&gt;
&lt;p&gt;第1、3种方法需要维护一个大表，不利于解耦；第2种方法对类名或者方法名有要求，但是没做出限制，稍不留神就容易出问题。第4种方法在简单的需求下挺完美的，但是如果需求比较奇葩，比如 &lt;code&gt;load&lt;/code&gt; 中依赖的过多，则可能会出现很多意想不到的结果。&lt;/p&gt;
&lt;p&gt;再反观 RN 的实现，它的注册机制是松散的、灵活的，子类注册的时候不用告诉父类，而父类在找子类的时候从约定好的地方找就可以了。它其实整合了第1、3、4条的优点，同时又简化了很多。&lt;/p&gt;
&lt;p&gt;当然，这种方式也有缺点，比如要往二进制文件里写的数据，需要在编译时期就能确定，这就导致基本上只能用纯 C 了。比如如果想用 &lt;code&gt;_cmd&lt;/code&gt; 来替换 &lt;code&gt;__func__&lt;/code&gt;，xcode 就会提示错误。&lt;/p&gt;
&lt;p&gt;还有一点，这种方式属于比 &lt;code&gt;+ (void)load&lt;/code&gt; 还黑的黑科技，少用怡情，滥用伤神。当然，如果是传统的 C 程序员，这种方法对他们来说应该是见怪不怪了。&lt;/p&gt;
&lt;p&gt;不过，多知道一种有意思的方法总归是有益的，是吧？&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 13 Apr 2015 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>Objective-C Runtime（三）</title>
		<link>http://blog.zorro.im/posts/objective-c-runtime-3.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;从写完两篇 Runtime 相关文章至今，有了一些变化：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Apple 开源了10.10中的 Runtime 代码，并提供了打包下载的方式：&lt;a href=&#34;http://www.opensource.apple.com/tarballs/objc4/objc4-646.tar.gz&#34;&gt;OS X 10.10 Source objc4-646&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;最新的 Runtime 与之前看过的版本有些变化，几乎全都是用 C++ 实现。比如 &lt;code&gt;struct objc_class&lt;/code&gt; 已经完完全全 C++ 化了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文基于最新的 Runtime 代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;_1&#34;&gt;缘起&lt;/h2&gt;
&lt;p&gt;在文章 &lt;a href=&#34;posts/objective-c-ojbect-1.html&#34;&gt;从源码看 Objective-C 的对象模型（一）&lt;/a&gt;里曾提到过，clang 改写后的变量定义后面总是会有一些类似于 &lt;code&gt;__attribute__ ((used, section (&#34;__DATA,__objc_data&#34;)))&lt;/code&gt; 这样的代码，例如这样的：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;__declspec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dllexport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_class_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OBJC_CLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_ClassOne&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;__DATA,__objc_data&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;amp;OBJC_METACLASS_$_ClassOne,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;amp;OBJC_CLASS_$_NSObject,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (void *)&amp;amp;_objc_empty_cache,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// unused, was (void *)&amp;amp;_objc_empty_vtable,&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_OBJC_CLASS_RO_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_ClassOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当时由于水平所限，不明白它的作用，后来随着慢慢地了解了一些有关 Mach-O 文件格式，以及一些 Runtime 加载代码，对这块有了更好的理解。&lt;/p&gt;
&lt;h2 id=&#34;mach-o&#34;&gt;Mach-O&lt;/h2&gt;
&lt;p&gt;首先来了解一下概念（来自 &lt;a href=&#34;http://zh.wikipedia.org/zh/Mach-O&#34;&gt;Wikipedia&lt;/a&gt;）:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mach-O 为 Mach Object 文件格式的缩写，它是一种用于可执行文件，目标代码，动态库，内核转储的文件格式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;跟 ELF、PE 等文件格式类似，Mach-O 文件内部也分成代码段、数据段等部分，偷一张 Apple 官方的图：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Mach-O file format basic structure&#34; src=&#34;https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachORuntime/art/mach_o_segments.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以用 size 命令来查看一个 Mach-O 文件（还有个图形化的工具叫“&lt;a href=&#34;http://sourceforge.net/projects/machoview/&#34;&gt;MachOView&lt;/a&gt;”）：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;size -l -m -x &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;
Segment __PAGEZERO: 0x100000000 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;vmaddr 0x0 fileoff 0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Segment __TEXT: 0x1000 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;vmaddr 0x100000000 fileoff 0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __text: 0x249 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100000c00 offset 3072&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __stubs: 0x30 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100000e4a offset 3658&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __stub_helper: 0x60 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100000e7c offset 3708&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __cstring: 0x33 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100000edc offset 3804&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_methname: 0x3a &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100000f0f offset 3855&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_classname: 0xb &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100000f49 offset 3913&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_methtype: 0x27 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100000f54 offset 3924&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __unwind_info: 0x48 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100000f7c offset 3964&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __eh_frame: 0x30 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100000fc8 offset 4040&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    total 0x3f0
Segment __DATA: 0x1000 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;vmaddr 0x100001000 fileoff 4096&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __nl_symbol_ptr: 0x10 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100001000 offset 4096&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __got: 0x8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100001010 offset 4112&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __la_symbol_ptr: 0x40 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100001018 offset 4120&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __cfstring: 0x40 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100001058 offset 4184&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_classlist: 0x8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100001098 offset 4248&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_imageinfo: 0x8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x1000010a0 offset 4256&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_const: 0x158 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x1000010a8 offset 4264&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_selrefs: 0x18 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100001200 offset 4608&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_classrefs: 0x8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100001218 offset 4632&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_superrefs: 0x8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100001220 offset 4640&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_ivar: 0x8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100001228 offset 4648&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    Section __objc_data: 0x50 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;addr 0x100001230 offset 4656&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
    total 0x280
Segment __LINKEDIT: 0x1000 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;vmaddr 0x100002000 fileoff 8192&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
total 0x100003000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，Mach-O 文件里把代码放在了“__TEXT”这个段（Segment）里，数据放在了“__DATA”里，而这两个段里面有分了很多节（Section）。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;习惯上都称 Section 为段，为了不至于混淆，下文都用英文单词来表示。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;要查看这些 Section 里面的内容，就得用 otool（MachOView）这样的工具了，比如查看“__TEXT”里面的“__cstring”：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;otool -v -s __TEXT __cstring &lt;span class=&#34;nb&#34;&gt;test       &lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;:
Contents of &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;__TEXT,__cstring&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; section
0x0000000100000edc  Hello, World!
0x0000000100000eea  Default
0x0000000100000ef2  name
0x0000000100000ef7  T@&lt;span class=&#34;s2&#34;&gt;&amp;quot;NSString&amp;quot;&lt;/span&gt;,&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;,N,V_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个 Section 里面存放着不可变的 C 语言字符串，也就是代码里的字符串字面量。如果你的程序里以这种方式保存着密码等关键信息，那得小心了，很容易就会被识破。&lt;/p&gt;
&lt;p&gt;好了，再回过头看文章开始的例子 &lt;code&gt;__attribute__ ((used, section (&#34;__DATA,__objc_data&#34;)))&lt;/code&gt;就好理解了，这段代码的作用就是把“OBJC_CLASS_$_ClassOne __attribute__”这个全局变量放在 Mach-O 文件的 “__DATA” Segment 中的 “__objc_data” Section 里。还有很多类似的代码，其目的就是把数据归类存放在不同的 Section 中。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;作用&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;没有找到官方文档来说明为什么要分成这些 Section ，下面仅是我个人理解&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在 Objective-C 中，当用到某个类对象时，是在运行时动态查找的，并不是像 C 那样在编译时期就确定的。比如调用&lt;code&gt;[ClassOne alloc]&lt;/code&gt; ，内部实现上会先调用 &lt;code&gt;objc_getClass(&#34;ClassOne&#34;)&lt;/code&gt; 函数来查找“ClassOne”这个类，找到后再调用其“alloc”方法。在编译时，调用者并不知道“ClassOne”的具体地址，只知道它的名字，运行时会拿着这个名字去找。这也体现了语言的动态性。&lt;/p&gt;
&lt;p&gt;通过看 Runtime 代码可知，“objc_getClass”函数会从一个全局的类列表里查找该类，而这个全局的类列表则是在程序初始化时从“__DATA,__objc_classlist”这个 Section（从clang 改写后的代码里看，这里存放着类对象的指针）中读取的（objc-runtime-new.mm)。&lt;/p&gt;
&lt;p&gt;把这些类对象放在一个 Section 里，在编译时期不用把每个类的地址都保存下来，创建类列表时只要遍历一下这个 Section 就可以了。&lt;/p&gt;
&lt;p&gt;PS：这也是 class-dump 等工具的工作原理。&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachORuntime/index.html&#34;&gt;OS X ABI Mach-O File Format Reference&lt;/a&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Wed, 11 Feb 2015 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>我的2014</title>
		<link>http://blog.zorro.im/posts/my-2014.html</link>
		<description>&lt;p&gt;不知不觉都两个月没写东西了，因为最近换了工作，大部分时间都忙于工作交接以及适应新环境，也就没有了写文章的心情。&lt;/p&gt;
&lt;p&gt;先回顾一下2013年我定的目标吧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;s&gt;锻炼身体，争取每周都有运动。&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;s&gt;多出门，少在家宅。争取多出去旅旅游，争取出一次国门。&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;s&gt;发布一个iOS应用，不为赚钱，学习为主。&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;s&gt;多挣钱&lt;/s&gt;，不乱花钱。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了“不乱花钱”之外，其余的一条也没做到（；￣ェ￣）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一次篮球也没打，唯一的运动就是坚持了几个周的俯卧撑以及慢跑。体检结果显示身体各项指标都比之前下降了。&lt;/li&gt;
&lt;li&gt;一次旅游也没有，连北京市内都很少玩。&lt;/li&gt;
&lt;li&gt;第一个 iOS 应用在给 Apple 贡献了600多大洋之后由于种种原因就搁浅了。&lt;/li&gt;
&lt;li&gt;钱也没多挣，反而花了不少……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2014年对我来说发生了两个大事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;结婚，和老婆在恋爱的第六年修成了正果，责任和幸福都多了一些。&lt;/li&gt;
&lt;li&gt;换工作，在年底离开了我工作了将近4年的公司，放弃了年底双薪、年终奖以及婚假，第一次跳槽的代价貌似有点大。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;工作上，2014年主要时间都在研究 iOS 上的 VPN。年初因为 iOS7 VPN on Demand 的变化忙活了一段时间，后来又研究了很长时间的 iOS 8 Network Extension，离职前还搞定了 SSL。基本上这一年都在跟 VPN 打交道。&lt;/p&gt;
&lt;p&gt;技术上，在对 iOS 开发还不怎么熟悉的时候研究了 Objective－c 的 Runtime，写了两篇当时觉得高大上，现在却看不懂了的文章。后来研究 Network Extension 的时候写了个小 Demo（&lt;a href=&#34;http://blog.zorro.im/posts/iOS8-Network-Extension.html&#34;&gt;谈谈 IOS8 中的 NETWORK EXTENSION&lt;/a&gt;），为我的 Blog 引来了一些人气～&lt;/p&gt;
&lt;p&gt;像我这样的自底向上学 iOS 的应该也没有几个了吧。&lt;/p&gt;
&lt;p&gt;好了，就到这吧，2014相对2013单调了一些，没有那么丰富多彩，但意义很大。希望2015也这样继续下去～&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 06 Jan 2015 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>NSURLProtocol 开发笔记</title>
		<link>http://blog.zorro.im/posts/NSURLProtocol-development.html</link>
		<description>&lt;p&gt;前一段时间一直在研究 iOS 应用内的 HTTP 代理问题，在 iOS 6之前可以用 &lt;a href=&#34;https://github.com/freewizard/AppProxyCap&#34;&gt;AppProxyCap&lt;/a&gt; 这样的 Hack 方法实现，但从 iOS7 开始就不能用了。&lt;/p&gt;
&lt;p&gt;虽然 NSURLSession 提供了设置代理的方法，但是它只是针对单个 Session 的，没法实现全局的，尤其是 UIWebView 的代理。&lt;/p&gt;
&lt;p&gt;无奈之下，只能选择 NSURLProtocol 这个不完美的实现方案了，为什么说它是不完美的，下文将有介绍。&lt;/p&gt;
&lt;p&gt;raywenderlich.com 上有一篇详细的 NSURLProtocol &lt;a href=&#34;http://www.raywenderlich.com/59982/nsurlprotocol-tutorial&#34;&gt;教程&lt;/a&gt;，很好的讲解了它的用法。按照惯例我这里就不重复了，只说一下我做的工程中遇到的难点。&lt;/p&gt;
&lt;h2 id=&#34;_1&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;NSURLProtocol 可以用来处理自定义的 URL Scheme，或者是改写对已经存在的 Scheme 的处理方式。比如，我可以定义一个 URLProtocol 来处理“certificate://xxx.pem&#34; 这样的 URL 请求，用来查找目录下的证书并返回。这样当我用 NSURLConnection 发送这样的请求的时候，得到的将是证书内容。再比如，我可以定义一个 URLProtocol 来处理发到后台 Server 的 HTTP 请求，把请求中的 user-agent 改成 Server 端能识别的形式。&lt;/p&gt;
&lt;p&gt;NSURLProtocol 的作用是全局的，也就是说一旦注册之后，所有的 NSURLRequest （包括 UIWebView 发送的） 都会先经 URLProtocol 处理，这也就是为什么能用它来实现全局代理的原因（忽略掉 CFNetwork）。&lt;/p&gt;
&lt;p&gt;用 NSURLPRotocol 来实现全局 HTTP 代理时，需要用自定义的 URLProtocol 来处理所有的 HTTP/HTTPS 请求，然后再用 NSURLSession 或者 CFNetwork 这样支持代理的库把请求通过 HTTP 代理转发出去，并把结果返回给上层调用者。（这个调用者在 NSURLProtocol 里就是&lt;code&gt;client&lt;/code&gt;这个属性）&lt;/p&gt;
&lt;h2 id=&#34;nsurlsession&#34;&gt;为 NSURLSession 设置代理&lt;/h2&gt;
&lt;p&gt;为 NSURLSession 设置代理可以通过为其指定一个 NSURLSessionConfiguration 来实现，比如：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;bp&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configuration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSURLSessionConfiguration&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;defaultSessionConfiguration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connectionProxyDictionary&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;l&#34;&gt;@{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;kCFStreamPropertyHTTPProxyHost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;@&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;kCFStreamPropertyHTTPProxyPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;@8080&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;NSURLSession&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;session&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSURLSession&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;sessionWithConfiguration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configuration&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;delegate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;delegateQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSOperationQueue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里有几点需要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;connectionProxyDictionary 字典的 Key 一定得正确，据我的搜索结果，网上很多例子都不对……其实这些 Key 可以从函数&lt;code&gt;CFNetworkCopySystemProxySettings()&lt;/code&gt;返回的结果中获取。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kCFStreamPropertyHTTPProxyPort&lt;/code&gt;对应的 Value 类型一定得是 &lt;strong&gt;NSNumber&lt;/strong&gt;，这是用大量时间换回来的教训……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Authentication Challenge&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果要发送的请求比较简单，不涉及到证书、用户认证等复杂情况，或者即使涉及到这些情况，但处理方式比较简单，在 URLProtocol 内部就可以处理时，NSURLProtocol 还算是比较完美的。但是一旦需求比较复杂，比如某些时候需要上层的代码来处理用户认证，这时候 NSURLProtocol 机制就不完美了，因为它做不到对上层调用者的透明。&lt;/p&gt;
&lt;p&gt;用过 NSURLSession 的一般都明白，处理 Authentication 的 Challenge 可以在 NSURLSessionTaskDelegate 协议的&lt;code&gt;URLSession:task:didReceiveChallenge:completionHandler:&lt;/code&gt;方法中做一些处理，之后调用 &lt;code&gt;completionHandler&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt;但是如果用了 NSRULProtocol，并且想要让上层代码来处理 Challenge 时就比较困难了。自定义的 URLProtocol 和它的上层调用者之间只能通过&lt;code&gt;NSURLProtocolClient&lt;/code&gt;协议来通信。这个协议（&lt;code&gt;URLProtocol:didReceiveAuthenticationChallenge:&lt;/code&gt;）并没有实现将 &lt;code&gt;completionHandler&lt;/code&gt; 传递过去的方法。这就导致上层调用者的 Challenge 处理方法（比如&lt;code&gt;connection:willSendRequestForAuthenticationChallenge:&lt;/code&gt;）在这种情况下是无效的。&lt;/p&gt;
&lt;p&gt;因此，必须得用另外的方式解决 Challenge。&lt;/p&gt;
&lt;p&gt;Apple 有个示例程序 &lt;a href=&#34;https://developer.apple.com/library/ios/samplecode/CustomHTTPProtocol/Listings/Read_Me_About_CustomHTTPProtocol_txt.html&#34;&gt;CustomHTTPProtocol&lt;/a&gt;，它的实现方式是为类对象（注意，是&lt;strong&gt;类对象&lt;/strong&gt;）添加了代理。当 CustomHTTPProtocol 收到 Chellenge 时，会调用代理来完成进一步工作，然后再将结果返回给 CustomHTTPProtocol 实例，后者会调用&lt;code&gt;completionHandler&lt;/code&gt;来发送结果。（这里涉及上下文切换，状态保存等，而且需要注意调用过程中的多线程问题，其代码中有比较详细的描述。）&lt;/p&gt;
&lt;p&gt;NSURLProtocol 的实例化过程对开发者来说是不透明的，也就是说无法通过自定义代码控制，这也就是为啥 CustomHTTPProtocol 要为类对象实现代理。&lt;/p&gt;
&lt;p&gt;但是问题又来了，如果遇到奇葩的情况，比如有些请求我想处理 Challenge，有请求又不想处理，该咋办捏？&lt;/p&gt;
&lt;p&gt;这时候就应该祭出 NSURLProtocol 的&lt;code&gt;setProperty:forKey:inRequest:&lt;/code&gt;方法了，这个方法可以为 URLRequest 设置一个属性，当处理 Challenge 时可以通过检查这个属性来判断是否需要处理。&lt;/p&gt;
&lt;p&gt;先到这吧，如有问题再补充~&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;参考链接&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;AppProxyCap: &lt;a href=&#34;https://github.com/freewizard/AppProxyCap/issues/7&#34;&gt;https://github.com/freewizard/AppProxyCap/issues/7&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;NSURLProtocol Tutorial: &lt;a href=&#34;http://www.raywenderlich.com/59982/nsurlprotocol-tutorial&#34;&gt;http://www.raywenderlich.com/59982/nsurlprotocol-tutorial&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CustomHTTPProtocol: &lt;a href=&#34;https://developer.apple.com/library/ios/samplecode/CustomHTTPProtocol/Listings/Read_Me_About_CustomHTTPProtocol_txt.html&#34;&gt;https://developer.apple.com/library/ios/samplecode/CustomHTTPProtocol/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Sat, 01 Nov 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>谈谈 iOS8 中的 Network Extension</title>
		<link>http://blog.zorro.im/posts/iOS8-Network-Extension.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;由于工作原因，对 iOS 的 VPN 方面比较关心，于是基本上就在第一时间发现并研究了 Network Extension（以下简称 NE）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;_1&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;NE 向应用开放了 VPN（Personal VPN）的权限，开发者可以创建、修改、删除 VPN 配置，启动、停止 VPN，以及获取 VPN 状态等。目前只支持 IPSec 和 IKEv2。&lt;/p&gt;
&lt;p&gt;可能是 NE 的受众太小，只有我们这样的厂商才会关心，所以 Apple 连个官方文档头没提供，目前所能掌握的东西只有头文件里的注释。&lt;/p&gt;
&lt;p&gt;推荐读者在看这篇文章之前先阅读一篇外国友人写的&lt;a href=&#34;http://ramezanpour.net/post/2014/08/03/configure-and-manage-vpn-connections-programmatically-in-ios-8/&#34;&gt;教程&lt;/a&gt;，他把步骤描述的很详细，基本上照着一步步做就行了。我当时也是看了这篇文章，然后根据自己摸索才弄明白的。这里只点出需要注意的重点。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;准备工作&lt;/h2&gt;
&lt;p&gt;你需要 Enable App ID 中的 “VPN Configuration &amp;amp; Control”，然后在应用的 “Capabilities” 中打开 “Personal VPN”，这时候 Xcode 会完成一些初始化工作。&lt;/p&gt;
&lt;p&gt;最后，链接上 “NetworkExtension.framework”，然后在代码里&lt;code&gt;#import &amp;lt;NetworkExtension/NetworkExtension.h&amp;gt;&lt;/code&gt;就 OK 了。&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;工作流程&lt;/h2&gt;
&lt;p&gt;NE 的工作流程基本上分为以下几步：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加载系统配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这步很重要，初次操作 NE 时一定别忘了先加载，否则将会出现一些莫名其妙的问题。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// init VPN manager&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vpnManager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NEVPNManager&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sharedManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// load config from perference&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_vpnManager&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;loadFromPreferencesWithCompletionHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSError&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Do something&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里需要说明一下，NE 需要给系统安装一个配置文件（类似于 mobileconfig）才能工作，应用在退出后可以在系统设置的 VPN 选项中手动开启 VPN。这个配置文件和 NEVPNManager 是不会自动同步的，也就是说每次操作 NEVPNManager，都必须先从配置文件加载内容，如果做了修改，一定要记得保存。&lt;/p&gt;
&lt;p&gt;而且，如果手动在系统设置里面把配置文件删除，NEVPNManager 的内容还是会存在的。所以，每次启动 VPN 之前都应该加载一下配置，确保配置文件存在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加或修改 IPSec 或 IKEv2 配置信息（以 IPSec 为例）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;// config IPSec protocol&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;NEVPNProtocolIPSec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NEVPNProtocolIPSec&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;@&amp;quot;[Your username]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;serverAddress&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;@&amp;quot;[Your server address]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// get password persistent reference from keychain&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;passwordReference&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;searchKeychainCopyMatching&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;VPN_PASSWORD&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// PSK&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;authenticationMethod&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NEVPNIKEAuthenticationMethodSharedSecret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sharedSecretReference&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;searchKeychainCopyMatching&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;PSK&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/*&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;// certificate&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;p.identityData = [NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&amp;quot;client&amp;quot; ofType:@&amp;quot;p12&amp;quot;]];&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;p.identityDataPassword = @&amp;quot;[Your certificate import password]&amp;quot;;&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;localIdentifier&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;@&amp;quot;[VPN local identifier]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remoteIdentifier&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;@&amp;quot;[VPN remote identifier]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;useExtendedAuthentication&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;YES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;disconnectOnSleep&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码应该放到&lt;code&gt;loadFromPreferencesWithCompletionHandler&lt;/code&gt;的 block 中执行，这样可以确保系统配置已经加载完成。&lt;/p&gt;
&lt;p&gt;IPSec 协议里的密码以及预共享密钥都需要是一个 KeyChain 中密码的永久引用（persistent reference）。&lt;/p&gt;
&lt;p&gt;如果用证书来作为 IKE 的认证方式，而且 Server 端用的是自签发证书，则需要手工将 CA 导入到 iOS 设备。目前 Apple 还没提供添加授信证书的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;保存配置&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_vpnManager&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;saveToPreferencesWithCompletionHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSError&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;NSLog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;Save config failed [%@]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;localizedDescription&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;启动 VPN&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;bp&#34;&gt;NSError&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_vpnManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;startVPNTunnelAndReturnError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;NSLog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Start VPN failed: [%@]&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;localizedDescription&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据目前的测试结果来看，&lt;code&gt;startVPNTunnelAndReturnError&lt;/code&gt;只会在配置有误的时候才会返回 Error。其他时候，比如协议协商失败、连接超时等系统都会直接弹出对话框。&lt;/p&gt;
&lt;h2 id=&#34;_4&#34;&gt;坑&lt;/h2&gt;
&lt;p&gt;由于没有官方文档说明，不知道是调用方式不对还是 NE 本身不稳定，开发过程中遇到了很多大坑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上面提到的，系统配置文件和 NEVPNManager 内容不同步，需要监听 “NEVPNConfigurationChangeNotification” 消息。&lt;/li&gt;
&lt;li&gt;NEVPNManager 的操作基本上都是异步的，改配置时必须确保 load 完成，启动 VPN 时必须确保 save 完成。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有时候创建、保存配置一切正常，但是启动时就会提示 “未知错误”。这时候需要在系统设置里面手动启动一次 VPN，然后程序就可以正常启动了……有时候手动启动也不成，那就得把配置文件删除，然后重新安装……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2015-3-13 更新解决方法：&lt;/p&gt;
&lt;p&gt;在调用 NEVPNManager 的 &lt;code&gt;saveToPreferencesWithCompletionHandler&lt;/code&gt; 方法前，应将它的 &lt;code&gt;enabled&lt;/code&gt; 属性置成 “YES”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置 IPSec 协议时，密码相关的（证书密码除外）必须得是 KeyChain 的永久引用，即&lt;code&gt;kSecReturnPersistentRef&lt;/code&gt;需要是 YES。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;获取 VPN 状态时，NEVPNConnection 的 status 属性是不支持 KVO 的，需要监听 “NEVPNStatusDidChangeNotification” 事件。这点应该是 By-design 的，但是这个问题当时困扰我很久……&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;_5&#34;&gt;完整代码&lt;/h2&gt;
&lt;p&gt;上文提到的国际友人曾经遇到了一些问题（可以查看他文章下面的评论），这种问题基本上是因为坑#2 导致的。为了向他解释我的代码没问题，我根据他的代码写了一个简单的 Demo。没写全，但是基本可用。我这一切正常，他说他复制过去还有问题……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2014-12-19 更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;localIdentifier&lt;/code&gt;和&lt;code&gt;remoteIdentifier&lt;/code&gt;设置的不对也可能导致这个问题。我测试的 IPSec 服务端把这两个字段去掉了，所以一直没注意~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;以下代码来自 Gist，需自备梯子～&lt;/em&gt;&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/zqqf16/cbcbd2254e6cb965f1a3.js&#34;&gt;&lt;/script&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 14 Oct 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>初识 iBeacon</title>
		<link>http://blog.zorro.im/posts/ibeacon.html</link>
		<description>&lt;p&gt;以前玩 Arduino 的时候就了解过蓝牙4.0，当时颇让我震惊的是它仅用一颗纽扣电池就可以工作一年！这天生就就是为物联网以及可穿戴设备准备的。可惜当时各厂商对它的支持不是很广泛，只有 iPhone 以及少数 Android 手机支持，一个小小的开发模块也得一两百大洋。&lt;/p&gt;
&lt;p&gt;后来看 WWDC 2014的视频（2013年没注意...），了解到了 iBeacon，一个苹果基于蓝牙4.0开发的定位技术。&lt;/p&gt;
&lt;p&gt;大致原理如下：&lt;/p&gt;
&lt;p&gt;iBeacon 基站每隔一段时间就向周围广播，信息里面带有自己的 UUID 以及 Major 和 Minor。当一个 iOS 设备进入此基站的覆盖范围，通过这三个维度就可验证一个基站的身份。然后通过应用程序来进行下一步的行动。&lt;/p&gt;
&lt;p&gt;比如，商场在每一个店铺里都部署了 iBeacon 基站。消费者装上商场的应用之后，每当走近一个店铺，应用都会被唤醒，给用户发送通知，告诉用户此店铺的打折促销活动等等。&lt;/p&gt;
&lt;p&gt;在此过程中，基站不做任何工作，一切行为都是由 APP 控制的。APP 告诉 iOS 监听那些 UUID，当 iOS 收到消息后，会通知 APP 来处理。在 iOS 中，即使 APP 并不在运行，系统收到消息后也会调用 APP 来处理。&lt;/p&gt;
&lt;p&gt;并且，所有的 iBeacon 探测功能都是由系统完成的，避免了 APP 过多的消耗电能。这也是很多 Android 上的实现方案所不具备的。&lt;/p&gt;
&lt;p&gt;了解了这些知识之后，兴趣来了，于是就上淘宝买了个四月兄弟开发的 iBeacon。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://zorro-blog.qiniudn.com/IMG_0791.JPG&#34; /&gt;
体积超小，可以轻松地用双面胶黏在墙上&lt;/p&gt;
&lt;p&gt;再看看内部结构
&lt;img alt=&#34;&#34; src=&#34;http://zorro-blog.qiniudn.com/IMG_0793.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;比一颗2450纽扣电池大不了多少~&lt;/p&gt;
&lt;p&gt;接下来就是尝试应用开发了。&lt;/p&gt;
&lt;p&gt;首先，创建一个应用，需要依赖&lt;code&gt;CoreLocation.framework&lt;/code&gt;。并且在 View Controller 的实现文件里加上：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cp&#34;&gt;#import &amp;lt;CoreLocation/CoreLocation.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后加上两个 Property：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;@property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nonatomic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;strong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;CLBeaconRegion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beaconRegion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;@property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;nonatomic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;strong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;CLLocationManager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;locationManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;beaconRegion&lt;/code&gt; 用来定义一个 Beacon，iOS 的 iBeacon API 中，应用只能探测已知 UUID 的 iBeacon 基站。要想探测周围所有基站，就得用底层的 Bluetooth 库或者 iBeacon 基站厂商提供的 SDK。
&lt;code&gt;localtionManager&lt;/code&gt; 用来进行实际的探测工作。&lt;/p&gt;
&lt;p&gt;接下来定义 Beacon 初始化方法：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;initBeacon&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;NSUUID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSUUID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;initWithUUIDString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;E2C56DB5-DFFB-48D2-B060-D0F5A71096E0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beaconRegion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLBeaconRegion&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;initWithProximityUUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;identifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;E2C56DB5-DFFB-48D2-B060-D0F5A71096E0&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beaconRegion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLBeaconRegion&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;initWithProximityUUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uuid&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;major&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;minor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;identifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;im.zorro.ibeacon&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;locationManager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLLocationManager&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_locationManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delegate&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_locationManager&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;startMonitoringForRegion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_beaconRegion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_locationManager&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;startRangingBeaconsInRegion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_beaconRegion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;UIDevice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentDevice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;systemVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;floatValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;8.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;locationManager&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requestAlwaysAuthorization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码首先初始化了一个 Beacon Region，UUID、Major 以及 Minor 是我通过四月兄弟提供的 APP 获取的， 这里因厂商而异。&lt;/p&gt;
&lt;p&gt;接着初始化了 Location Manager，把 Delegate 设置成当前 View Controller。（需要实现&lt;code&gt;CLLocationManagerDelegate&lt;/code&gt;协议）&lt;/p&gt;
&lt;p&gt;这里有一点需要说明，在 iOS 8中，使用 Location Manager 需要申请授权，也就是调用&lt;code&gt;- (void)requestAlwaysAuthorization&lt;/code&gt;这个方法，这是 iOS 8 新加的。
同时，需要在 Info.plist 里加上两个 Key：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;NSLocationWhenInUseUsageDescription
NSLocationAlwaysUsageDescription
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，在程序第一次运行的时候，会有这样的提示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://zorro-blog.qiniudn.com/IMG_0795.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我之前没有注意到这一点，导致死活探测不到基站...&lt;/p&gt;
&lt;p&gt;初始化完成之后，我们需要处理事件，也就是实现&lt;code&gt;CLLocationManagerDelegate&lt;/code&gt;协议。主要代码如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;locationManager:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLLocationManager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;manager&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;didEnterRegion:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLRegion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;region&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;locationManager&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;startRangingBeaconsInRegion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beaconRegion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;-(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;locationManager:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLLocationManager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;manager&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;didExitRegion:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLRegion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;region&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;locationManager&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;stopRangingBeaconsInRegion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beaconRegion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;locationManager:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLLocationManager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;manager&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;monitoringDidFailForRegion:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLRegion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;region&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;withError:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSError&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;NSLog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;Failed monitoring region: %@&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;locationManager:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLLocationManager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;manager&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;didFailWithError:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSError&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;NSLog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;Location manager failed: %@&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;-(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;locationManager:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLLocationManager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;manager&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;didRangeBeacons:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;NSArray&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;beacons&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inRegion:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLBeaconRegion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;region&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;CLBeacon&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beacon&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;CLBeacon&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;beacon&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beacons&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lastObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;NSLog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;##Beacon is %@&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beacon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;_uuid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beacon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;proximityUUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUIDString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_major&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beacon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;major&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stringValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_minor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beacon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stringValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;_proximity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;@[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;Unknow&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;@&amp;quot;Immediate&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;@&amp;quot;Near&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;@&amp;quot;Far&amp;quot;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beacon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;proximity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;code&gt;locationManager: didRangeBeacons: inRegion:&lt;/code&gt; 方法在每次 iOS 探测之后都会被调用，频率大约是每秒一次。此方法会得到探测到的基站信息，里面包括了 UUID、Major、Minor、以及 Proximity 和 rssi 等。&lt;/p&gt;
&lt;p&gt;Proximity 代表了与基站的距离，由于2.4G 信号也不怎么靠谱，容易受干扰，所以测出来的距离不是那么准确。Apple 用了四个值代表距离，分别是 Immediate、Near、Far、Unknow，距离依次递减。根据我的测试，在1m 以内基本上就是 Immediate，1米到3米就是 Near。&lt;/p&gt;
&lt;p&gt;Log 打印如下:
&lt;code&gt;##Beacon is CLBeacon (uuid:&amp;lt;__NSConcreteUUID 0x15595ac0&amp;gt; E2C56DB5-DFFB-48D2-B060-D0F5A71096E0, major:0, minor:0, proximity:1 +/- 0.26m, rssi:-47)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上一张截图：
&lt;img alt=&#34;&#34; src=&#34;http://zorro-blog.qiniudn.com/IMG_0794.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;最后，发现了一个好玩的东西。在OS X 10.10发布的时候，Apple 着重介绍了与 iOS 8 联动功能。比如，拿着 iPhone 走近正在浏览网页的 Mac，iPhone 的锁屏界面左下角就会出现 Safari 图标，划开之后就能打开该网页。&lt;/p&gt;
&lt;p&gt;就在刚才我玩 iBeacon 的时候，似乎发现了一个秘密——这功能是通过 iBeacon 实现的！&lt;/p&gt;
&lt;p&gt;看这张截图：
&lt;img alt=&#34;&#34; src=&#34;http://zorro-blog.qiniudn.com/IMG_0796.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;左下角出现了我的测试应用的图标！而且划开之后就是我的测试应用~&lt;/p&gt;
&lt;p&gt;这也就解释了为啥拿着手机进星巴克，左下角会有星巴克应用的图标，因为他们部署了 iBeacon~&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;好吧，火星了，昨晚兴致勃勃地以为发现了事实的真相，结果一搜，连百度都能搜的出来…&lt;/p&gt;
&lt;p&gt;哈哈&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 01 Sep 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>树莓派 Model B+ 入手小记</title>
		<link>http://blog.zorro.im/posts/raspberry_model_b_plus.html</link>
		<description>&lt;p&gt;在买树莓派之前，我认为比较理想的板子是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;性能强&lt;/li&gt;
&lt;li&gt;兼容性强，可支持的系统比较多，外设驱动完善&lt;/li&gt;
&lt;li&gt;有 SATA，读写速度快&lt;/li&gt;
&lt;li&gt;功率小，省电&lt;/li&gt;
&lt;li&gt;社区支持完善&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前后考虑了多款板子，包括 Cubieboard、Bananapi、Radxa 以及刚刚开始预定的 HummingBoard。&lt;/p&gt;
&lt;p&gt;Cubieboard 社区比较完善，有 SATA，兼容性好，性能稍强。Bananapi 可以看做一个有 SATA 的树莓派。Radxa 性能强悍，没有 SATA，但社区支持太差了。HummingBoard 刚开始预订，性能强悍，有 SATA，但社区及兼容性未知。&lt;/p&gt;
&lt;p&gt;后来我明确了一下需求，发现对硬件的要求远远小于软件，这种板子玩的就是可玩性。正好赶上树莓派 Model B+ 发布了，虽然 CPU 和内存的参数还是那么可怜，但是电器性能提升不少。于是果断出手。（感谢伟大的淘宝，在官方发布一周之后就有货了）&lt;/p&gt;
&lt;p&gt;开箱照：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;开箱照&#34; src=&#34;http://zorro-blog.qiniudn.com/IMG_0735.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;到手时候发现树莓派是真的小，比图片看上去小多了。板子整体感觉就是金属部件都比较亮，应该是有电镀层。由于刚刚发布不就，可以保证是百分百英国原厂~&lt;/p&gt;
&lt;p&gt;找了一个老掉牙的 8G TF 卡，刷上 Debian，开机启动：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;工作照&#34; src=&#34;http://zorro-blog.qiniudn.com/IMG_0737.JPG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进行完一些设置之后就进桌面了，第一感觉是还算流畅，至少鼠标右键没有卡顿。但是由于 CPU 以及 TF 卡太烂，每打开一个程序都需要加载半天。CPU 占用率也是忽上忽下，打开浏览器轻轻松松百分之百~&lt;/p&gt;
&lt;p&gt;这里不得不提的一点，我插上了一个两三年前的 USB 无线网卡，竟然原生支持！兼容性的好处体现的淋漓尽致。&lt;/p&gt;
&lt;p&gt;好了，就这么多了，我要开始我的树莓派之旅了~&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 28 Jul 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>谈谈 iOS 中的 MVVM</title>
		<link>http://blog.zorro.im/posts/mvvm.html</link>
		<description>&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;很久没写博客了，一方面因为工作太忙，把精力都耗掉了。另一方面，由于长时间不写文章，不知道该如何下笔，越来越犹豫。&lt;/p&gt;
&lt;p&gt;前几天查看了一下最近的 Google 统计，发现我的小 Blog 竟然每天都有3、5个人访问。顿时就感觉到信心大增，为了对得起观众，我决定重新拾起来。&lt;/p&gt;
&lt;p&gt;今天就总结一下这一阶段 iOS 开发相关的经验。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注：鄙人搞 iOS 不到 1 年，才疏学浅，如有不对之处请指教。&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;刚开始学 iOS 开发的时候，看的所有教程、实例为了简单起见，都会把应用的逻辑控制部分放在 View Controller 里。后来接手公司 iOS 项目时，里面的代码也是这样实现的，久而久之也就养成了这样的习惯。&lt;/p&gt;
&lt;p&gt;随着开发的进行，代码逻辑越来越复杂，用户响应、网络交互、数据获取…等各种复杂东西都习惯性的扔到了 View Controller 里。再加上需求经常变化，为了追求稳定，通常会采用最小修改的原则，在原来设计好的逻辑下加一些“跳线”，跳来跳去~&lt;/p&gt;
&lt;p&gt;这样做的后果就是代码耦合度大增，逻辑混乱。一个 View Controller 的实现文件轻轻松松达到3、4百行。&lt;/p&gt;
&lt;p&gt;这样的问题大牛们早就遇到了，他们弄出了 MVVM 的概念来解决这个问题，有关 MVVM 的介绍可以参考 Objc.io 上的这篇文章 &lt;a href=&#34;http://www.objc.io/issue-13/mvvm.html&#34;&gt;Introduction to MVVM&lt;/a&gt; ，大多数认都应该看过了吧~ 这里我就不再详细介绍了，只谈谈自己的理解。&lt;/p&gt;
&lt;p&gt;所谓的 MVVM，就是在 View Controller 与 Model 之间加了一个叫 “View Model” 的层。把 iOS 中原本的 View 与 View Controller 合并到一个新的 “View”。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;View | View Controller  &amp;lt;--------&amp;gt; View Model &amp;lt;--------&amp;gt; Model
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新的 View 层负责所有的显示与用户交互之类的工作，而其它的，那些原本属于 View Controller 的工作全部交由 View Model 曾来处理，View 的工作能省则省。&lt;/p&gt;
&lt;p&gt;例如，如果要显示用户的全名，而 Model 里却分别存储着用户的名与姓，那么把姓名合在一起的工作交给 View Model 来做，View 只负责显示。&lt;/p&gt;
&lt;p&gt;再例如，如果要实现一个用户登录的功能，View 只负责把用户点击按钮的事件告诉 View Model，设置好 Delegate 或者回掉，其余的输入验证、网络交互等工作就交给 View Model 处理。&lt;/p&gt;
&lt;p&gt;可见，MVVM 的中心思想就是&lt;strong&gt;分离&lt;/strong&gt;。角色分离，视图与逻辑分离。通过分离，使各层之间耦合度降到最低。这样能够方便地对每个部分进行独立的单元测试，减少 Bug 的出现几率。同时也能满足需求的多变，如果分离合理，那么每次需求变化的时候需要进行的改动将会很小，不至于“牵一发而动全身”。&lt;/p&gt;
&lt;p&gt;前一段时间我开发了公司的一个新客户端，采用了 MVVM 的思想。下面将将结合自己的开发经验来谈谈其中的感受。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先实现功能，后谈架构&lt;/p&gt;
&lt;p&gt;对于这点我有十分痛苦的领悟…… 你永远不知道下一步会添加什么需求，有时候自认为设计出了合理的架构，随着 PM 新需求的一声令下，重构。&lt;/p&gt;
&lt;p&gt;这就有点像建篱笆围竹子，鬼知道竹子的根会绵延到哪。今天刚建好，感觉把竹子围住了，过两天就会发现篱笆外又冒出了竹笋……&lt;/p&gt;
&lt;p&gt;当然，有经验的人在一开始就会意识到可能会出现的问题，设计合理的架构，但这种能力也是在不断的重构过程中积累的。&lt;/p&gt;
&lt;p&gt;对于像我一样的初学者，个人建议先把功能实现，然后在修改需求、添加功能的时候一步一步优化架构，不要想着一步到位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分离，再分离&lt;/p&gt;
&lt;p&gt;这应该是设计模式里面经常提及的内容，架构设计之根本。&lt;/p&gt;
&lt;p&gt;MVVM 中每一层都可以细分出更小的层，当某一层代码超过了一定行数（我觉得200行就够了），就要考虑一下是否可以细分出更小的层。&lt;/p&gt;
&lt;p&gt;比如把 Table View 的 Data Source 分离，把 View Model 中的事件处理与 Model 操作分离。如果某一部分过于庞大，MVVM 也就失去了意义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有最好的，只有最合适的&lt;/p&gt;
&lt;p&gt;没有一个能称得上是绝对好的架构，不同应用有着不同的场景，合适的才是最好的。&lt;/p&gt;
&lt;p&gt;比如有时候 &lt;a href=&#34;http://www.objc.io/issue-13/viper.html&#34;&gt;VIPER&lt;/a&gt; 很合适大型应用，但是如果应用很简单，那绝对是浪费脑细胞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ReactiveCocoa&lt;/p&gt;
&lt;p&gt;所有谈到 iOS MVVM 的文章没有不提及 ReactiveCocoa 的，我也研究过，但是后来放弃了。放弃的原因是我觉得自己才入门，应该从基础的东西一点点学起。就像学 Javascript 的时候不直接用 JQuery 一样。&lt;/p&gt;
&lt;p&gt;可能以后我会在自己的私人项目中尝试一下它~&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多看别人代码&lt;/p&gt;
&lt;p&gt;很多牛人在这些问题上已经走在了前面，他们的经验值得好好学习，能少走不少弯路。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.objc.io/issue-1/&#34;&gt;Lighter View Controllers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.objc.io/issue-13/mvvm.html&#34;&gt;Introduction to MVVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jpellat.com/how-to-separate-view-controllers-from-his-view-logic/&#34;&gt;How to separate view controllers from their view logic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 07 Jul 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>一个方便无线发布iOS应用的工具——WAD</title>
		<link>http://blog.zorro.im/posts/wad.html</link>
		<description>&lt;h3 id=&#34;_1&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;鄙司目前还在用CVS来管理代码，这就导致了Xcode Bot这样的持续集成工具没有用武之地。再加上搞iOS的就我自己，上班时间基本都修Bug了，暂时还木有时间搞自动化。&lt;/p&gt;
&lt;p&gt;我的前辈写了一个Shell脚本，放在在一台专门的机器上完成打包发布的工作。但是这个工具是半自动的，每次发布都得改一些参数。再加上里面有太多的Hard Code，随着iOS7 SDK等变化，需要改的太多了，经常会发生各种错误，实在是耽误时间。真不如在自己电脑上用Xcode打包来的快。&lt;/p&gt;
&lt;p&gt;为了方便应用发布，花了点业余时间捣鼓出了这个小工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WAD — Wireless AdHoc Distributer （请原谅这个老土的名字）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;_2&#34;&gt;简介&lt;/h3&gt;
&lt;p&gt;WAD其实就是很多shell脚本的Web化，是用Python基于Tornado实现的。主要工作是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解析上传的IPA文件中的Info.plist&lt;/li&gt;
&lt;li&gt;获取Display name、Version、以及Build等信息，生成manifest.plist&lt;/li&gt;
&lt;li&gt;创建或更新index.html中的相关信息&lt;/li&gt;
&lt;li&gt;把IPA保存到指定目录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详细内容可以移步我的&lt;a href=&#34;https://github.com/zqqf16/wad&#34;&gt;Github&lt;/a&gt;，在此就不赘述了。&lt;/p&gt;
&lt;h3 id=&#34;_3&#34;&gt;体会&lt;/h3&gt;
&lt;p&gt;这个小工具看似简单，但却花了我很长时间。做之前没有明确到底想要实现什么，一开始只想要一个简单的上传、自动发布的工作。但是在做的过程中就有点刹不住了，一度想加上这些东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看历史版本&lt;/li&gt;
&lt;li&gt;同时发布多个应用&lt;/li&gt;
&lt;li&gt;支持命令行工具&lt;/li&gt;
&lt;li&gt;方便和其他工具集成&lt;/li&gt;
&lt;li&gt;NB的发布以及后台管理界面&lt;/li&gt;
&lt;li&gt;拖拽上传&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就这样代码改来改去，拖了很长时间没有进展。后来突然醒悟了，我真是想得太多了，其中大部分估计没人能用上。最后下决心砍掉了多余的部分，成了现在这样~&lt;/p&gt;
&lt;p&gt;其实仔细想想，似乎每次捣鼓小玩意的时候都会范这样的错误，Unix哲学真是白学了。希望以后能有所进步吧~&lt;/p&gt;
&lt;h3 id=&#34;_4&#34;&gt;截图&lt;/h3&gt;
&lt;p&gt;用Evernote做示范~&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;WAD&#34; src=&#34;http://zorro-blog.qiniudn.com/wad.png&#34; /&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Wed, 09 Apr 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>你真的需要一台这样的“智能”设备？</title>
		<link>http://blog.zorro.im/posts/smart-device.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;这又是一篇吐槽文……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一直很讨厌“炒概念”的现象，比如早年间的“纳米技术”，毛巾都是纳米的。再比如现在的“云计算”，凡是有服务端的都敢叫“云”。还有“智能设备”，凡是能用APP控制的都高大上了，都自称“智能”。&lt;/p&gt;
&lt;p&gt;这篇文章就是对“智能”设备的吐槽，发表一下自己的看法。可能是我目光短浅，认知水平有限。总之，本文没技术含量。&lt;/p&gt;
&lt;p&gt;先来问几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你真的需要一个手环来记录每天走了多少步、消耗了多少卡路里？&lt;/li&gt;
&lt;li&gt;你真的需要一个手表来显示短信、接打电话、记录心率、查看天气预报？&lt;/li&gt;
&lt;li&gt;你真的需要一个三天两头就得充一次电的手表？&lt;/li&gt;
&lt;li&gt;你真的需要一个背面带指纹传感器的手机，每次解锁还得在手机后蹭一下手指？&lt;/li&gt;
&lt;li&gt;你真的需要一台带着特殊眼镜才能看的3D电视？&lt;/li&gt;
&lt;li&gt;你真的需要一个杯子来提醒你该喝水了？&lt;/li&gt;
&lt;li&gt;你真的需要实时地在手机上看到家里的温度？&lt;/li&gt;
&lt;li&gt;你真的需要一个只有上下左右加确定键的电视遥控器？&lt;/li&gt;
&lt;li&gt;你真的需要一个设备来拍摄盆栽的生长周期，还要自动发微博？&lt;/li&gt;
&lt;li&gt;你真的需要一个采用“云技术”的“云路由”？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于上述问题我的回答都是不需要。我没有强迫症，不需要知道或者记录那么多没用的数据；我也不勤快，不想用那些把简单的工作复杂化的设备。&lt;/p&gt;
&lt;p&gt;在我看来（可能是我见识不够，没有意识到它们的潜力），他们中的大部分出现的意义只是向大家证明“我们能做出这样的东西”，或者是“看！我们的东西可以有这样的功能”，而不是因为这些东西是真正被需要的。&lt;/p&gt;
&lt;p&gt;不禁想起了一个我亲眼看见的故事。当年诺基亚920上市的时候，大肆宣传自己的“无线充电”技术。有一次我在商场路过一个诺基亚的门店，听见一个人和店员的对话，当场差点笑喷了。内容大致是这样的：&lt;/p&gt;
&lt;p&gt;店员：“我们这款手机有无线充电功能，充电就可以不用插数据线了。”&lt;br /&gt;
顾客：“那怎么充？”&lt;br /&gt;
店员：“把手机放在这个托盘上就行了。”&lt;br /&gt;
顾客：“那要是把手机拿起来呢？”&lt;br /&gt;
店员：“那就不能充了。”&lt;br /&gt;
顾客大笑：“那还要这个无线充电干什么，我用数据线充电还可以边充电边打电话，用这个就什么也干不了了。”&lt;br /&gt;
。。。&lt;/p&gt;
&lt;p&gt;还有一个段子，说是有一大一小两个公司引进了同一条肥皂生产线，但是这套系统有误差，会出现封好的包装盒里面没有肥皂的情况。大公司为了解决这个问题动用了大量的人力物力财力，最后做出了一个非常高科技的工具，采用了X光检测等先进技术来剔除这些空盒。而小公司则在流水线旁边放了一个大风扇，凡是空的盒子就会被风吹走……&lt;/p&gt;
&lt;p&gt;现在的很多“智能”设备都是这样的，绕了十万八千里实现了一个比那些“非智能”设备高明一点点，或者是相似，甚至是更复杂的功能，就自称“智能”了。&lt;/p&gt;
&lt;p&gt;当然，有一点不能否认，很多产品是因为科技水平所限而达不到逾期效果。但是身为一个公司敢把这种不成熟的技术当做噱头，本身就很不靠谱。&lt;/p&gt;
&lt;p&gt;我是个实用主义者，我对智能的判断标准是以实用作为基础的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能让以前专业人士才能操作的设备进入千家万户的才是智能&lt;/li&gt;
&lt;li&gt;能解决实际问题的才是智能&lt;/li&gt;
&lt;li&gt;能切实提高人们生活质量的才是智能&lt;/li&gt;
&lt;li&gt;能让老人孩子享受到的才是智能&lt;/li&gt;
&lt;li&gt;“傻瓜”都能用的才是智能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打个比方，如果一台电视画质出色、做工扎实、节能环保、能够让年迈的父母熟练地使用、快速地找到他们想看的频道，而不是加了一堆花里胡哨的、直到被淘汰都不会用第二次的功能，我就认为它是智能的。可惜，这种电视我已经找了半年多了，至今没发现。现在市面上的电视没有个“云”或者“智能”做标签的都不好意思拿出来卖。&lt;/p&gt;
&lt;p&gt;唉&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 20 Mar 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>从源码看Objective-C的对象模型（二）</title>
		<link>http://blog.zorro.im/posts/objective-c-ojbect-2.html</link>
		<description>&lt;h2 id=&#34;_1&#34;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;最近由于工作比较忙，所以这篇文章比预期的时间来的晚了。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这几天找时间仔细研究了一下上一篇文章里提到的Runtime代码，发现新旧版本之间有一些差别，数据结构有点对不上。另外，&lt;code&gt;Clang&lt;/code&gt;这个“rewrite”也不是很靠谱，也不支持Objective-c 2.0。所以这里所说的“源码”只是个大概，并不完全准确。&lt;/p&gt;
&lt;p&gt;这篇文章主要写一下实例变量的存储与访问。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;一、运行时实例对象的结构&lt;/h2&gt;
&lt;p&gt;接着上一篇文章里讲的，为类FirstClass加一个方法：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;@interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FirstClass&lt;/span&gt; : &lt;span class=&#34;bp&#34;&gt;NSObject&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;@end&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;accessClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;accessClassName&lt;/code&gt;定义如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;accessClassName&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;NSLog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;@&amp;quot;%@, %@, %@&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在函数内的任意位置加断点，在&lt;code&gt;main&lt;/code&gt;函数里面调用它。在lldb里执行&lt;code&gt;p *self&lt;/code&gt;，可以得到这样的输出：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;(lldb) p *self
(FirstClass) $0 = {
  NSObject = {
    isa = FirstClass
  }
  className = nil
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里要注意，不要被NSObject欺骗住了，结构体本身在内存中是不占空间的。上面的输出就等价于：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;$0 = {
    isa = FirstClass
    className = nil
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到在运行时self的实例变量“className”是在实例对象的结构体里的。&lt;/p&gt;
&lt;h2 id=&#34;_3&#34;&gt;二、编译时期的声明与定义&lt;/h2&gt;
&lt;p&gt;看Clang改写过的这段代码，其中有这样的描述：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FirstClass_IMPL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSObject_IMPL&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSObject_IVARS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，NSObject_IMPL是这样声明的：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NSObject_IMPL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正好和上面lldb输出的信息吻合。但是有一点需要说明一下，&lt;code&gt;FirstClass_IMPL&lt;/code&gt;貌似只是个内部结构（几乎没起什么作用，可能只是为了标明一下FirstClass的结构？）。而且在上一篇文章里可以看到，&lt;code&gt;FirstClass&lt;/code&gt;是这样被声明的：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;objc_object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在声明中，FirstClass只是个&lt;code&gt;objc_object&lt;/code&gt;类型（里面只有&lt;code&gt;isa&lt;/code&gt;）的结构体，也就是说在它的声明里并没有提及&lt;code&gt;className&lt;/code&gt;成员变量。那么最终是怎么变成Runtime里面所描述的那样的呢？&lt;/p&gt;
&lt;p&gt;为了弄懂这个问题，需要先回顾一下类对象的结构，&lt;code&gt;_class_t&lt;/code&gt;中有个&lt;code&gt;_class_ro_t&lt;/code&gt;类型的成员&lt;code&gt;ro&lt;/code&gt;(Runtime代码里还有个叫&lt;code&gt;_class_wo_t&lt;/code&gt;的结构，“r”和“w”没有搜索到准确的意思，好像是编译期间指定了的叫“r”，Runtime能够改变的叫“w”)，它是这样声明的：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_class_ro_t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instanceStart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instanceSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reserved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ivarLayout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_method_list_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;baseMethods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_objc_protocol_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;baseProtocols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_ivar_list_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ivars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weakIvarLayout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_prop_list_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过阅读代码可以知道，这其中名叫的&lt;code&gt;ivars&lt;/code&gt;（instance vars?）就存放着实例变量的信息。也就是说，实例变量的信息存放在类对象里。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_ivar_list_t&lt;/code&gt;的声明与&lt;code&gt;FirstClass&lt;/code&gt;中的&lt;code&gt;ivars&lt;/code&gt;定义如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*_ivar_list_t*/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// sizeof(struct _prop_t)&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_ivar_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ivar_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_OBJC_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_INSTANCE_VARIABLES_FirstClass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;__DATA,__objc_const&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;_ivar_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{{(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OBJC_IVAR_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;className&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;@&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;NSString&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;_ivar_t&lt;/code&gt;的声明：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_ivar_t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// pointer to ivar offset location&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里面包括了实例变量的偏移量、名称、类型等信息。（注：改写后文件里的结构体声明与runtime.h里的有一定出入，但大体结构一致。目前尚不知是Runtime版本问题，还是Clang改写的问题，或者也有可能本身就是这样实现的。在这里就暂且忽略吧- -!）&lt;/p&gt;
&lt;h2 id=&#34;_4&#34;&gt;三、运行时实例变量的初始化&lt;/h2&gt;
&lt;p&gt;接下来再对比一下Runtime的代码，看看在&lt;code&gt;alloc&lt;/code&gt;的时候，实例对象所占的内存是怎么被分配的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSOjbect&lt;/code&gt;的&lt;code&gt;alloc&lt;/code&gt;方法会调用&lt;code&gt;_internal_class_createInstanceFromZone&lt;/code&gt;函数，而后者又会调用&lt;code&gt;_class_getInstanceSize&lt;/code&gt;来获取实例变量的大小。&lt;code&gt;_class_getInstanceSize&lt;/code&gt;定义如下：(注：runtime这部分的代码有些乱，新旧版本里函数的实现有所差别，这里只摘取部分代码)&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c1&#34;&gt;//objc-runtime-new.m&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;__private_extern__&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;_class_getInstanceSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instanceSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newcls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;instanceSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;class_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isRealized&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// fixme rdar://5244378&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint32_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ro&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instanceSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WORD_MASK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WORD_MASK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;cls-&amp;gt;data-&amp;gt;ro-&amp;gt;instanceSize&lt;/code&gt;这个数值在编译时就被算好了，就是（或者可以看成）&lt;code&gt;FirstClass_IMPL&lt;/code&gt;的大小。&lt;/p&gt;
&lt;p&gt;到这里就清晰了，&lt;code&gt;FirstClass&lt;/code&gt;被声明为&lt;code&gt;objc_object&lt;/code&gt;类型只是个障眼法，它实际的结构应该是&lt;code&gt;FirstClass_IMPL&lt;/code&gt;描述的那样。&lt;/p&gt;
&lt;h2 id=&#34;_5&#34;&gt;四、实例对象的访问&lt;/h2&gt;
&lt;p&gt;内存分配搞明白了，但是对象的声明中并没有包含实例变量的信息，那么他们是怎么被访问的呢？&lt;/p&gt;
&lt;p&gt;再回过头来看上面提到的&lt;code&gt;accessClassName&lt;/code&gt;方法，在其中故意用了“点语法”、指针和直接访问的方式来访问&lt;code&gt;className&lt;/code&gt;，下面来看看这三种方法的改写结果：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_I_FirstClass_accessClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FirstClass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SEL&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SEL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objc_msgSend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sel_registerName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;className&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OBJC_IVAR_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OBJC_IVAR_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;NSLog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__NSConstantStringImpl__var_folders_fy_6ckx65gn39198bs5ydlgfk800000gn_T_FirstClass_c4b878_mi_0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（关于方法的实现将在在下一篇文章研究，在这里只需注意一下这个函数的第一个形参：&lt;code&gt;self&lt;/code&gt;，我们在实例方法里面用到的“self”其实只不过是个形参而已，当函数被调用的时候会把实例对象自身传进来。）&lt;/p&gt;
&lt;p&gt;在这个函数里面可以看到，除了“点语法”用到了消息机制（了解KVC的都知道吧……），后面两种方法在实现上是一样的，都是通过指针+偏移量来访问的。不知道对象的结构没关系，知道了偏移量就行了~&lt;/p&gt;
&lt;h2 id=&#34;_6&#34;&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;运行时实例对象的结构中包含了实例变量&lt;/li&gt;
&lt;li&gt;实例变量的信息保存在类对象里，运行时类对象会根据这些信息来完成实例化&lt;/li&gt;
&lt;li&gt;在方法中通过指针或者变量名访问实例变量，是通过self指针加上偏移量来实现的&lt;/li&gt;
&lt;/ul&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 17 Mar 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>从源码看Objective-C的对象模型（一）</title>
		<link>http://blog.zorro.im/posts/objective-c-ojbect-1.html</link>
		<description>&lt;h2 id=&#34;_1&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;刚接触Objective-C的时候，曾被一个bug折磨得很痛苦，后来才发现是我对Category理解错了，不知道它对所有该类的实例都会起作用。当时就决定要好好研究一下Objective-C的对象模型。正好最近手头的活忙完了，可以有时间做个总结。&lt;/p&gt;
&lt;p&gt;本文所参照的代码是clang rewrite之后的C++代码，以及Apple开源的Runtime代码，地址&lt;a href=&#34;http://www.opensource.apple.com/source/objc4/&#34;&gt;在这&lt;/a&gt;，
也可以参考 Github 上的这个镜像: &lt;a href=&#34;https://github.com/opensource-apple/objc4&#34;&gt;opensource-apple/objc4&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;基本概念&lt;/h2&gt;
&lt;p&gt;对于Objective-C有关对象、类、元类的基本概念，我就不细说了，和Python很像。这里有三篇文章，对我当时研究的启发很大，大家可以参考一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/wzzvictory/article/details/8592492&#34;&gt;Objective-C对象之类对象和元类对象（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/&#34;&gt;Objective-C对象模型及应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/kesalin/archive/2012/01/19/objc_class_object.html&#34;&gt;深入浅出Cocoa之类与对象&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里只做个总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有对象都是一个结构体，它的第一个成员是一个指向&lt;code&gt;objc_class&lt;/code&gt;类型的指针——&lt;code&gt;isa&lt;/code&gt;。或者说所有第一个成员是&lt;code&gt;objc_class&lt;/code&gt;指针类型的结构体都是对象。&lt;/li&gt;
&lt;li&gt;实例对象的&lt;code&gt;isa&lt;/code&gt;指向它的类对象，类对象的&lt;code&gt;isa&lt;/code&gt;指向元类，元类的&lt;code&gt;isa&lt;/code&gt;指向根元类，根元类的指向它自己。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;_3&#34;&gt;实例、类、元类初探&lt;/h2&gt;
&lt;p&gt;新建一个NSObject的子类，如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;cm&#34;&gt;/* FirstClass.h */&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;@interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FirstClass&lt;/span&gt; : &lt;span class=&#34;bp&#34;&gt;NSObject&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;NSString&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;@end&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;/* FirstClass.m */&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#import &amp;quot;FirstClass.h&amp;quot;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;@implementation&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FirstClass&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后执行&lt;code&gt;clang -rewrite-objc FirstClass.m&lt;/code&gt;，这样就会在当前目录生成一个名叫&lt;code&gt;FirstClass.cpp&lt;/code&gt;的文件，打开文件（注意，因为包含了&lt;code&gt;Foundation.h&lt;/code&gt;，所以生成的cpp文件巨大，可以忽略前1W行）可以看到，FirstClass被改写成了这样：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;objc_object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;成了&lt;code&gt;objc_object&lt;/code&gt;类型的结构体。&lt;code&gt;objc_object&lt;/code&gt;的声明如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;objc_object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isa&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是说，当我们用&lt;code&gt;FirstClass *fc;&lt;/code&gt;这样的形式去声明一个变量的时候，其实这个变量就是一个指向&lt;code&gt;objc_object&lt;/code&gt;类型的指针，也就是上面我总结的，他指向的是一个对象。&lt;/p&gt;
&lt;p&gt;接着往下看，会发现以下这样的代码：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;__declspec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dllimport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_class_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OBJC_METACLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_NSObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;__declspec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dllexport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_class_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OBJC_METACLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;__DATA,__objc_data&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;amp;OBJC_METACLASS_$_NSObject,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;amp;OBJC_METACLASS_$_NSObject,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (void *)&amp;amp;_objc_empty_cache,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// unused, was (void *)&amp;amp;_objc_empty_vtable,&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_OBJC_METACLASS_RO_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;__declspec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dllimport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_class_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OBJC_CLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_NSObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;__declspec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dllexport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_class_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OBJC_CLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;used&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;__DATA,__objc_data&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;amp;OBJC_METACLASS_$_FirstClass,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;amp;OBJC_CLASS_$_NSObject,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// (void *)&amp;amp;_objc_empty_cache,&lt;/span&gt;
    &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// unused, was (void *)&amp;amp;_objc_empty_vtable,&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_OBJC_CLASS_RO_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据字面意思就可以看明白了，分别定义了两个变量，&lt;code&gt;OBJC_METACLASS_$_FirstClass&lt;/code&gt;和&lt;code&gt;OBJC_CLASS_$_FirstClass&lt;/code&gt;，前者是元类，后者是类。他们都是&lt;code&gt;_class_t&lt;/code&gt;类型的，都是对象。因为是自动改写的，所以变量名都有些奇怪，但并不影响阅读。&lt;/p&gt;
&lt;p&gt;这里简单介绍一下&lt;code&gt;__declspec(dllimport)&lt;/code&gt;、&lt;code&gt;__declspec(dllexport)&lt;/code&gt; 以及 &lt;code&gt;__attribute__ ((used, section (&#34;__DATA,__objc_data&#34;)))&lt;/code&gt;。前两个分别声明导入和导出函数，一般用于动态链接库，后面的是一个GNU C的扩展，&lt;code&gt;used&lt;/code&gt;告诉编译器即使后面没有引用也要编译这段代码，&lt;code&gt;section (&#34;__DATA,__objc_data&#34;)&lt;/code&gt;&lt;s&gt;是说把这段代码编译到&lt;code&gt;__DATA,__objc_data&lt;/code&gt;段，而不是默认的代码段。&lt;/s&gt;至于为啥要这样，我也不太明白，有待进一步研究。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2015-1-21 更新&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&#34;__DATA,__objc_data&#34; 是要把这段数据放在 &#34;__DATA&#34; 段（Segment）的 &#34;__objc_data&#34; 节（Section）。这跟 Mach-O 文件格式的规定有关，类似的还有 &#34;__DATA,__objc_classlist&#34;、&#34;__TEXT,__objc_methodname&#34; 这样的。&lt;/li&gt;
&lt;li&gt;这段代码定义了全局变量，应该放在数据段，而不是代码段&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;_class_t&lt;/code&gt;的声明如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_class_t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_class_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_class_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;superclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vtable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;_class_ro_t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ro&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基本可以当成&lt;code&gt;runtime.h&lt;/code&gt;中的&lt;code&gt;objc_class&lt;/code&gt;类型。&lt;/p&gt;
&lt;p&gt;后面还有一段代码，定义了一个初始化函数：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OBJC_CLASS_SETUP_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OBJC_METACLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isa&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OBJC_METACLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_NSObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OBJC_METACLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;superclass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OBJC_METACLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_NSObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OBJC_METACLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_objc_empty_cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OBJC_CLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isa&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OBJC_METACLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OBJC_CLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;superclass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OBJC_CLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_NSObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OBJC_CLASS_&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_FirstClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_objc_empty_cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到元类的&lt;code&gt;isa&lt;/code&gt;、&lt;code&gt;superclass&lt;/code&gt;都指向了NSOBject，而类的&lt;code&gt;isa&lt;/code&gt;指向了元类、&lt;code&gt;superclass&lt;/code&gt;指向了NSObject。&lt;/p&gt;
&lt;p&gt;看到这就明白了，类对象以及元类对象是编译时就会创建好的。那么实例对象是怎么创建的，实例变量是怎么保存的呢？且看下一篇分解~&lt;/p&gt;
&lt;p&gt;--未完待续--&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Wed, 05 Mar 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>尝试一下七牛云存储</title>
		<link>http://blog.zorro.im/posts/qiniu.html</link>
		<description>&lt;p&gt;最近一直在研究百度网盘的API，打算做个自动同步的工具,这样就可以把自己在硬盘里保存的珍贵资料在云里做个备份。但是仔细研究了两天之后发现百度网盘现在有点太火爆了，各种&lt;em&gt;你懂的&lt;/em&gt;资源。我觉得它在打政策的擦边球，万一哪天上面要求严格了，指不定能干出啥事。所以就把目光转向了云存储，参考了几家，发现七牛貌似最靠谱。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;七牛的服务很用心。从管理后台，到各种API、工具、插件，可以看出来他们是很用心的在做。&lt;/li&gt;
&lt;li&gt;提供的服务很丰富。比如自动给照片加水印，外链限制等。&lt;/li&gt;
&lt;li&gt;技术很强大，各种CDN加速。&lt;/li&gt;
&lt;li&gt;好评很多。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;唯一不太爽的地方是只有10G免费空间，如果超出了，每月需要缴纳一定的费用。虽然比较便宜，但是不太适合我这样的用途。。。&lt;/p&gt;
&lt;p&gt;好了，虽然做不成网盘，做个图床还是很不错的~免费空间以及流量足够支撑我的博客了。&lt;/p&gt;
&lt;p&gt;下面这张图片就存储在七牛~&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;http://zorro-blog.qiniudn.com/solana.jpg&#34; /&gt;
2013年12月27日，拍摄于蓝色港湾。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 17 Feb 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>笔记本屏幕改造</title>
		<link>http://blog.zorro.im/posts/laptop-screen-diy.html</link>
		<description>&lt;p&gt;前几天收拾东西，发现了被我遗忘在旮旯里的跟了我大学4年的笔记本。当年惠普的明星——V3000系列，1.8G双核AMD CPU，1G（后来扩充到2G）DDR2内存，整体配置连现在的智能手机都赶不上。当时没钱，买的是乞丐版，用料配件能省则省，甚至连麦克风都没有。在这样的条件下我养成了良（cao）好（dan）的电脑使用习惯，那就是尽可能的单任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何时候只开一个程序&lt;/li&gt;
&lt;li&gt;浏览器不能多于5个Tab页&lt;/li&gt;
&lt;li&gt;开机自启的程序能少则少&lt;/li&gt;
&lt;li&gt;杀毒软件只在插优盘的时候开&lt;/li&gt;
&lt;li&gt;只玩红警2和CS1.6&lt;/li&gt;
&lt;li&gt;夏天或者玩游戏的时候一定要吹风扇&lt;/li&gt;
&lt;li&gt;。。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为有了这些好习惯，当第一次接触配备I3处理器的台式机的时候，简直就是飞一般的感觉；当第一次听有人说8G内存都不够的时候，心中犹如万只草泥马奔腾。&lt;/p&gt;
&lt;p&gt;也正是由于这些习惯，让它在有着先天散热缺陷的条件下挺过了4年。后来在一次不经意间主板驾鹤西去了，它的替代者——一块购自淘宝的主板也在一年后挂了。再后来主板就买不到了。。。&lt;/p&gt;
&lt;p&gt;由于新住处的桌子太小，基本放不开23存显示器，我的台式机器从搬家之后就没怎么开过。于是就打算把笔记本的屏幕改造一下，让它做个台式机显示器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下是屏幕的改造过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先去淘宝买了一块驱动板，就是这样：
&lt;img alt=&#34;image&#34; src=&#34;http://ww2.sinaimg.cn/large/62707ca0gw1edkju61h29j20qo0hl79e.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后把笔记本屏幕拆下来
&lt;img alt=&#34;image&#34; src=&#34;http://ww1.sinaimg.cn/large/62707ca0gw1edkjmaquq8j21kw16oaqe.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;连上驱动板，屏幕上高压条的接线太短，而驱动板套件里面的高压板太大，放不进屏幕的转轴里面，就只能在后面打了个孔穿出来。后来嫌乱七八糟的接线太难看，就把手机盒改造了一下，粘在了屏幕后面，还能当个支架用~&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image&#34; src=&#34;http://ww2.sinaimg.cn/large/62707ca0gw1edkjmzo8nij21kw16o7l7.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image&#34; src=&#34;http://ww4.sinaimg.cn/large/62707ca0gw1edkjnnf8uqj21kw16o1d3.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;最后上一张最终图片：新老两代~
&lt;img alt=&#34;效果图&#34; src=&#34;http://ww2.sinaimg.cn/large/62707ca0gw1edkjk0sbe5j21kw16oavg.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;和rMBP一对比，老屏幕简直不忍直视。。。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Sun, 16 Feb 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>我的2013</title>
		<link>http://blog.zorro.im/posts/my-2013.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;这篇文章本来是打算在2014年春节前完成的，但是由于要准备回老家就耽误了。前几天匆匆写了一篇算不上总结的总结，写完之后总觉得不太满意，所以就决定重写一篇了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的2013年还挺充实的，丰富多彩~&lt;/p&gt;
&lt;h3 id=&#34;_1&#34;&gt;生活篇&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;租房&lt;/strong&gt; —— 年初和女友不堪酒忍受仙桥附近又脏又破又贵的房子，一气之下远走常营，开始了每天坐地铁来回俩小时上班的生活。每天挤6号线转挤10号，见了各种各样的人，闻了各种各样的味儿，痛并快乐着。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做饭&lt;/strong&gt; —— 周末有时间就会尝试自己做饭。学会了炖鱼、炖肉，还学会了和面、包饺子。现在如果自己生活是肯定饿不死了~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;游玩&lt;/strong&gt; —— 今年我决定改变周末宅的状态，连续几个周，每周末都去一个北京的著名景点逛逛。小时候课本里面见过的基本都去过了，也算是实现了小时候的梦想~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;爱好&lt;/strong&gt; —— 今年生日的时候买了个单反，宾得K-30。看了很多摄影有关的东西，学着拍了挺多照片，算是入门了~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apple&lt;/strong&gt; —— 年初换了三星9300买了iPhone5，年末入手rMBP。虽然下了血本，但是并不后悔，算是物有所值吧~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;家&lt;/strong&gt; —— 十一的时候请了4天年假，于是就有了上班以来最长的假期。回家帮父母干了自高中毕业以来最多的农活。和他们在一起的感觉熟悉又陌生，看着他们一天天老去，很是伤感。&lt;/p&gt;
&lt;h3 id=&#34;_2&#34;&gt;工作骗&lt;/h3&gt;
&lt;p&gt;今年工作的主题就是iOS了，年初搞IPSec的时候有机会接触了iOS部门，在和他们一起工作的过程中了解了iOS开发相关的东西，然后下半年就转岗搞这个了。开始的时候一头雾水，现在随着修的Bug越来越多，慢慢的入门了。希望2014年在这方面能有长足的进步。&lt;/p&gt;
&lt;h3 id=&#34;_3&#34;&gt;学习骗&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Web&lt;/strong&gt; —— 年初的时候一心一意地想写个Blog程序——znote，从零开始学了很多Web开发相关的东西。学了Tornado、数据库、CSS、JS以及美工。&lt;/p&gt;
&lt;p&gt;开始的时候总想着追求完美，开发缺乏经验，经常是顾此失彼。很多时候为了构思一个界面，让整个项目停滞很久。前后断断续续，最终成了一个能凑合用的半成品。买了VPS上线运行了1个多月，写了三两篇博客就放弃了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt; —— 今年只要有时间就会看一些Python相关的东西，用它写了很多小工具，包括现在生成博客用的Peanut。虽然没指望将来找一份Python的工作，仅仅把它当做爱好。掌握这样的工具，工作中能减少很多体力劳动~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; —— 今年开始正式地使用git，一开始只是把Github当做一个代码备份的工具，后来慢慢地在上面寻找优秀的代码，开始用Github Page写博客，开始认认真真地写自己的代码。前几天在Git@oschina托管的一份Peanut被推荐并且有了7、8个fork，顿感受宠若惊，倍感荣幸与压力~&lt;/p&gt;
&lt;h3 id=&#34;2014&#34;&gt;展望2014&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;锻炼身体，争取每周都有运动。&lt;/li&gt;
&lt;li&gt;多出门，少在家宅。争取多出去旅旅游，争取出一次国门。&lt;/li&gt;
&lt;li&gt;发布一个iOS应用，不为赚钱，学习为主。&lt;/li&gt;
&lt;li&gt;多挣钱，不乱花钱。&lt;/li&gt;
&lt;/ol&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Sun, 12 Jan 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>Python中关于__new__和__init__的坑</title>
		<link>http://blog.zorro.im/posts/python-new-init.html</link>
		<description>&lt;p&gt;前几天在重构Peanut的时候，想实现一个扩展的单实例模式。即每个同名的Tag在内存中只有一份，这样方便Tag与Post的关联。然后想起了之前在网上看的Python单实例方法，重写了&lt;code&gt;__new__&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_pool&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;posts&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我高兴地以为问题解决了的时候，发现程序运行的结果不太对。在有多个Post对应着同一个Tag的时候，&lt;code&gt;tag.posts&lt;/code&gt;里面的内容只有最后一个Post。&lt;/p&gt;
&lt;p&gt;后来一顿Google后发现了问题所在，在调用&lt;code&gt;Tag(&#39;title&#39;)&lt;/code&gt;的时候，总是会先执行&lt;code&gt;__new__&lt;/code&gt;，然后再执行&lt;code&gt;__init__&lt;/code&gt;。所以每次posts都会被初始化为空。&lt;/p&gt;
&lt;p&gt;想要改变&lt;code&gt;Tag()&lt;/code&gt;的行为，单纯地重写本类的&lt;code&gt;__new__&lt;/code&gt;已经满足不了需求了，需要引入元类，重写元类的&lt;code&gt;__call__&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;sd&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Meta class to implement a simple &amp;quot;object pool&amp;quot;.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bases&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Add an attribute &amp;quot;_pool&amp;quot; and a classmethod &amp;quot;all&amp;quot;.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_pool&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;_pool&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;classmethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;classmethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bases&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c&#34;&gt;#Get from pool&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

        &lt;span class=&#34;c&#34;&gt;#Generate a new one&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_pool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;setattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在定义Tag的时候需要指定元类：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTMLPage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;__metaclass__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Pool&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在执行&lt;code&gt;Tag(&#39;title&#39;)&lt;/code&gt;的时候，先执行了元类中的&lt;code&gt;__call__&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;至此，问题圆满解决~&lt;/p&gt;
&lt;p&gt;另外，为了研究元类中的&lt;code&gt;__new__&lt;/code&gt;、&lt;code&gt;__init__&lt;/code&gt;、&lt;code&gt;__call__&lt;/code&gt;，我写了一个小脚本：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2015-7-23 更新：
Python 3 中，object 的 &lt;code&gt;__new__&lt;/code&gt;、&lt;code&gt;__init__&lt;/code&gt; 方法接受的参数有变，在此做了兼容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;__future__&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print_function&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;six&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with_metaclass&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Meta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;sd&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Meta class&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bases&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Meta: __new__: {} | {} | {} | {}&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bases&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Meta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bases&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bases&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Meta: __init__: {} | {} | {} | {}&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bases&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Meta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bases&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attrs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Meta: __call__: {}&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Meta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_metaclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Meta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Tmp: __new__: {} | {} | {}&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Tmp: __init__: {} | {} | {}&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Tmp: __call__: {} | {} | {}&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__call__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;Tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的脚本执行后，打印结果如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;python3 meta.py
Meta: __new__: &amp;lt;class &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__.Meta&amp;#39;&lt;/span&gt;&amp;gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Tmp &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&amp;lt;class &lt;span class=&#34;s1&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&amp;gt;,&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;: &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;: &amp;lt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; Tmp.__init__ at 0x10e6b1598&amp;gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;__qualname__&amp;#39;&lt;/span&gt;: &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tmp&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;: &amp;lt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; Tmp.__new__ at 0x10e6b1488&amp;gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;__call__&amp;#39;&lt;/span&gt;: &amp;lt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; Tmp.__call__ at 0x10e6b1620&amp;gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
Meta: __init__: &amp;lt;class &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__.Tmp&amp;#39;&lt;/span&gt;&amp;gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Tmp &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&amp;lt;class &lt;span class=&#34;s1&#34;&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&amp;gt;,&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;: &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;: &amp;lt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; Tmp.__init__ at 0x10e6b1598&amp;gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;__qualname__&amp;#39;&lt;/span&gt;: &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tmp&amp;#39;&lt;/span&gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;: &amp;lt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; Tmp.__new__ at 0x10e6b1488&amp;gt;, &lt;span class=&#34;s1&#34;&gt;&amp;#39;__call__&amp;#39;&lt;/span&gt;: &amp;lt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; Tmp.__call__ at 0x10e6b1620&amp;gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
Meta: __call__: &amp;lt;class &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__.Tmp&amp;#39;&lt;/span&gt;&amp;gt;
Tmp: __new__: &amp;lt;class &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__.Tmp&amp;#39;&lt;/span&gt;&amp;gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;,&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;
Tmp: __init__: &amp;lt;__main__.Tmp object at 0x10e642438&amp;gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;,&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;PS: 由于引入了 six 的缘故，在 Python 2 下执行的结果会有些不同，可以改为 &lt;code&gt;__metaclass__ = Meta&lt;/code&gt; 的方式来查看正确结果&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;通过这个，可以很清楚的了解元类的流程。&lt;/p&gt;
&lt;p&gt;完&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 06 Jan 2014 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>换域名了</title>
		<link>http://blog.zorro.im/posts/change-domain.html</link>
		<description>&lt;p&gt;原来的zqqf16.info域名快到期了，再加上对info的域名一直很不爽，所以就打算换掉。经过一番折腾，从godaddy换到了name.com，并为此搞定了Paypal。正是就有了现在的&#34;zorro.im&#34;，我也开始了$消费的时代。。。&lt;/p&gt;
&lt;p&gt;不得不说，换域名是个体力活，需要各种改。把原来的域名设置了转发（现在都没生效。。。）然后，悲摧的多说把之前的评论弄没了。虽然本来没几条，也就3、5个。。。但是这好歹也是好几个月积攒下来的人气啊。。。&lt;/p&gt;
&lt;p&gt;另外，我在oschina上托管的Peanut的代码竟然被推荐了，顿时受宠若惊。只怪上面的Python项目太少了，像我这样的水平也能换点start和fork。。。&lt;/p&gt;
&lt;p&gt;最后，如果各位看官收藏或者订阅了本博，（如果有的话。。。估计够呛。。。就当个美好的愿望吧。。。）麻烦请该一下新地址～&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Fri, 27 Dec 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>关于iOS越狱</title>
		<link>http://blog.zorro.im/posts/tucao-jailbreak.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;本文隶属吐槽系列之一，没啥营养，各位看官（如果有的话）请自便～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;昨天晚上在网上闲逛的时候猛得发现iOS7完美越狱出来了，点进去一看竟然是个中文网站。顿时感慨咱大天朝啥时候有这番能人，在老外之前把这个搞定了。因为俺对越狱没啥兴趣，所以就没仔细研究。&lt;/p&gt;
&lt;p&gt;今天发现这事愈演愈烈，幕后黑手渐渐显现，顿时心生感慨，F**k！&lt;/p&gt;
&lt;p&gt;我个人之前对越狱持否定态度，研究越狱的大神本身的出发点是好的，他们可能会有自己的理念和底线。但是，越狱了就意味着对所有应用打开了大门。那些首规矩的厂商还好，万一被那些没节操的应用利用了就只能是哑巴吃黄连了。&lt;/p&gt;
&lt;p&gt;想当年还是6.1时代，俺满怀欣喜的把省吃俭用才买下来的iPad2给越了。那时候啥也不懂，逛论坛找各种NB插件。就像把自己的系统折腾的与众不同，或者所谓的顺手。&lt;/p&gt;
&lt;p&gt;但最后的结果却恰恰相反，插件多了，系统卡得要死，三天两头崩毁一次。活生生的把iOS给玩成了Android。&lt;/p&gt;
&lt;p&gt;俺曾经用了一个月的Android，韩版的三星i9300。手机到手之后就各种研究刷Rom，稍微感觉不爽就重刷，只要大神一出新版就立马刷上。手机一直处于一个不稳定状态。后来俺觉得这不是俺想要的使用手机的方式，就倒手换了iPhone。&lt;/p&gt;
&lt;p&gt;后来俺就想明白了，手机或平板是用来享受的，不是用来折腾的。官方的系统，肯定是经过了详细的测试，以最稳定的形式呈现给用户。我们在使用的时候应该专注于它给我们带来的方便，毕竟手机和电脑不一样，我们这样的普通用户干嘛给自己找麻烦。&lt;/p&gt;
&lt;p&gt;另一方面，越狱了就等于对所有人开大门了。也就是什么流氓应用都可以查看用户隐私了。比如可以把支付宝账号密码啥的偷偷搞到手，比如可以偷着上传你的照片，比如可以在后台偷跑你的流量，比如把你的手机当成肉鸡。。。总之只要有利可图就一切皆有可能。&lt;/p&gt;
&lt;p&gt;所以，还是那句话，手机不是用来折腾的，使用来享受的。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 23 Dec 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>写了一个简单的Web剪切板-Clipboard</title>
		<link>http://blog.zorro.im/posts/web-clipboard.html</link>
		<description>&lt;p&gt;平时由于工作的关系需要用到多台电脑，Mac和Windows来回切换。有时候想把一些信息复制到另一台电脑上，只能打开文件共享，然后把内容保存到文件里，再到另一台电脑里打开。时间一长，就积累了很多垃圾文件。于是乎就花了点时间，写了个简单的基于Web的内容共享程序，我叫它Clipboard。&lt;/p&gt;
&lt;p&gt;源码在此：&lt;a href=&#34;https://github.com/zqqf16/clipboard&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我是把它当作一个练手项目来写的，尝试了很多新东西，也学到了很多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一开始我把所有内容以JSON格式存储到文件里，为此写了一个简单的JSON-DB以及相应的ORM。（&lt;a href=&#34;https://github.com/zqqf16/clipboard/blob/0eceea61e3d2e49fdafc73b88b5b42722a8ab192/clipboard/model.py&#34;&gt;View History&lt;/a&gt;）在这个过程中充分的学习了Meta class以及Descriptor的相关知识。&lt;/p&gt;
&lt;p&gt;后来考虑到以后可能会有更多功能，自己维护一套类似数据库有点不现实，所以就转向了Sqlite，并采用了一个比较小巧的ORM - Peewee。也就有了当前的版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unit Test&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从写JSON-DB的时候就仔仔细细的写了Unit Test，虽然最后还是发现了一些纰漏，但是还算成功。后来又加了Web层的Unit Test，学会了用Tornado的HTTPClient来测试，也算收获不小。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;application&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;App&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;http_server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;httpserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTTPServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;application&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;http_server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8888&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;handle_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ioloop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOLoop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;http_client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;httpclient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsyncHTTPClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;http_client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;http://0.0.0.0:8888&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;handle_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tornado&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ioloop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IOLoop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;XMLHTTPRequest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尝试了一把RESTful，但由于原生的HTML Form不支持DELETE方法，我又不想引入JQuery这样的牛刀。经过一番搜索，找着了XMLHTTPRequest。就照着网上的例子画了个瓢~&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;delete_entry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FormData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;DELETE&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;/c/&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;responseType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
                                &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                                &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Connection error!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

        &lt;span class=&#34;nx&#34;&gt;xhr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Others&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了使开发的过程更加规范，我强制自己用了Github的issue功能，成功的解决了仅有的两个issue~&lt;/p&gt;
&lt;p&gt;用了Yahoo的CSS框架 - Pure。Bootstrap太大了，而且默认的界面看疲劳了。所以就尝试了这个小清新的Pure。抄了不少官网的代码。最后的界面还凑合，不难看。&lt;/p&gt;
&lt;p&gt;最后，上一张效果图~&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Clipboard&#34; src=&#34;/static/img/clipboard.png&#34; /&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 19 Dec 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>Tornado源码之Template</title>
		<link>http://blog.zorro.im/posts/tornado-template.html</link>
		<description>&lt;p&gt;Tornado底层的源码分析已经有很多人写过了，他们的水平都在我之上，写的也比我好，所以我就不再重复了。打算剑走偏锋，研究一下tornado周边的东西。这篇就研究一下之前一直很感兴趣的Template。&lt;/p&gt;
&lt;p&gt;Template的工作流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取模板文件，解析成相应的数据结构&lt;/li&gt;
&lt;li&gt;把解析到的结构拼接成Python代码&lt;/li&gt;
&lt;li&gt;将生成的代码编译成字节码&lt;/li&gt;
&lt;li&gt;执行字节码，返回结果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（这其中还会有一些编码转换、特殊字符转义等工作，本文中不做研究。）&lt;/p&gt;
&lt;h2 id=&#34;_1&#34;&gt;模板解析与代码生成&lt;/h2&gt;
&lt;p&gt;步骤1-3主要由Template类的__init__方法完成，关键代码如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TemplateReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;native_str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;template_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_generate_python&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress_whitespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先创建了一个reader，用来读取模板字符串。&lt;code&gt;_TemplateReader&lt;/code&gt;这个类还重载了一些诸如&lt;code&gt;__getitem__&lt;/code&gt;这样的方法，可以很方便的来操作字符串。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_parse&lt;/code&gt;这个函数负责了模板的语法的解析和数据结构的生成。在这个过程中，会将&lt;code&gt;{{title}}&lt;/code&gt;这样的字符串解析成&lt;code&gt;_Expression&lt;/code&gt;，&lt;code&gt;{% for line in lines %}&lt;/code&gt;解析成&lt;code&gt;_IntermediateControlBlock&lt;/code&gt;等。这些类都继承自&lt;code&gt;_Node&lt;/code&gt;。解析的最后结果是返回一个由这些类为节点组成的树状结构，树的根节点是&lt;code&gt;_File&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当字符串解析完成之后，调用Template的&lt;code&gt;_generate_python&lt;/code&gt;方法，来生成Python代码。代码生成时会调用每个树节点的&lt;code&gt;generate&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_File&lt;/code&gt;的&lt;code&gt;generate&lt;/code&gt;代码如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;def _tt_execute():&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;indent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;_tt_buffer = []&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;_tt_append = _tt_buffer.append&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;writer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write_line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;return _tt_utf8(&amp;#39;&amp;#39;).join(_tt_buffer)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法会会生成类似这样的语句：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_tt_execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_tt_buffer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_tt_append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tt_buffer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;

    &lt;span class=&#34;c&#34;&gt;#body&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tt_utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_tt_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于&lt;code&gt;_File&lt;/code&gt;是这棵树的根，所以最终生成的代码都会被嵌套在一个叫&lt;code&gt;_tt_execute&lt;/code&gt;的函数内，而这个函数内所有语句生成的字符串会被塞到_tt_buffer中被返回。&lt;/p&gt;
&lt;p&gt;注意一下这行代码&lt;code&gt;with writer.indent():&lt;/code&gt;，先看一下源码：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;indent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Indenter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__enter__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_indent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__exit__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_indent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_indent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Indenter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重载了&lt;code&gt;__enter__&lt;/code&gt;和&lt;code&gt;__exit__&lt;/code&gt;方法，这样每次在&lt;code&gt;with writer.indent()&lt;/code&gt;代码段里面，缩进就自动加一，退出来之后缩进就自动减一。&lt;/p&gt;
&lt;p&gt;在这里举个简单的例子来看一下生成的代码：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.template&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Template&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;% f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;or l in lines %}&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    &amp;lt;li&amp;gt;{{l}}&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;% e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;nd %}&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行完这段代码打印结果如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_tt_execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_tt_buffer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_tt_append&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tt_buffer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_tt_append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:2&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:2&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_tt_append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;    &amp;lt;li&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:3&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_tt_tmp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:3&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_tt_tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tt_string_types&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tt_tmp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tt_utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_tt_tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:3&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tt_tmp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tt_utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_tt_tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:3&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_tt_tmp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tt_utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xhtml_escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_tt_tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:3&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_tt_append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_tt_tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:3&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_tt_append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:4&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:2&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_tt_append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:6&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_tt_utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_tt_buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# &amp;lt;string&amp;gt;:0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成的每条语句后都会有该条语句在模板文件中的行号。&lt;/p&gt;
&lt;p&gt;代码生成之后，就调用python的&lt;code&gt;compile&lt;/code&gt;函数，将代码编译成了字节码。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;模板渲染&lt;/h2&gt;
&lt;p&gt;当执行Template的&lt;code&gt;generate&lt;/code&gt;方法时，首先会把一些常用函数比如&lt;code&gt;datetime&lt;/code&gt;等以及用户输入的参数放到namespace中，作为执行字节码时的全局命名空间。&lt;/p&gt;
&lt;p&gt;这是执行字节码的代码：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;exec_in&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compiled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;_tt_execute&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;linecache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clearcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，&lt;code&gt;exec_in&lt;/code&gt;的定义如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version_info&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;def raise_exc_info(exc_info):&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    raise exc_info[1].with_traceback(exc_info[2])&lt;/span&gt;

&lt;span class=&#34;s&#34;&gt;def exec_in(code, glob, loc=None):&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    if isinstance(code, str):&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;        code = compile(code, &amp;#39;&amp;lt;string&amp;gt;&amp;#39;, &amp;#39;exec&amp;#39;, dont_inherit=True)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    exec(code, glob, loc)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;def raise_exc_info(exc_info):&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    raise exc_info[0], exc_info[1], exc_info[2]&lt;/span&gt;

&lt;span class=&#34;s&#34;&gt;def exec_in(code, glob, loc=None):&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    if isinstance(code, basestring):&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;        # exec(string) inherits the caller&amp;#39;s future imports; compile&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;        # the string first to prevent that.&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;        code = compile(code, &amp;#39;&amp;lt;string&amp;gt;&amp;#39;, &amp;#39;exec&amp;#39;, dont_inherit=True)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    exec code in glob, loc&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里用到了一个技巧，用&lt;code&gt;exec&lt;/code&gt;来根据python版本动态的添加函数。&lt;/p&gt;
&lt;p&gt;从上面的例子中可以看出，执行完这段字节码，namespace中会创建一个名为&lt;code&gt;_tt_execute&lt;/code&gt;函数，然后再执行这个函数，得到的结果就是模板渲染完的结果。&lt;/p&gt;
&lt;p&gt;至此，Template的工作流程就介绍完了~&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 21 Nov 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>Colorit——一个给终端输出上色的工具</title>
		<link>http://blog.zorro.im/posts/colorit.html</link>
		<description>&lt;p&gt;平时自己写脚本的时候总喜欢给输出信息加点颜色，比如之前写的查找CVS diff中改动文件的&lt;a href=&#34;https://gist.github.com/zqqf16/7094628&#34;&gt;脚本&lt;/a&gt;。方法很简单，就是输出一些ASCII控制码，比如&lt;code&gt;\033[;31m&lt;/code&gt;代表红色之类的。&lt;/p&gt;
&lt;p&gt;用的多了，感觉老是拼字符串也不是个办法，索性规整了一下，写了人生中第一个正经的python模块。。。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#-*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;__future__&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print_function&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;__all__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;paint&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;colors&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;attributes&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;__version__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;_FORMAT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[{}m&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[{};{}m{}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[0m&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;magenta&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;cyan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;attributes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;blod&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;underscore&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;blink&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;reverse&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;concealed&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;_FOREGROUND&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;_BACKGROUND&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;_attributes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attributes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;paint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foreground&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attribute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;fg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_FOREGROUND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foreground&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;bg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_BACKGROUND&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;att&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_attributes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attribute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_FORMAT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;att&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;paint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;{:^8}&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;print_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;print_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用的时候也很方便：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;paint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foreground&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attribute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比如输出字体为绿色，背景为黄色的文字：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;paint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以访问我的&lt;a href=&#34;https://github.com/zqqf16/colorit&#34;&gt;Github&lt;/a&gt;查看完整代码。&lt;/p&gt;
&lt;p&gt;最后，附一张完整的颜色图（&lt;code&gt;python colorit.py&lt;/code&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;colors&#34; src=&#34;https://raw.github.com/zqqf16/colorit/master/examples/all.png&#34; /&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 12 Nov 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>SSL证书研究之CSR</title>
		<link>http://blog.zorro.im/posts/ssl-csr.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;以前用SSL证书的时候对一些概念了解比较模糊，对x.509、pem、csr等一大堆概念没有一个整体的认识。于是下决心仔细研究一番，接下来会写一系列文章，这是第一篇，先介绍一下CSR。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;_1&#34;&gt;基本概念&lt;/h2&gt;
&lt;p&gt;CSR全称Certificate Signing Request（证书请求文件），是证书申请者向证书颁发机构（CA）申请证书时需要提供的文件。里面包含了一些申请者的基本信息，比如Common Name、 Organization等。同时也包含了申请者的公钥。&lt;/p&gt;
&lt;p&gt;生成CSR的时候一般也会同时生成一个私钥，和csr是配对生效的，如果私钥丢失，那么这个CSR将不会再起作用。&lt;/p&gt;
&lt;p&gt;CA收到申请者的CSR之后会进行一系列操作，比如确认申请者信息之类的。然后用自己的私钥给CSR签名，生成证书文件，颁发给申请者。&lt;/p&gt;
&lt;p&gt;CSR需要满足pkcs#10语法标准，详情可以参考&lt;a href=&#34;http://tools.ietf.org/html/rfc2986&#34;&gt;RFC2986&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;_2&#34;&gt;生成方法&lt;/h2&gt;
&lt;p&gt;首先需要安装openssl，然后：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;openssl req -new -keyout z.key -out z.csr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这条命令将会生成一个私钥文件z.key，然后生成对应的CSR，需要填写基本信息，比如：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:BeiJing
Locality Name (eg, city) []:BeiJing
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Zzzz
Organizational Unit Name (eg, section) []:dev
Common Name (e.g. server FQDN or YOUR name) []:zqqf16.info
Email Address []:your@email.com

Please enter the following &amp;#39;extra&amp;#39; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打开z.key文件，可以看到私钥，类似这样的：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;-----BEGIN ENCRYPTED PRIVATE KEY-----
MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIj6V2J4snMfMCAggA
MBQGCCqGSIb3DQMHBAgCsEw8GV7nDASCBMhm0VvIGGreMAjQne7gx56nv85HLl/T
e0TWboN4PGlq4lmaWJSE9iYolz.....
.....
-----END ENCRYPTED PRIVATE KEY-----
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是用PEM(Privacy Enhanced Mail)格式存储的，内容用Base64编码过。同样的，z.csr文件也是类似的格式：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;-----BEGIN CERTIFICATE REQUEST-----
MIIC4jCCAcoCAQAwgYUxCzAJBgNVBAYTAkNOMRAwDgYDVQQIDAdCZWlKaW5nMRAw
DgYDVQQHDAdCZWlKaW5nMQ0wCwYDVQQKDARaenp6MQwwCgYDVQQLDANkZXYxFDAS
BgNVBAMMC3pxcWYxNi5p.....
....
-----END CERTIFICATE REQUEST-----
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果想看CSR的内容可以用&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;openssl req -in z.csr -noout -text
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将会输出详细信息&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;Certificate Request:
    Data:
        Version: 0 (0x0)
        Subject: C=CN, ST=BeiJing, L=BeiJing, O=Zzzz, OU=dev, CN=zqqf16.info/emailAddress=your@email.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:b6:f8:ce:49:05:00:ff:53:5f:50:1a:00:c9:a1:
                    b8:4a:1d:19:c6:50:c3:22:11:30:cb:6f:ea:5e:5e:
                    3b:d9:e1:fa:5f:4b:5a:8a:51:88:1f:82:4f:b9:23:
                    52:de:80:2e:f4:b7:6a:b8:27:62:e7:3c:c1:7f:ef:
                    bb:5e:18:87:17:81:a3:11:f5:8b:25:c2:a3:fb:b2:
                    d9:4b:07:64:5d:93:1e:13:c1:b7:ce:ac:86:42:c2:
                    be:82:8c:76:d9:57:7e:c3:1d:0d:7c:3c:92:ce:0c:
                    ed:18:1f:45:83:28:d9:98:00:c1:b2:85:a7:52:4b:
                    f9:6e:45:f2:76:5f:c1:7d:1e:0d:65:3e:2b:ef:8e:
                    5f:89:83:7c:33:35:37:5b:40:11:48:4a:ec:b7:11:
                    4a:67:75:04:7e:d8:e9:68:ee:81:eb:38:70:a2:0d:
                    4e:d7:42:1c:fe:7e:fc:da:2e:15:69:8e:8f:ed:f6:
                    48:08:73:d1:65:2c:5b:90:52:ba:3c:62:b7:f5:80:
                    74:4b:03:34:5e:16:08:9c:3c:9b:85:47:94:3f:85:
                    ab:4d:d0:cf:7a:4c:ea:fb:50:59:69:2d:f2:93:b6:
                    44:48:a1:06:2c:6f:8b:f5:89:a3:9c:33:37:17:83:
                    40:27:3a:c5:e9:5a:57:5f:4a:e7:71:ba:57:7b:97:
                    e2:09
                Exponent: 65537 (0x10001)
        Attributes:
            challengePassword        :unable to print attribute
    Signature Algorithm: sha1WithRSAEncryption
         01:62:8d:cf:95:9a:99:29:d5:ca:e6:27:19:9f:e6:8f:33:4d:
         16:5e:99:d9:1f:e8:bc:bb:0a:c6:8d:0a:35:68:13:b1:33:91:
         16:22:be:57:a1:59:13:e2:21:fa:1a:c2:ce:dd:c7:44:f6:53:
         ab:ee:bc:4f:78:80:af:37:8d:59:55:5a:cb:9b:3e:8b:dd:9a:
         bd:50:22:b5:23:27:98:31:2d:98:05:c4:1c:bf:fa:49:4a:c2:
         a7:c6:f7:96:ed:4d:11:e7:75:64:54:e3:e7:a3:c3:3e:81:88:
         bb:89:7d:78:e6:06:0b:c4:b7:eb:f1:9f:e8:ff:23:3d:b3:35:
         f9:8f:c1:11:a4:72:55:95:3e:e6:38:d0:93:45:21:9e:77:2e:
         44:b6:43:58:68:5d:91:3a:5d:d3:50:c8:df:57:ba:2b:03:f2:
         43:29:da:9f:2b:c3:f1:10:21:26:b1:5f:bb:b7:9c:0c:1e:da:
         ae:62:09:ef:b1:a3:d6:18:6d:aa:3d:52:a2:af:10:50:69:78:
         94:26:1c:79:7c:ca:4f:a6:a1:37:82:b7:dd:68:8e:f6:ee:e1:
         ec:57:12:44:f5:34:2e:8e:aa:61:91:1f:6a:77:a6:88:fe:9b:
         a2:f5:e9:9a:11:ad:2a:31:d6:72:59:7e:e0:78:9f:b4:3f:af:
         c7:94:34:7f
&lt;/pre&gt;&lt;/div&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Fri, 01 Nov 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>照片两张</title>
		<link>http://blog.zorro.im/posts/just-photo.html</link>
		<description>&lt;p&gt;&lt;strong&gt;上周末去了趟天坛公园。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;tiantan&#34; src=&#34;/static/img/tiantan.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;空气不错，就是时间有点晚，光线不足。趁着还在帝都，把著名景点都逛一逛，等哪天离开了，也不留遗憾。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;买了个移动电源，台电T100E。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;taidian&#34; src=&#34;/static/img/taidian.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;虽然一直想自己diy一个，但是总是想不出外壳该怎么弄。趁着京东特价，看着还过得去就入手了。虽然体积和重量都超过了预期，目测里面是4节18650电池。不管怎样，妈妈再也不用担心我出去玩手机没电了。&lt;/p&gt;
&lt;p&gt;另外，当插上iPhone数据线的时候，电量指示灯会自动亮起，其它品牌的数据线就不亮。看来iPhone的数据线里面是有电路的。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 24 Oct 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>Python命令行参数解析工具——argparse</title>
		<link>http://blog.zorro.im/posts/argparse.html</link>
		<description>&lt;p&gt;鄙司一直用的CVS来代码管理，每次提交代码都相当的繁琐。先diff，再review，再commit。由于代码量庞大，有可能同时在修好几个bug。一不小心就会误改一些不相关的文件，所以每次diff的时候都需要仔细看一遍改过的文件。&lt;/p&gt;
&lt;p&gt;之前用Python写了一个解析工具，可以从Diff文件中提取出修改过的文件列表，很方便的就可以找出不相关的文件，提交代码的时候也能省去很多麻烦。原理十分简单，主要是用正则表达式&lt;code&gt;^Index: (.*)$&lt;/code&gt;来找出所有以“Index”开头的行。&lt;/p&gt;
&lt;p&gt;前几天在用着个工具的时候想用一下管道，结果发现当时写的太简单了，不支持……趁着空闲就花了点时间改造了一下，让它既支持从文件中读取，又支持stdin读取。既可以返回文件列表，又可以方便CVS操作的文件名串。&lt;/p&gt;
&lt;p&gt;刚开始打算用命令行解析的传统方法&lt;code&gt;getopt&lt;/code&gt;来搞定，用了一会发现getopt有些弱，帮助啥的还得自己写。于是乎进行一番搜索，发现了argparse，一个更好的命令行参数解析工具。&lt;/p&gt;
&lt;p&gt;使用方法很简单，以我的小工具为例：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;argparse&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argparse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Get changed files from diff&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nargs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Diff file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Read diff string from stdin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;-l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;List all files&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它会自动生成一个很好看的帮助信息：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$getfile&lt;/span&gt;
usage: getfile &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-h&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-i&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-l&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

Get changed files from diff

positional arguments:
  file        Diff file

optional arguments:
  -h, --help  show this &lt;span class=&#34;nb&#34;&gt;help &lt;/span&gt;message and &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
  -i          Read diff string from stdin
  -l          List all files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完整的代码如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;re&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;argparse&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;FILE_RE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;compile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&amp;#39;^Index: (.*)$&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_files_from_diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FILE_RE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argparse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Get changed files from diff&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nargs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Diff file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Read diff string from stdin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_argument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;-l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;List all files&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


    &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parse_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_files_from_diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get_files_from_diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[;31m[ERROR!] &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[0mFail to open &amp;quot;{0}&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_help&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[;33m[{0}] &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[;32m{1}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[0m&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者&lt;a href=&#34;https://gist.github.com/zqqf16/7094628&#34;&gt;Gist&lt;/a&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 22 Oct 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>高亮Markdown中的代码（续）</title>
		<link>http://blog.zorro.im/posts/how-to-highlight-code-in-markdown-continue.html</link>
		<description>&lt;p&gt;之前写过一篇文章（&lt;a href=&#34;/posts/how-to-highlight-code-in-markdown.html&#34;&gt;高亮Markdown中的代码&lt;/a&gt;)，介绍了python-markdown2中高亮代码的方法。后来在使用中我发现了一个&lt;code&gt;fenced code blocks&lt;/code&gt;的bug，如果代码中间有空行，它会把换行之后的部分当成嵌套的。生成的文件中会有一堆类似这样的部分：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;k&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;class&lt;span class=&#34;nt&#34;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;nc&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;后来到其Github上一搜，发现很多人都有类似问题，比如&lt;a href=&#34;https://github.com/trentm/python-markdown2/issues/109&#34;&gt;这里&lt;/a&gt;。也有人给出了&lt;a href=&#34;https://github.com/trentm/python-markdown2/pull/117&#34;&gt;解决方案&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是这个Pull request已经提出4个月了，原作者至今没有通过，而且整个代码也有近1年没有动过了。Clone了一份它的代码，发现如果想自定义扩展的话比较困难。无奈之下从新研究起了曾经被我抛弃的Python-Markdown。结果发现原来它也有很多扩展，而且比Markdown2中的更多。更重要的是提供了扩展的接口，很方便地写自己的扩展。于是就在peanut中替换了markdown2，代码如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;md&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;markdown&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Markdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;fenced_code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;codehilite&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;meta&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;#do something&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;md&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;convert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;fenced_code&lt;/code&gt;用来识别&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;```python
```
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样的代码段，&lt;code&gt;codehilite&lt;/code&gt;用来高亮代码，&lt;code&gt;meta&lt;/code&gt;用来识别文章信息，比如：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;title: 高亮Markdown中的代码（续）
date: 2013-8-20
tag: python
     markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;过度完毕，问题搞定~&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 20 Aug 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>OpenLDAP添加Schema（Ubuntu）</title>
		<link>http://blog.zorro.im/posts/openldap-add-schema.html</link>
		<description>&lt;h2 id=&#34;_1&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;工作中遇到了需要给LDAP添加自定义字段的情况，介于公司中此技艺已经失传，只能自己来了。&lt;/p&gt;
&lt;p&gt;网络上很多流传的教程都太老了，不是很适用。Ubuntu8.10以及之后的系统倾向于用slapd-config的各种工具来配置sladp，而不是之前的直接修改文件的方法。&lt;/p&gt;
&lt;p&gt;用sldap-config来添加Schema可以总结为以下几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建Schema文件&lt;/li&gt;
&lt;li&gt;将Schema转换成ldif格式文件&lt;/li&gt;
&lt;li&gt;将ldif文件内容导入&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;_2&#34;&gt;具体步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编辑Schema文件，保存为&lt;code&gt;test.schema&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;objectIdentifier testOID 1.1.1.1
objectIdentifier testAttr testOID:1
objectIdentifier testObject testOID:2

attributetype ( testAttr
    NAME &amp;#39;testattr&amp;#39;
    DESC &amp;#39;Test attribute&amp;#39;
    EQUALITY caseIgnoreMatch
    SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )

objectclass ( testObject
    NAME &amp;#39;testObject&amp;#39;
    DESC &amp;#39;Just for test&amp;#39;
    AUXILIARY
    MAY (testattr))
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建文件&lt;code&gt;tmp.conf&lt;/code&gt;,加入以下内容&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;include test.schema
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建目录&lt;code&gt;ldif_dir&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;mkdir&lt;/span&gt;&lt;span class=&#34;x&#34;&gt; ldif_dir&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成‘ldif’文件&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;slaptest&lt;/span&gt;&lt;span class=&#34;x&#34;&gt; -f tmp.conf -F ldif_dir&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ldif目录结构如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;.
|-- cn=config
|   |-- cn=schema
|   |   `-- cn={0}test.ldif
|   |-- cn=schema.ldif
|   |-- olcDatabase={0}config.ldif
|   `-- olcDatabase={-1}frontend.ldif
`-- cn=config.ldif
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件&lt;code&gt;cn=config/cn=schema/cn={0}test.ldif&lt;/code&gt;就是生成的‘ldif’文件，编辑此文件：&lt;/p&gt;
&lt;p&gt;将&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;dn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;={&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;objectClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;olcSchemaConfig&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改为&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;dn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;objectClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;olcSchemaConfig&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;删除以下几行：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;structuralObjectClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;olcSchemaConfig&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;entryUUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9530&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cb4a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9845&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1032&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b5c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d9e32663bc&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;creatorsName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;createTimestamp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20130813092213&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Z&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;entryCSN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;20130813092213.368308&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000000&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000000&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;modifiersName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;modifyTimestamp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20130813092213&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最终文件变为&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;dn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;objectClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;olcSchemaConfig&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;olcObjectIdentifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testOID&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;olcObjectIdentifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testAttr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;testOID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;olcObjectIdentifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testObject&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;testOID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;olcAttributeTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;testAttr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NAME&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;testattr&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DESC&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Test attribute&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;QUALIT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;caseIgnoreMatch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SYNTAX&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;6.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1466.115&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;121.1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;olcObjectClasses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;testObject&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NAME&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;testObject&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DESC&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Just for test&amp;#39;&lt;/span&gt;     &lt;span class=&#34;n&#34;&gt;AUXILIARY&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MAY&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;testattr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将‘ldif’文件内容导入ldap数据库&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sudo&lt;/span&gt;&lt;span class=&#34;x&#34;&gt; ldapadd -Q -Y EXTERNAL -H ldapi:/// -f cn\=test.ldif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查导入结果&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;sudo&lt;/span&gt;&lt;span class=&#34;x&#34;&gt; ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:/// -b cn=schema,cn=config dn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 19 Aug 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>Levenshtein distance（编辑距离）算法</title>
		<link>http://blog.zorro.im/posts/levenshtein-distance.html</link>
		<description>&lt;p&gt;在用Git的时候，如果一不小心把命令参数输入错了，比如把&lt;code&gt;show&lt;/code&gt;写成了&lt;code&gt;slow&lt;/code&gt;，Git会进行有好的提示：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$git&lt;/span&gt; slow
git: &lt;span class=&#34;s1&#34;&gt;&amp;#39;slow&amp;#39;&lt;/span&gt; is not a git command. See &lt;span class=&#34;s1&#34;&gt;&amp;#39;git --help&amp;#39;&lt;/span&gt;.

Did you mean this?
    show
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一直很好奇这是基于什么算法找出来的相思结果，Google了一番，发现了一个NB的算法——Levenshtein distance，中文名叫“编辑距离”。关于这个算法的具体信息，可以参照&lt;a href=&#34;http://en.wikipedia.org/wiki/Levenshtein_distance&#34;&gt;维基百科&lt;/a&gt;。在这我就做个概述。&lt;/p&gt;
&lt;p&gt;这个算法是用来计算两个字符串之间的不同的，就是把一个字符串A通过一些列变换（插入、删除、替换）得到字符串B的最少步骤。可以用来做拼写检查、DNA匹配等。&lt;/p&gt;
&lt;p&gt;算法的基本原理就是中学时代就学过的动态规划。（太久没有接触数学了，遇到这个问题时还去查了很久的动态规划。。。）&lt;/p&gt;
&lt;p&gt;这个算法的巧妙之处（至少是我认为）是用了一个矩阵来辅助计算。当时看到这个矩阵的时候深深地被震撼到了，看了两天愣是没弄明白。一开始打算找点汉语资料研究一下，结果发现网上的都是半吊子货，于是重新拾起Wikipedia，硬着头皮终于弄明白了。&lt;/p&gt;
&lt;p&gt;鉴于解释这个算法需要画图，我也没个好用的工具，就放弃了。如果不明白，强烈建议看Wikipedia。结合推导公式和矩阵图，应该不难明白。&lt;/p&gt;
&lt;p&gt;有个外国哥们基于这个算法又改进了一下，在原有的三种操作（插入、删除、替换）中又增加了一种“交换”，这对于拼写检查之类的还是很有用的。这种改进后的算法又叫&lt;a href=&#34;http://en.wikipedia.org/wiki/Damerau–Levenshtein_distance&#34;&gt;Damerau–Levenshtein distance&lt;/a&gt;。Git源码里就是采用的这种算法，具体代码可以查看&lt;a href=&#34;https://github.com/git/git/blob/master/levenshtein.c&#34;&gt;这里&lt;/a&gt;。需要注意的是，Git中把4中操作都加上了权值，这样更灵活一些。&lt;/p&gt;
&lt;p&gt;为了更好的理解这个算法，我自己也基于Python实现了一下，代码放在了Gist上，可以访问&lt;a href=&#34;https://gist.github.com/zqqf16/6137789&#34;&gt;这里&lt;/a&gt;。PS：只是为了描述一下算法，并没有过多地考虑效率问题。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Fri, 02 Aug 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>支持上传的SimpleHTTPServer</title>
		<link>http://blog.zorro.im/posts/python-http-uploading-server.html</link>
		<description>&lt;p&gt;办公室有两台电脑，一个台式机，装着Ubuntu，主要用来开发。另一台笔记本，装着Windows，用来收发邮件，读写文档。为了方便两台机器的文件共享，在Ubuntu上装了Samba服务器。&lt;/p&gt;
&lt;p&gt;但是公司的WiFi和台式机的有线不在同一个网段，这就导致了笔记本用WiFi的时候就不能用Samba。后来发现python自带的SimpleHTTPServer可以很方便的搭建HTTP服务器，用它从台式机向笔记本传文件很方便。&lt;/p&gt;
&lt;p&gt;SimpleHTTPServer太Simple了，没有上传功能，从笔记本到台式机的时候不是很方便。于是乎找来SimpleHTTPServer.py好好研究一番，就有了下面的支持上传的SimpleHTTPServer：（或者移步&lt;a href=&#34;https://github.com/zqqf16/SimpleHTTPServer&#34;&gt;Github&lt;/a&gt;）&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Simple HTTP Server.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;This module builds on BaseHTTPServer by implementing the standard GET&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;and HEAD requests in a fairly straightforward manner.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;Support upload files&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;__version__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;0.6&amp;quot;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;__all__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;SimpleHTTPRequestHandler&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;posixpath&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;BaseHTTPServer&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;urllib&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cgi&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;shutil&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;mimetypes&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cStringIO&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringIO&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;ImportError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;StringIO&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringIO&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SimpleHTTPRequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BaseHTTPServer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BaseHTTPRequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;

    &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Simple HTTP request handler with GET and HEAD commands.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;    This serves files from the current directory and any of its&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    subdirectories.  The MIME type for files is determined by&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    calling the .guess_type() method.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;    The GET and HEAD requests are identical except that the HEAD&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;    request omits the actual contents of the file.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;server_version&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;SimpleHTTP/&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__version__&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;do_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Serve a GET request.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copyfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;do_POST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Serve a POST request.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cgi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FieldStorage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;fp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;environ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;REQUEST_METHOD&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                     &lt;span class=&#34;s&#34;&gt;&amp;#39;CONTENT_TYPE&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
                     &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;translate_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;filepath&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;File &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; exist!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;filepath&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;.new&amp;#39;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;do_HEAD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Serve a HEAD request.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;send_head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Common code for GET and HEAD commands.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        This sends the response code and MIME headers.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        Return value is either a file object (which has to be copied&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        to the outputfile by the caller unless the command was HEAD,&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        and must be closed by the caller under all circumstances), or&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        None, in which case the caller has nothing further to do.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;translate_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;c&#34;&gt;# redirect browser - doing basically what apache does&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;301&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Location&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;index.htm&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list_directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ctype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;guess_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;c&#34;&gt;# Always read in binary mode. Opening files in text mode may cause&lt;/span&gt;
            &lt;span class=&#34;c&#34;&gt;# newline translations, making the actual size of the content&lt;/span&gt;
            &lt;span class=&#34;c&#34;&gt;# transmitted *less* than the content-length!&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;IOError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;404&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;File not found&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Content-type&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ctype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fstat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fileno&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Content-Length&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Last-Modified&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date_time_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;st_mtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;list_directory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Helper to produce a directory listing (absent index.html).&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        Return value is either a file object, or None (indicating an&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        error).  In either case, the headers are sent, making the&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        interface the same as for send_head().&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;404&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;No permission to list directory&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringIO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;displaypath&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cgi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urllib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unquote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD HTML 3.2 Final//EN&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;title&amp;gt;Directory listing for &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;displaypath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;h2&amp;gt;Directory listing for &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;displaypath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;form action=&amp;quot;&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                    &amp;lt;input name=&amp;quot;file&amp;quot; type=&amp;quot;file&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                    &amp;lt;input value=&amp;quot;upload&amp;quot; type=&amp;quot;submit&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;                &amp;lt;/form&amp;gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;hr&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;fullname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;displayname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;linkname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
            &lt;span class=&#34;c&#34;&gt;# Append / for directories or @ for symbolic links&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fullname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;displayname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;linkname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;islink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fullname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;displayname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;
                &lt;span class=&#34;c&#34;&gt;# Note: a link to a directory displays with @ and links with /&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urllib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;linkname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cgi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;displayname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getfilesystemencoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Content-type&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;text/html; charset=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send_header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Content-Length&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end_headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;translate_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Translate a /-separated PATH to the local filename syntax.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        Components that mean special things to the local file system&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        (e.g. drive or directory names) are ignored.  (XXX They should&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        probably be diagnosed.)&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;c&#34;&gt;# abandon query parameters&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;posixpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;normpath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urllib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unquote&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getcwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;words&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;drive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;splitdrive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pardir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;copyfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outputfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Copy all data between two file objects.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        The SOURCE argument is a file object open for reading&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        (or anything with a read() method) and the DESTINATION&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        argument is a file object open for writing (or&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        anything with a write() method).&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        The only reason for overriding this would be to change&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        the block size or perhaps to replace newlines by CRLF&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        -- note however that this the default server uses this&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        to copy binary data as well.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;shutil&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copyfileobj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outputfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;log_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Log an error.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        Display error message in red color.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[0;31m&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[0m&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log_message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;guess_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Guess the type of a file.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        Argument is a PATH (a filename).&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        Return value is a string of the form type/subtype,&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        usable for a MIME Content-type header.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        The default implementation looks the file&amp;#39;s extension&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        up in the table self.extensions_map, using application/octet-stream&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        as a default; however it would be permissible (if&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        slow) to look inside the data to make a better guess.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;posixpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;splitext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ext&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ext&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extensions_map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mimetypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;mimetypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# try to read system mime.types&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;extensions_map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mimetypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;types_map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;extensions_map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;application/octet-stream&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# Default&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#39;.py&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#39;.c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;#39;.h&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HandlerClass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SimpleHTTPRequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;ServerClass&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BaseHTTPServer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTTPServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BaseHTTPServer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HandlerClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ServerClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码主要复制于“SimpleHTTPServer.py”，主要做了一下修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当列出目录的所有文件时，忽略掉Linux下的隐藏文件。（“.”开头的文件，我觉得隐藏文件没有必要显示）&lt;/li&gt;
&lt;li&gt;修改了&lt;code&gt;list_directory&lt;/code&gt;方法返回的页面，增加了一个上传文件表单。&lt;/li&gt;
&lt;li&gt;增加了&lt;code&gt;do_POST&lt;/code&gt;方法，用来处理POST请求。调用&lt;code&gt;cgi.FieldStorage&lt;/code&gt;来获取上传的文件。&lt;/li&gt;
&lt;li&gt;重写了&lt;code&gt;log_error&lt;/code&gt;方法，将错误信息以红色显示。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，SimpleHTTPServer基于BaseHTTPServer，如有兴趣可以参考官方文档。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Wed, 24 Jul 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>Requests抓取网页的编码问题</title>
		<link>http://blog.zorro.im/posts/python-requests-encoding-problems.html</link>
		<description>&lt;p&gt;经常在各大python论坛上看到有关爬虫的问题，实在是搞不明白这玩意儿除了对做搜索引擎还能有啥用。今天本着好奇的态度，打算试一试。&lt;/p&gt;
&lt;p&gt;一番Google之后，发现了个很NB的库&lt;strong&gt;Requests&lt;/strong&gt;，比之前我用过的liburl2等http库简单多了。出于测试的目的，打算抓取一下我的博客。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# -*- encoding: utf-8 -*-&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;http://zqqf16.info&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;打印内容的时候一切正常，但是&lt;code&gt;encoding&lt;/code&gt;却显示的是&lt;code&gt;ISO-8859-1&lt;/code&gt;。我的页面上明明写着&lt;code&gt;&amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html;charset=utf-8&#34;&amp;gt;&lt;/code&gt;，但结果却不是utf-8，百思不得其解，难道是我的html格式不对？&lt;/p&gt;
&lt;p&gt;为了验证这个问题，我抓取了一下百度的首页，它的encoding显示的是&#39;utf-8&#39;，而他的头部写的格式和我的一样。&lt;/p&gt;
&lt;p&gt;这下迷茫了，Google了很长时间也没找到答案，只能仔细翻看官方的文档了。&lt;/p&gt;
&lt;p&gt;终于，在&lt;a href=&#34;http://docs.python-requests.org/en/latest/user/advanced.html#encodings&#34;&gt;文档里&lt;/a&gt;发现了这么一段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you receive a response, Requests makes a guess at the encoding to use for decoding the response when you call the Response.text method. Requests will first check for an encoding in the HTTP header, and if none is present, will use charade to attempt to guess the encoding.&lt;/p&gt;
&lt;p&gt;The only time Requests will not do this is if no explicit charset is present in the HTTP headers and the Content-Type header contains text. In this situation, RFC 2616 specifies that the default charset must be ISO-8859-1. Requests follows the specification in this case. If you require a different encoding, you can manually set the Response.encoding property, or use the raw Response.content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这我才明白了，原来HTTP头部也有个“Content-Type”字段，requests会先去找HTTP头部的这个字段，如果没有，就调用“charade”来猜测编码。而默认的编码格式正是“ISO-8859-1”。&lt;/p&gt;
&lt;p&gt;用chrome的调试工具看了一下baidu.com的Response Header，有这样一句“Content-Type:text/html;charset=utf-8”。而我的&lt;a href=&#34;http://zqqf16.info&#34;&gt;zqqf16.info&lt;/a&gt;却没有。这就是为什么我的编码格式识别不出来的原因。&lt;/p&gt;
&lt;p&gt;由于我的博客在Github上，没法控制他的HTTP server的行为。为了能让requests识别出UTF-8，我在之前的代码里加了一句，为其指定了编码格式。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;问题搞定了，多看看官方文档还是很有帮助滴。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 18 Jul 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>tornado源码之Configurable类</title>
		<link>http://blog.zorro.im/posts/tornado-configurable.html</link>
		<description>&lt;p&gt;最近比较清闲，打算研究一下tornado的源码。之前很少接触过网络编程方面的东西，对Epoll只是有个概念上的了解，所以就在网上找了一个别人写的&lt;a href=&#34;http://www.cnblogs.com/Bozh/archive/2012/07/22/2603976.html&#34;&gt;源码分析&lt;/a&gt;来作为入门。&lt;/p&gt;
&lt;p&gt;第一讲是说IOLoop的，也是tornado的核心。程序中主函数通常调用&lt;code&gt;tornado.ioloop.IOLoop.instance().start()&lt;/code&gt;来启动IOLoop，但是看了一下IOLoop的实现，start方法是这样的：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Starts the I/O loop.&lt;/span&gt;

&lt;span class=&#34;sd&#34;&gt;        The loop will run until one of the callbacks calls `stop()`, which&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        will make the loop stop after the current event iteration completes.&lt;/span&gt;
&lt;span class=&#34;sd&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也就是说&lt;code&gt;IOLoop&lt;/code&gt;是个抽象的基类，具体工作是由它的子类负责的。由于是Linux平台，所以应该用&lt;code&gt;Epoll&lt;/code&gt;，对应的类是&lt;code&gt;PollIOLoop&lt;/code&gt;。&lt;code&gt;PollIOLoop&lt;/code&gt;的&lt;code&gt;start&lt;/code&gt;方法开始了事件循环。&lt;/p&gt;
&lt;p&gt;问题来了，&lt;code&gt;tornado.ioloop.IOLoop.instance()&lt;/code&gt;是怎么返回&lt;code&gt;PollIOLoop&lt;/code&gt;实例的呢？刚开始有点想不明白，后来看了一下IOLoop的代码就豁然开朗了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IOLoop&lt;/code&gt;继承自&lt;code&gt;Configurable&lt;/code&gt;，后者位于&lt;code&gt;tornado/util.py&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A configurable interface is an (abstract) class whose constructor acts as a factory function for one of its implementation subclasses. The implementation subclass as well as optional keyword arguments to its initializer can be set globally at runtime with &lt;code&gt;configure&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Configurable&lt;/code&gt;类实现了一个工厂方法，也就是设计模式中的“工厂模式”，看一下&lt;code&gt;__new__&lt;/code&gt;函数的实现：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configurable_base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;impl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configured_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__impl_kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__impl_kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;impl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Configurable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__new__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;impl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c&#34;&gt;# initialize vs __init__ chosen for compatiblity with AsyncHTTPClient&lt;/span&gt;
        &lt;span class=&#34;c&#34;&gt;# singleton magic.  If we get rid of that we can switch to __init__&lt;/span&gt;
        &lt;span class=&#34;c&#34;&gt;# here too.&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当创建一个&lt;code&gt;Configurable&lt;/code&gt;类的实例的时候，其实创建的是&lt;code&gt;configurable_class()&lt;/code&gt;返回的类的实例。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;nd&#34;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;configured_class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;sd&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Returns the currently configured class.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configurable_base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__impl_class&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__impl_class&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;configurable_default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;__impl_class&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后，就是返回的&lt;code&gt;configurable_default()&lt;/code&gt;。此函数在IOLoop中的实现如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;    &lt;span class=&#34;nd&#34;&gt;@classmethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;configurable_default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;epoll&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.platform.epoll&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPollIOLoop&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EPollIOLoop&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;kqueue&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;c&#34;&gt;# Python 2.6+ on BSD or Mac&lt;/span&gt;
            &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.platform.kqueue&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KQueueIOLoop&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KQueueIOLoop&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tornado.platform.select&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SelectIOLoop&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SelectIOLoop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;EPollIOLoop&lt;/code&gt;是&lt;code&gt;PollIOLoop&lt;/code&gt;的子类。至此，这个流程就理清楚了。&lt;/p&gt;
&lt;p&gt;第一天看tornado的代码就收获不少，&lt;strong&gt;最好的学习方式就是看别人的代码&lt;/strong&gt;这话一点都不假。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 16 Jul 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>iOS7 Beta 3体验</title>
		<link>http://blog.zorro.im/posts/ios7.html</link>
		<description>&lt;p&gt;前几天想起来有台公司发的iPad mini正在闲置中，于是就心血来潮，装了个IOS 7 beta 3 来体验一番。具体的安装步骤就不多说了，Google一搜一大把。&lt;/p&gt;
&lt;p&gt;IOS7特性上的东西我就不细说了，网上有很多测评，这里将着重说一下我觉得不爽的地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;卡顿&lt;/strong&gt;&lt;br /&gt;
不知道是我的mini配置太低的原因还是Beta版的问题，反正使用起来明显能感觉到卡顿。画面切换卡，调出通知中心卡，卡得跟安卓似的。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小Bug一堆&lt;/strong&gt;&lt;br /&gt;
先来看几张图：&lt;br /&gt;
&lt;img alt=&#34;background&#34; src=&#34;/static/img/ios7/background.png&#34; /&gt; &lt;br /&gt;
在从多任务界面切换回主界面的时候，会有一定的几率出现背景消失的情况。    &lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;settings&#34; src=&#34;/static/img/ios7/settings.png&#34; /&gt;&lt;br /&gt;
在设置里有很多排版混乱的情况，文字窜行了。  &lt;/p&gt;
&lt;p&gt;类似的小Bug还有很多，但我觉得这些都不是问题，毕竟是Beta版，正式版的时候会有改善。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文字太小&lt;/strong&gt; &lt;br /&gt;
状态栏的文字图标明显缩小，看起来有点费眼。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计有缺陷&lt;/strong&gt;&lt;br /&gt;
IOS7中大量采用了半透明的设计，通知菜单、Dock栏、甚至一些应用程序比如“提醒事项”都用到了。但是这也带来了一些问题，就是背景色和前景色顺色的问题。比如下面这张图： &lt;br /&gt;
&lt;img alt=&#34;color&#34; src=&#34;/static/img/ios7/dock.png&#34; /&gt;  &lt;br /&gt;
看看最下面的“邮件”和“视频”两个图标，完全和背景顺色了，更讽刺的是这张背景图片是系统自带的。     &lt;/p&gt;
&lt;p&gt;再看看图标设计，大多数图标都能感受到一种“小清新”的气质，或者说所谓的扁平化风格。但有些图标，比如上图中的“备忘录”以及“提醒事项”，完全就像是个业余认识因为时间不够搞出来的半成品，个人感觉丑爆了。   &lt;/p&gt;
&lt;p&gt;再看看下面这张图： &lt;br /&gt;
&lt;img alt=&#34;settings&#34; src=&#34;/static/img/ios7/settings2.png&#34; /&gt; &lt;br /&gt;
看看左侧一栏，总觉得有些乱，分隔线和滚动条看起来一点都不搭。。。   &lt;/p&gt;
&lt;p&gt;通知中心： &lt;br /&gt;
&lt;img alt=&#34;notice&#34; src=&#34;/static/img/ios7/notification.png&#34; /&gt; &lt;br /&gt;
IOS7中的通知中心改动挺大，分成了“今天”、“所有通知”、“未接来电”三部分，但是这三部分不能通过左右滑动屏幕来切换，每次都得手动点上去才行。这在iPhone中无所谓，因为屏幕小，很容易点到。但是在iPad中就有点不方便了。双手拿着设备，切换的时候还得空出一只手过去点一下，实在是不方便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件夹&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;floder&#34; src=&#34;/static/img/ios7/floder.png&#34; /&gt;&lt;br /&gt;
文件夹的改动也挺大，支持分页，每个文件夹内可以放N多图标。但问题也来了，当放置的图标过多的时候只能显示第一页的内容，很不直观。很有可能某些应用就这样被遗忘到角落里了。另外，文件夹的展开方式我觉得也不如IOS6中的舒服。&lt;/p&gt;
&lt;p&gt;总的来说，这次IOS7中的改进还是十分令人满意的，毕竟是Beta版。希望在正式版出来的时候能够达到或者接近完美。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 11 Jul 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>幽门螺旋杆菌</title>
		<link>http://blog.zorro.im/posts/helicobacter-pylori.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;每次从医院回来，就感觉没有什么比小命还重要。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前一段时间感觉胃不太舒服，吃完东西就会堵得慌，得使劲揉揉才能缓解。被折磨了很久之后终于下定决心去医院看看。不看不知道，一看吓一跳。。。&lt;/p&gt;
&lt;p&gt;其实病因就是消化不良，但是为了彻底了解病因，在医生的建议下，我做了一些全面的检查。结果发现我胃里的&lt;a href=&#34;http://baike.baidu.com/view/67756.htm&#34;&gt;幽门螺旋杆菌&lt;/a&gt;超标了，而且超标的比较严重。&lt;/p&gt;
&lt;p&gt;第一次知道这玩意儿，还是在很同事聊天中不经意间听说的。当时也没在意，心想着反正我平时很少出去吃饭，一般不会感染。没想到这东西已经在我胃里了。看到检验结果时有一种不寒而栗的感觉，慎得慌。。。&lt;/p&gt;
&lt;p&gt;从医院回来后就感觉到处都是脏的，晚上把家里的餐具什么的放在锅里煮了很长时间来消毒。还特意在淘宝上买了个紫外线灯。希望卫生的习惯能够保持下去。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 11 Jul 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>近期状态</title>
		<link>http://blog.zorro.im/posts/recent-status.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;很久没写blog，都快忘了。为了不让这个来之不易的blog荒废，决定更新一下最近的状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;工作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近工作方面发生了比较大的变化，由于公司产品及人员调整，我要负责IOS客户端的开发了，也算是转行了。
这两周一直在学Objective-C以及IOS开发相关的东西，目前算是入门了吧。以后的博客可能会写一些这方面的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生活&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;去了一趟郑州，感受了一下中原文化，吃了当地名吃“葛记焖饼”。要是郑州也靠海的话我真想过去定居～&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google Reader 关了，选择了Digg Reader这个做替代。&lt;br /&gt;
GitCafe 私有项目开始收费了，强烈支持。&lt;br /&gt;
尝试装黑苹果，以失败告终，决心攒钱买个Mac Mini。&lt;br /&gt;
北京连续大晴天，受宠若惊，喜出望外。&lt;br /&gt;
研究自制豆腐脑，差强人意。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;吐槽&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;公司的采购效率忒低。申请一台MAC设备，申请了半个月也没见到。两个周了，天天看Apple的Develop guide。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 04 Jul 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>理解 Git 的暂存区</title>
		<link>http://blog.zorro.im/posts/understand-git-stage.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;虽然用了几个月的 Git，但是今天才了解了“Index（暂存区域）”这个东西，惭愧啊。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在公司用的是 CVS，因此用&lt;code&gt;git add&lt;/code&gt;的时候就以为和&lt;code&gt;cvs add&lt;/code&gt;的作用是一样的，把新文件加到代码库。后来学了一招&lt;code&gt;git commit -a&lt;/code&gt;，还以为-a就是--all的意思。稀里糊涂地用到现在。。。&lt;/p&gt;
&lt;p&gt;Git 中的暂存区类似于任务列表，当对工作区的文件做了修改之后，执行&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;git add filename
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就会把修改的文件加到这个任务列表中，当执行&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;git commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;的时候，暂存区中的改动就会提交到版本库中，而在“git add”之后所做的改动就不会被提交。&lt;/p&gt;
&lt;p&gt;比如，我现在 Readme.md 文件中增加了一行，然后执行&lt;code&gt;git add Readme.md&lt;/code&gt;。然后再加一行，执行&lt;code&gt;git commit&lt;/code&gt;，这样我提交的只是第一次修改的内容。&lt;/p&gt;
&lt;p&gt;命令&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;git checkout filename
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是用暂存区中的文件来替换工作区中的文件。&lt;/p&gt;
&lt;p&gt;命令&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;git checkout HEAD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是用HEAD指向的版本库中的文件来替换暂存区和工作区的文件。&lt;/p&gt;
&lt;p&gt;好了，先这么多了。通过这件事总结出一个道理：经验有时候会形成思维定势。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Wed, 05 Jun 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>Ubuntu下好用的Markdown编辑器</title>
		<link>http://blog.zorro.im/posts/markdown-editor-under-ubuntu.html</link>
		<description>&lt;p&gt;之前在Ubuntu下一直用Vim来编辑Markdown，纯英文还好，但是Vim里输入汉语实在是忒复杂了。&lt;/p&gt;
&lt;p&gt;后来在Ubuntu软件中心里面搜&#34;Markdown&#34;，发现了一个不错的编辑器——ReText。&lt;/p&gt;
&lt;p&gt;可以直接用apt-get来安装：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo apt-get install retext
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在某些情况下，工具栏的图标显示不出来。后来搜到了这篇&lt;a href=&#34;http://www.e0356.com/2013/02/242&#34;&gt;文章&lt;/a&gt;，完美的解决了这个问题。&lt;/p&gt;
&lt;p&gt;在Ubuntu下直接执行：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;gsettings get org.gnome.desktop.interface icon-theme
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我这显示的是&#39;ubuntu-mono-dark&#39;。&lt;/p&gt;
&lt;p&gt;打开“～/.config/ReText\ project/ReText.conf”，加入&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;iconThem=ubuntu-mono-dark
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重新打开ReText就OK了~&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;图片&#34; src=&#34;/static/img/retext.png&#34; /&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 04 Jun 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>重拾C语言之运算符优先级</title>
		<link>http://blog.zorro.im/posts/c-priority.html</link>
		<description>&lt;p&gt;总是记不住C语言各个运算符的优先级，&lt;s&gt;每次用的时候都得用笨办法——加括号。虽然成功率很高，但是稍微长一点的语句可读性极差&lt;/s&gt;。因此，就借最近整理C语言知识点的时机恶补一下。&lt;/p&gt;
&lt;p&gt;注意：下面的这段内容抄自&lt;a href=&#34;http://baike.baidu.com/view/1516130.htm&#34;&gt;百度百科&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1级（左结合）&lt;/strong&gt;  &lt;br /&gt;
( ) 圆括号；[ ]下标运算符；-&amp;gt;指向结构体成员运算符；. 结构体成员运算符。&lt;br /&gt;
&lt;strong&gt;2级（右结合）&lt;/strong&gt;&lt;br /&gt;
“ ! ”逻辑非运算符；“ ~ ”按位取反运算符；“ ++ ”前缀增量运算符；“ -- ”前缀减量运算符；&lt;br /&gt;
“ - ”负号运算符；(类型)类型转换运算符；“ * ”指针运算符；“ &amp;amp; ”地址运算符；&lt;br /&gt;
“sizeof ” 长度运算符。&lt;br /&gt;
&lt;strong&gt;3级（左结合）&lt;/strong&gt;&lt;br /&gt;
“ * ” 乘法运算符；“ / ”除法运算符；“ % ” 取余运算符。&lt;br /&gt;
&lt;strong&gt;4级（左结合）&lt;/strong&gt;&lt;br /&gt;
“ + ”加法运算符；“ - ”减法运算符。&lt;br /&gt;
&lt;strong&gt;5级（左结合）&lt;/strong&gt;  &lt;br /&gt;
&amp;lt;&amp;lt; 左移运算符；&amp;gt;&amp;gt; 右移运算符。&lt;br /&gt;
&lt;strong&gt;6级（左结合）&lt;/strong&gt;&lt;br /&gt;
&amp;lt;、&amp;lt;=、&amp;gt;、&amp;gt;=关系运算符。&lt;br /&gt;
&lt;strong&gt;7级（左结合）&lt;/strong&gt;&lt;br /&gt;
“ == ”等于运算符；“ != ”不等于运算符。&lt;br /&gt;
&lt;strong&gt;8级（左结合）&lt;/strong&gt;  &lt;br /&gt;
“ &amp;amp; ”按位与运算符。&lt;br /&gt;
&lt;strong&gt;9级（左结合）&lt;/strong&gt;&lt;br /&gt;
“ ∧ ”按位异或运算符。&lt;br /&gt;
&lt;strong&gt;10级（左结合）&lt;/strong&gt;&lt;br /&gt;
“ | ”按位或运算符。
&lt;strong&gt;11级（左结合）&lt;/strong&gt;&lt;br /&gt;
“&amp;amp;&amp;amp;”逻辑与运算符。&lt;br /&gt;
&lt;strong&gt;12级（左结合）&lt;/strong&gt;&lt;br /&gt;
“ || ”逻辑或运算符。&lt;br /&gt;
&lt;strong&gt;13级（右结合）&lt;/strong&gt;&lt;br /&gt;
? :条件运算符。&lt;br /&gt;
&lt;strong&gt;14级（右结合）&lt;/strong&gt;&lt;br /&gt;
=、 +=、 -=、 *=、 /=、 %=、 &amp;amp;=、 ^=、 |=、 &amp;lt;&amp;lt;=、 &amp;gt;&amp;gt;=赋值运算符。&lt;br /&gt;
&lt;strong&gt;15级（左结合）&lt;/strong&gt;&lt;br /&gt;
“，”逗号运算符。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;---抄袭结束---&lt;/p&gt;
&lt;p&gt;记住“==”和“!=”的优先级高于“&amp;amp;&amp;amp;”和“||”，&lt;code&gt;if&lt;/code&gt;的时候就可以省下好几对括号了。&lt;/p&gt;
&lt;p&gt;记住[ ]的优先级高于“*”, 就可以区分数组的指针和指针数组了(&lt;code&gt;char (*p)[20]&lt;/code&gt;，&lt;code&gt;char *p[20]&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;PS：如果实在记不清，还是建议乖乖地套上括号，这是最靠谱的方法。&lt;/p&gt;
&lt;p&gt;PS2：“只记住两个优先级就够了：乘法和除法优先于加减法，其他操作一律加括号” —— 《C专家编程》&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 28 May 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>重拾C语言之数组初始化</title>
		<link>http://blog.zorro.im/posts/c-array-initialization.html</link>
		<description>&lt;p&gt;记得刚工作的时候，每次用字符串数组都是小心翼翼。当时基本都是这样：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那时颇为自豪，自认为很少有菜鸟能像我这样注意这些问题。直到后来有一次代码review，在一老鸟面前班门弄斧，结果被他指出来了，说我这样会浪费一次函数调用，直接&lt;code&gt;char str[32] = {0}&lt;/code&gt;更好。刚开始我还以为这是一种特殊语句，是把数组的每个元素都赋0。&lt;/p&gt;
&lt;p&gt;有一次我想把数组全初始化成1，就直接&lt;code&gt;int list[4] = {1}&lt;/code&gt;。结果进引起了一个bug，害得我花了很长时间才找到问题所在——list中除了第一个是1,其它的都是0。于是我决定好好研究一下，争取不再犯这样的错误。&lt;/p&gt;
&lt;p&gt;其实，这玩意很简单，简单到不能再简单了，以至于研究完了我都觉得羞愧了。。。&lt;/p&gt;
&lt;p&gt;首先，看下面的语句：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是标准的数组初始化方法，字符串数组的每个元素都被赋上初始值（大括号内的个数等于数组长度）。&lt;/p&gt;
&lt;p&gt;当大括号内的值小于数组长度的时候，比如：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;str[0]和str[1]会被赋上相应的初始值，而剩下的元素会被初始化成0。这基本是没本C语言书里面都会讲到的。&lt;/p&gt;
&lt;p&gt;所以，反过来再看看之前的例子：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就是把第一个元素赋1，其他的元素都被初始化成0。&lt;/p&gt;
&lt;p&gt;就是这么简单。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Sun, 26 May 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>重拾C语言之strncpy</title>
		<link>http://blog.zorro.im/posts/c-strncpy.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;前一段时间Python用惯了，冷不丁地切换回C，发现很多基础东西都有点模糊了。从今天起，我将把一些平时碰到的知识点整理起来，起名为“重拾C语言”系列。纯粹的基础知识，老鸟绕行~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;strncpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;虽然加了个n，当时这个函数一点也不靠谱。它并不能保证dest的末尾一定是&lt;code&gt;&#39;\0&#39;&lt;/code&gt;。来看看这个函数的简单实现（来自man手册）:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;strncpy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只有当n大于src的长度才会在dest的末尾填“\0”。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Fri, 24 May 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>Sphinx入门</title>
		<link>http://blog.zorro.im/posts/sphinx.html</link>
		<description>&lt;p&gt;公司的文档都是保存成Word格式的，编写完之后上传到OpenKM上统一管理。这种方式对于大多数人来说都还ok，对于我这种忠实的Linux用户来说，简直太苦逼了。。。&lt;/p&gt;
&lt;p&gt;.doc .docx格式也太TMD难兼容了，不能在线预览也就罢了，libreoffice打开之后就成翔了。&lt;/p&gt;
&lt;p&gt;而且对于搞计算机的来说，往Word里面粘代码简直就是糊弄人啊。就别说代码高亮了，连起码的缩进都困难。&lt;/p&gt;
&lt;p&gt;好了，吐槽完毕，切入正题。&lt;/p&gt;
&lt;p&gt;今天研究一下一个NB的文档工具&lt;a href=&#34;http://sphinx-doc.org/index.html&#34;&gt;Sphinx&lt;/a&gt;。它是用Python写的，可以把reStructuredText格式的文档转成各种可读格式。如果你看过Python的文档，你就会发现它们大多都是用这个来写的。&lt;/p&gt;
&lt;p&gt;安装方法：&lt;/p&gt;
&lt;p&gt;Ubuntu用户&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sudo apt-get install python-sphinx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新建个目录，注意，路径上不能有中文。。。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;mkdir doc
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd &lt;/span&gt;doc
&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;sphinx-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行上条命令后会提示一堆设置信息，简单地英语，一步步照做就行了。这些信息会保存在conf.py里面，可以直接修改文件来更改设置。&lt;/p&gt;
&lt;p&gt;设置完之后，会在当前目录下生成一些目录及文件：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;ls
_build  conf.py  index.rst  make.bat  Makefile  _static  _templates
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;_build是最终编译完的文件存放目录&lt;/p&gt;
&lt;p&gt;_static存放一些静态文件，比如文档中要使用的图片等。&lt;/p&gt;
&lt;p&gt;_templates存放模板，如果不需要定制样式的话，暂且用不着。&lt;/p&gt;
&lt;p&gt;新建一个文件：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;vim hello.rst
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;写入如下内容：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;gh&#34;&gt;=======================&lt;/span&gt;
&lt;span class=&#34;gh&#34;&gt;Hello World&lt;/span&gt;
&lt;span class=&#34;gh&#34;&gt;=======================&lt;/span&gt;

&lt;span class=&#34;gh&#34;&gt;标题&lt;/span&gt;
&lt;span class=&#34;gh&#34;&gt;========&lt;/span&gt;

&lt;span class=&#34;gh&#34;&gt;小标题&lt;/span&gt;
&lt;span class=&#34;gh&#34;&gt;--------&lt;/span&gt;

&lt;span class=&#34;m&#34;&gt;1.&lt;/span&gt; 列表1

&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt; 类表2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;编辑index.rst，修改如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;toctree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;
   &lt;span class=&#34;nc&#34;&gt;:maxdepth:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;2&lt;/span&gt;

   hello
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;, hello是文件名，不用写rst扩展名，hello与toctree左对齐，即左空3个空格。&lt;/p&gt;
&lt;p&gt;然后执行:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果没有错误的话，会在_build/html下生成一些HTML文件：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nv&#34;&gt;$ &lt;/span&gt;ls _build/html/
genindex.html  hello.html  index.html  objects.inv  search.html  searchindex.js  _sources  _static
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用浏览器打开index.html就可以看到成果了~&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;sphinx&#34; src=&#34;/static/img/sphinx.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PS: reStructuredText的语法可以自行Google，不是博主懒，是博主花了大半天愣是没掌握。。。在这里也吐个槽。。。这玩意还是不如用Markdown来得快。。。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 23 May 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>我的Vim配置</title>
		<link>http://blog.zorro.im/posts/my-vim-configuration.html</link>
		<description>&lt;p&gt;之前，我的Vim配置一直是通过Ubuntu One来保存和备份的。但是Ubuntu One的网络实在是不敢恭维，时好时坏。因此就在寻求一种比较靠谱的备份方式。&lt;/p&gt;
&lt;p&gt;后来有一次在看别人博客的时候，发现了一个神器“vim-pathogen”。关于它的详细介绍我就不罗嗦了，下载及查看可以到&lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;用一句话概括就是它是管理Vim插件的插件。用它加上Github的配合，可以完美地实现配置备份。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;详细步骤&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在.vim下新建文件夹bundle，以后所有的插件都放到此目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加pathogen插件：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;git submoudle add git://github.com/tpope/vim-pathogen.git bundle/vim-pathogen
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;修改.vimrc，在开头加上  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;&amp;quot; pathogen&lt;/span&gt;
runtime bundle&lt;span class=&#34;sr&#34;&gt;/vim-pathogen/&lt;/span&gt;autoload/pathogen.&lt;span class=&#34;k&#34;&gt;vim&lt;/span&gt;
execute pathogen#infect&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;以后如果需要增加插件，只需在bundle目录下加一个git的submoudle即可。升级插件可以用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;git submodule foreach git pull origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;可以在Github上新建个项目，把.vim目录下的所有内容提交上去，可以做到方便的更新与备份。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，大家可以参考一下我的vim配置：&lt;a href=&#34;https://github.com/zqqf16/zqq-vim&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主要装了以下插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python的缩进插件：indent-python&lt;/li&gt;
&lt;li&gt;深色养眼的主题：lucius&lt;/li&gt;
&lt;li&gt;文件浏览插件：nerdtree&lt;/li&gt;
&lt;li&gt;看代码神器：taglist&lt;/li&gt;
&lt;li&gt;powerline插件：vim-powerline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上一张截图&lt;img alt=&#34;vim&#34; src=&#34;/static/img/my-vim.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&#34;http://liluo.org/blog/2012/05/using-git-submodule-and-vim-pathogen-for-vim-configuraction-management/&#34;&gt;liluo.org&lt;/a&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Wed, 22 May 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>论自由</title>
		<link>http://blog.zorro.im/posts/tucao-freedom.html</link>
		<description>&lt;p&gt;自由是个啥？自由就是我有接受你所谓的“自由”的自由，也有不接受你所谓的“自由”的自由。&lt;/p&gt;
&lt;p&gt;你认为你那叫“自由”而强迫我去接受你的“自由”，这不叫自由，这只是另一种打着自由的幌子的专制。&lt;/p&gt;
&lt;p&gt;我有选择我认为的“自由”的自由，你有选择你认为的“自由”的自由，这才叫自由。&lt;/p&gt;
&lt;p&gt;仅以此文，献给整天叫唤着要“自由”的人们。空谈误国，实干兴邦，与君互勉。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 21 May 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>命令行下的有道翻译</title>
		<link>http://blog.zorro.im/posts/youdao-translation.html</link>
		<description>&lt;p&gt;像我这种英语比较差劲的人来说，一个好点的翻译工具十分重要。Linux下哪个用着都不顺手，每次都用在线的google翻译。介于google经常性的抽风，此方案十分不靠谱，于是乎就像自己写个。&lt;/p&gt;
&lt;p&gt;一次偶然的机会，发现了有道这个靠谱的工具提供了十分方便的API可供调用，就花了一点时间，写了个Python版的~。&lt;/p&gt;
&lt;p&gt;有道的数据接口如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;http://fanyi.youdao.com/openapi.do?keyfrom=&lt;span class=&#34;nt&#34;&gt;&amp;lt;keyfrom&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;key=&lt;span class=&#34;nt&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;type=data&lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;doctype=&lt;span class=&#34;nt&#34;&gt;&amp;lt;doctype&amp;gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;version=1.1&lt;span class=&#34;err&#34;&gt;&amp;amp;&lt;/span&gt;q=要翻译的文本
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;版本：1.1，请求方式：get，编码方式：utf-8&lt;br /&gt;
主要功能：中英互译，同时获得有道翻译结果和有道词典结果（可能没有）&lt;br /&gt;
参数说明：&lt;br /&gt;
　type - 返回结果的类型，固定为data&lt;br /&gt;
　doctype - 返回结果的数据格式，xml或json或jsonp&lt;br /&gt;
　version - 版本，当前最新版本为1.1&lt;br /&gt;
　q - 要翻译的文本，不能超过200个字符，需要使用utf-8编码&lt;br /&gt;
errorCode：&lt;br /&gt;
　0 - 正常&lt;br /&gt;
　20 - 要翻译的文本过长&lt;br /&gt;
　30 - 无法进行有效的翻译&lt;br /&gt;
　40 - 不支持的语言类型&lt;br /&gt;
　50 - 无效的key  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;详见&lt;a href=&#34;http://fanyi.youdao.com/openapi?path=data-mode&#34;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python实现的代码如下：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;urllib2&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;json&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;green&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[0;32m&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[0m: &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[0;34m&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\033&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;[0m&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;opener&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;urllib2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build_opener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]))&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;url_utf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;http://fanyi.youdao.com/fanyiapi.do?keyfrom=asdfksljl&amp;amp;key=908880018&amp;amp;type=data&amp;amp;doctype=json&amp;amp;version=1.1&amp;amp;q=&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;result_json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;opener&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url_utf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tran&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;translation&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;green&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&amp;#39;翻译&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tran&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;u&amp;#39;读音: &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;basic&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;phonetic&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;explain&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;basic&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;explains&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;u&amp;#39;解释: &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;explain&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;web&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;web&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;value_str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;value_str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;u&amp;#39;[&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;] &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value_str&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或见&lt;a href=&#34;https://gist.github.com/zqqf16/5610235&#34;&gt;Gist&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;把上面的脚本命名为“t”，放在&lt;code&gt;~/bin&lt;/code&gt;下，需要翻译的时候打开终端输入&lt;code&gt;t 文本&lt;/code&gt;即可~&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;图片&#34; src=&#34;/static/img/youdao-translation.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PS: 用的时候最好自己去申请一个Key~&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 20 May 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>用Graphviz画数据结构图</title>
		<link>http://blog.zorro.im/posts/use-graphviz-to-draw-struct-graph.html</link>
		<description>&lt;p&gt;近来上班研究前人代码，数据结构很是个复杂。笔和纸基本满足不了要求，所以研究了一下用Graphviz这个利器绘制数据结构图。&lt;/p&gt;
&lt;p&gt;废话不多说，上代码：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;digraph g {
    graph [ rankdir = &amp;quot;LR&amp;quot; ];
    node [shape = record];

    a [
        label = &amp;quot;&amp;lt;f&amp;gt; struct a|&amp;lt;f0&amp;gt; int i|&amp;lt;f1&amp;gt; char str[10]&amp;quot;
    ];

    b [
        label = &amp;quot;&amp;lt;f&amp;gt; struct b|&amp;lt;f0&amp;gt; struct a *p|char name[100]&amp;quot;
    ];

    &amp;quot;b&amp;quot;:f0 -&amp;gt; &amp;quot;a&amp;quot;:f;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把上述代码保存到&lt;code&gt;example.dot&lt;/code&gt;，然后执行：&lt;code&gt;dot -Tpng example.dot -o example.png&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;绘出的图如下：
&lt;img alt=&#34;graph&#34; src=&#34;/static/img/graphviz.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;更多实例，请参考&lt;a href=&#34;http://www.graphviz.org/Gallery.php&#34;&gt;Graphviz官网&lt;/a&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 16 May 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>小饭馆与云计算</title>
		<link>http://blog.zorro.im/posts/tucao-cloud.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;本文标题完全属于闹着玩，属于吐槽系列之一，看之前请三思。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;五一回家，去亲戚家的餐馆帮忙。收拾桌子的时候发现，供客人们吃饭用的碗筷都不用自己洗刷，只需放到一个大箱子里，过几天就会有专门的公司来收走，换上一批新的。&lt;/p&gt;
&lt;p&gt;顿时颇有感慨，这不就是互联网上炒得稀烂的传说中的“云计算”么。小餐馆通过租用消毒餐具公司的服务，省了购买、洗刷、消毒的成本。规模小的时候少租点，规模大了就多租点。通过询问才知，这种模式貌似已经存在多年了。&lt;/p&gt;
&lt;p&gt;反观现在的互联网，自从“云计算”这个概念出来之后，各种打着“云”为旗号的东西层出不穷，颇有当年“纳米技术”的烂大街之势。观其本质，不过就是新瓶装了个旧酒。炒啊炒啊，啥时候能静下心来好好琢磨一下呢？&lt;/p&gt;
&lt;p&gt;--EOF--&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Tue, 14 May 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>吐槽一下专业</title>
		<link>http://blog.zorro.im/posts/tucao-major.html</link>
		<description>&lt;blockquote&gt;
&lt;p&gt;本文吐槽为主，杂乱无章，技术含量地下，阅读前请三思。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;把专业看得太重&lt;/strong&gt;，填报志愿的时候误打误撞选了个专业，即使不太感兴趣也要对其托付终生，非此专业不干。看看一个人在人人网上的分享就能分析出他是啥专业。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总想着用自己的专业解决所有事情&lt;/strong&gt;，学计算机的恨不能连养猫养狗都写个程序，摆个地摊都想来个客户端。用自己所学知识解决了实际生活生产问题，这叫为社会做贡献；用自己的知识成功地把简单的东西复杂化，这叫吃饱撑得。&lt;/p&gt;
&lt;p&gt;--EOF--&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Mon, 13 May 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>高亮Markdown中的代码</title>
		<link>http://blog.zorro.im/posts/how-to-highlight-code-in-markdown.html</link>
		<description>&lt;p&gt;Markdown语法标准中并没有一种方法来标明代码语言的种类。所以要想用Javascript来进行代码高亮的话就需要手动加一些类似于&lt;code&gt;&amp;lt;code class=&#34;python&#34;&amp;gt;&lt;/code&gt;的HTML标签，显得十分Ugly。&lt;/p&gt;
&lt;p&gt;于是乎想从Server端入手，想到了Pygments这个神器。但问题又来了。。。&lt;/p&gt;
&lt;p&gt;初步打算用&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;```python
print &amp;#39;hello&amp;#39;
```
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样的方式来指明代码种类。先把代码段用正则匹配出来，根据语言种类调用Pygments进行着色。然后再把其它部分连同着色后的的代码段一起Markdown转换。&lt;/p&gt;
&lt;p&gt;后来越想越觉得不太靠谱，还是有点Ugly。&lt;/p&gt;
&lt;p&gt;于是乎继续Google，终于发现了一个完美的方法，并对Markdown2刮目相看。&lt;/p&gt;
&lt;p&gt;一直用Markdown2这个Python写的解释器来转换Markdown脚本，之前光看名字还觉得这玩意是个山寨货。今天研究发现，这货还挺好用。&lt;/p&gt;
&lt;p&gt;Markdown2提供了一个代码高亮的扩展：&lt;a href=&#34;https://github.com/trentm/python-markdown2/wiki/fenced-code-blocks&#34;&gt;fenced code blocks&lt;/a&gt;, 它能自动匹配这样的代码，并调用Pygments进行着色。&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;```python
print &amp;quot;hi&amp;quot;
```
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用方法也很简单：&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;markdown2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;markdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;some markdown&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extras&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;fenced-code-blocks&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;问题圆满解决~&lt;/p&gt;
&lt;p&gt;更多Markdown2扩展请参考&lt;a href=&#34;https://github.com/trentm/python-markdown2/wiki/Extras&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Fri, 26 Apr 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>关于</title>
		<link>http://blog.zorro.im/posts/about.html</link>
		<description>&lt;p&gt;&lt;strong&gt;我&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;80末 IT 男，现混迹于帝都。&lt;/p&gt;
&lt;p&gt;11年工作至今，先后从事过 Web 开发，VPN Server 端开发等工作，目前在做 iOS。&lt;/p&gt;
&lt;p&gt;涉猎过的编程语言包括但不限于 C、Python、Objective-C、Shell、Perl、PHP、Javascript、TCL。&lt;/p&gt;
&lt;p&gt;同时用着 OS X，Windows 以及 Ubuntu。&lt;/p&gt;
&lt;p&gt;不懂云计算，不会大数据，也不懂 O2O。&lt;/p&gt;
&lt;p&gt;爱好广泛，硬件、机械、电子、木工，都爱伸一脚。&lt;/p&gt;
&lt;p&gt;会修自来水、热水器，也会修家电、自行车、防盗门…… 原则就是自己能干的就不求别人。&lt;/p&gt;
&lt;p&gt;不是五毛，也不是美分。爱生活，不反社会。辟谣爱好者，崇尚实事求是。&lt;/p&gt;
&lt;p&gt;正在入门的摄影爱好者，不会 PS，反唯器材论。&lt;/p&gt;
&lt;p&gt;智商中等偏下，玩不明白三国杀以及各种复杂游戏，水平仅限于和邻居小孩斗地主。&lt;/p&gt;
&lt;p&gt;对电脑游戏有着天生的认知障碍，仅对 CS、红警等少数老掉牙游戏有着特殊爱好。&lt;/p&gt;
&lt;p&gt;目前持有 rMBP、台式机、iPad2、iPhone 5、Arduino、Raspberry Pi B+、宾得K-30、电钻以及电烙铁……&lt;/p&gt;
&lt;p&gt;联系方式：zqqf16[at]gmail[dot]com&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;博客&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了写博客前前后后换了多次阵地，用过主机，买过 VPS，现在来到 Github。希望能够坚持下去，争取每周都有更新。&lt;/p&gt;
&lt;p&gt;本博客是由本人写的一个非常 Ugly 的 Python 脚本生成的、纯天然、无公害的、静态博客。如有兴趣，欢迎 Fork：&lt;a href=&#34;https://github.com/zqqf16/zqqf16.github.com&#34;&gt;Github&lt;/a&gt; | &lt;a href=&#34;http://git.oschina.net/zqqf16/peanut&#34;&gt;Git@OSC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;若无强调，本博客所有文章均属本人原创，转载时请注明出处。如有问题，欢迎留言。&lt;/p&gt;
&lt;p&gt;另外，本人水平有限，表达能力底下，各位看官见谅。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面是广告&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你正在找科学上网的方法，不妨试一下&lt;a href=&#34;http://refyunti.com/?r=65dd573aab9f2f10&#34;&gt;云梯&lt;/a&gt;，多国机房随意选择。如果点击我的推广&lt;a href=&#34;http://refyunti.com/?r=65dd573aab9f2f10&#34;&gt;链接&lt;/a&gt;购买，你将节省10块大洋～&lt;/p&gt;
&lt;p&gt;如果你想试一下 VPS，不妨试一下 &lt;a href=&#34;https://www.digitalocean.com/?refcode=f982e59f11b0&#34;&gt;Digital Ocean&lt;/a&gt;，通过我的&lt;a href=&#34;https://www.digitalocean.com/?refcode=f982e59f11b0&#34;&gt;链接&lt;/a&gt;注册，你将获得10刀～ 或者可以尝试一下日本的 &lt;a href=&#34;https://www.conoha.jp/referral/?token=7IKgEb4U78UeQQN6jbKq3sAZXgnSXdtC4GnQS95EHt7gKgiAd8w-Q36&#34;&gt;ConoHa&lt;/a&gt;。&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Thu, 25 Apr 2013 00:00:00 +0800</pubDate>
    </item>
	
    <item>
		<title>Hello World</title>
		<link>http://blog.zorro.im/posts/hello-world.html</link>
		<description>&lt;p&gt;把博客搬到了Github&lt;/p&gt;
&lt;p&gt;测试一下Markdown&lt;/p&gt;
&lt;h2 id=&#34;this-is-an-h2&#34;&gt;This is an H2&lt;/h2&gt;
&lt;h3 id=&#34;this-is-an-h3&#34;&gt;This is an H3&lt;/h3&gt;
&lt;h4 id=&#34;this-is-an-h4&#34;&gt;This is an H4&lt;/h4&gt;
&lt;h5 id=&#34;this-is-an-h5&#34;&gt;This is an H5&lt;/h5&gt;
&lt;h6 id=&#34;this-is-an-h6&#34;&gt;This is an H6&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the first level of quoting.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is nested blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Back to the first level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;unordered-list&#34;&gt;Unordered List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ordered-list&#34;&gt;Ordered List&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;li&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.&lt;/li&gt;
&lt;li&gt;Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A sample text here. And some code below:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gobject&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;task &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;, done&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inline code &lt;code&gt;printf()&lt;/code&gt; here.&lt;/p&gt;
&lt;p&gt;This is a link to &lt;a href=&#34;http://google.com&#34;&gt;Google&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;single asterisks&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create fake iPhone text conversations. Enter a conversation: Example: Dad: Your mom and I are going to divorce next month. Son: Why ? Call me please.&lt;/p&gt;
&lt;p&gt;Create fake iPhone text conversations. Enter a conversation: Example: Dad: Your mom and I are going to divorce next month. Son: Why ? Call me please.&lt;/p&gt;</description>
		<author>zqqf16</author>
		<copyright></copyright>
		<pubDate>Wed, 24 Apr 2013 00:00:00 +0800</pubDate>
    </item>
	
</channel>
</rss>